The fixed code for the Alloy specification is:

sig Node {
    adj : set Node
}

pred undirected {
    adj = ~(adj)
}

pred oriented {
    no adj & ~(~adj)
}

pred acyclic {
    all n:Node | n !in n.^adj
}

pred complete {
    all n1, n2 : Node | (n1 != n2) => (n2 in n1.adj)
}

pred noLoops {
    no iden & adj
}

pred weaklyConnected {
    all n1, n2 : Node | (n1 != n2) => (n2 in n1.*(adj+~adj))
}

pred stronglyConnected {
    all n1, n2 : Node | (n1 != n2) => (n2 in n1.*adj)
}

pred transitive {
    adj.adj in adj
}

assert undirectedRepaired {
    undirected[] iff adj = ~(adj)
}

assert orientedRepaired {
    oriented[] iff no adj & ~(~adj)
}

assert acyclicRepaired {
    acyclic[] iff all n : Node | n !in n.^adj
}

assert completeRepaired {
    complete[] iff all n1, n2 : Node | (n1 != n2) => (n2 in n1.adj)
}

assert noLoopsRepaired {
    noLoops[] iff no iden & adj
}

assert weaklyConnectedRepaired {
    weaklyConnected[] iff all n1, n2 : Node | (n1 != n2) => (n2 in n1.*(adj+~adj))
}

assert stronglyConnectedRepaired {
    stronglyConnected[] iff all n1, n2 : Node | (n1 != n2) => (n2 in n1.*adj)
}

assert transitiveRepaired {
    transitive[] iff adj.adj in adj
}

check undirectedRepaired expect 0
check orientedRepaired expect 0
check acyclicRepaired expect 0
check completeRepaired expect 0
check noLoopsRepaired expect 0
check weaklyConnectedRepaired expect 0
check stronglyConnectedRepaired expect 0
check transitiveRepaired expect 0