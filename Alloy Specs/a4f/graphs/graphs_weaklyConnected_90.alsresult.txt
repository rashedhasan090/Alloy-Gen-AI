The bug in this specification is in the "weaklyConnected" predicate. The commented out command does not check if every node is connected to every other node, instead it only checks if every node is in the reflexive-transitive closure of adj+~adj. This can result in graphs that are not weakly connected being classified as weakly connected. 

Here is the fixed code:

sig Node {
    adj: set Node
}

pred undirected {
    adj = ~adj 
}

pred oriented {
    no adj & ~adj 
}

pred acyclic {
    all a: Node | a not in a.^adj 
}

pred complete {
    all n, m: Node | n!=m => m in n.adj
}

pred noLoops {
    no iden & adj
}

pred weaklyConnected {
    all n, m: Node | n!=m => m in n.*(adj+~adj)
}

pred stronglyConnected {
    all n: Node | n in n.*adj
}

pred transitive {
    all n,m,k: Node | (n->m) in adj and (m->k) in adj => (n->k) in adj
}

check undirected
check oriented
check acyclic
check complete
check noLoops
check weaklyConnected
check stronglyConnected
check transitive

pred undirectedOK {
    adj = ~adj
}
assert undirectedRepaired {
    undirected[] iff undirectedOK[]
}

pred orientedOK {
    no adj & ~adj 
}
assert orientedRepaired {
    oriented[] iff orientedOK[]
}

pred acyclicOK {
    all a:Node | a not in a.^adj
}
assert acyclicRepaired {
    acyclic[]  iff acyclicOK[]
}

pred completeOK {
    all n, m: Node | n!=m => m in n.adj
}
assert completeRepaired {
    complete[] iff completeOK[]
}

pred noLoopsOK {
    no iden & adj
}
assert noLoopsRepaired {
    noLoops[]  iff noLoopsOK[]
}

pred weaklyConnectedOK {
    all n, m: Node | n!=m => m in n.*(adj+~adj)
}
assert weaklyConnectedRepaired {
    weaklyConnected[]  iff weaklyConnectedOK[]
}

pred stronglyConnectedOK {
    all n: Node | n in n.*adj
}
assert stronglyConnectedRepaired {
    stronglyConnected[]  iff stronglyConnectedOK[]
}

pred transitiveOK {
    all n,m,k: Node | (n->m) in adj and (m->k) in adj => (n->k) in adj
}
assert transitiveRepaired {
    transitive[] iff transitiveOK[]
}

check undirectedRepaired expect 0
check orientedRepaired expect 0
check acyclicRepaired expect 0
check completeRepaired expect 0
check noLoopsRepaired expect 0
check weaklyConnectedRepaired expect 0
check stronglyConnectedRepaired expect 0
check transitiveRepaired expect 0