sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    all t : Teacher | t in t.Teaches
}

pred inv7 {
    all t : Teacher | t.Teaches in Class
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone (c.Teaches & Teacher)
}

pred inv10 {
    all c:Class, s:Student | some g: Group | g = c.Groups[s]
}

pred inv11 {
    all c : Class | (some c.Groups) implies some t : Teacher | t.Teaches = c 
}

pred inv12 {
    all t : Teacher | some g: Group | g in (t.Teaches).Groups
}

pred inv13 {
    all t: Teacher, s: Student | s in t.Tutors implies t in s.Teaches
}

pred inv14 {
    all s : Student, c : Class, g : Group | (c -> s -> g in Groups) implies 
        some t : Teacher | t -> c in t.Tutors
}

pred inv15 {
    all s : Person | some t : Teacher & t in ^s.Tutors
}

// CHECKING REPAIRS
pred inv14_OK {
    all s : Student, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and 
        t -> c in t.Teaches implies t -> s in Tutors
}

// ASSERTIONS
assert inv1_Repaired {
    inv1[] iff Person in Student 
}

assert inv2_Repaired {
    inv2[] iff no Teacher 
}

assert inv3_Repaired {
    inv3[] iff no (Student & Teacher) 
}

assert inv4_Repaired {
    inv4[] iff Person in (Student + Teacher) 
}

assert inv5_Repaired {
    inv5[] iff some Teacher.Teaches 
}

assert inv6_Repaired {
    inv6[] iff all t : Teacher | t in t.Teaches
}

assert inv7_Repaired {
    inv7[] iff all t : Teacher | t.Teaches in Class
}

assert inv8_Repaired {
    inv8[] iff all t:Teacher | lone t.Teaches 
}

assert inv9_Repaired {
    inv9[] iff all c:Class | lone (c.Teaches & Teacher)
}

assert inv10_Repaired {
    inv10[] iff all c:Class, s:Student | some g: Group | g = c.Groups[s]
}

assert inv11_Repaired {
    inv11[] iff all c : Class | (some c.Groups) implies some t : Teacher | t.Teaches = c 
}

assert inv12_Repaired {
    inv12[] iff all t : Teacher | some g: Group | g in (t.Teaches).Groups
}

assert inv13_Repaired {
    inv13[] iff all t: Teacher, s: Student | s in t.Tutors implies t in s.Teaches
}

assert inv14_Repaired {
    inv14[] iff inv14_OK[]
}

assert inv15_Repaired {
    inv15[] iff all s : Person | some t : Teacher & t in ^s.Tutors
}

// CHECKING REPAIRS
check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0 
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0