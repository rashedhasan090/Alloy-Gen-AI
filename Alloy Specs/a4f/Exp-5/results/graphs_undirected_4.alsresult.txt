sig Node {
    adj : set Node
}

pred undirected {
    all a,b:Node | a->b in adj && b->a in adj 
}

pred oriented {
   no adj & ~adj 
}

pred acyclic {
    all a:Node | a not in a.^adj 
}

pred complete {
    all n:Node | Node in n.adj <=> n.adj = Node
}

pred noLoops {
    no (iden & adj) 
}

pred weaklyConnected {
    all n:Node | Node in n.*(adj+~adj) 
}

pred stonglyConnected {
    all n:Node | Node in n.^adj  
}

pred transitive {
    adj.adj in adj 
}

pred undirectedOK {
    adj = ~adj
}

assert undirectedRepaired {
    undirected[] iff undirectedOK[]
}

pred orientedOK {
    no adj & ~adj 
}

assert orientedRepaired {
    oriented[] iff orientedOK[]
}

pred acyclicOK {
    all a:Node | a not in a.^adj
}

assert acyclicRepaired {
   acyclic[]  iff acyclicOK[]
}

pred completeOK {
    all n:Node | Node in n.adj
}

assert completeRepaired {
    complete[] iff completeOK[]
}

pred noLoopsOK {
    no (iden & adj)
}

assert noLoopsRepaired {
   noLoops[]  iff noLoopsOK[]
}

pred weaklyConnectedOK {
    all n:Node | Node in n.*(adj+~adj)
}

assert weaklyConnectedRepaired {
   weaklyConnected[]  iff weaklyConnectedOK[]
}

pred stonglyConnectedOK {
    all n:Node | Node in n.^adj
}

assert stonglyConnectedRepaired {
   stonglyConnected[]  iff stonglyConnectedOK[]
}

pred transitiveOK {
    adj.adj in adj
}

assert transitiveRepaired {
    transitive[] iff transitiveOK[]
}

check undirectedRepaired expect 1
check orientedRepaired expect 1
check acyclicRepaired expect 1
check completeRepaired expect 1
check noLoopsRepaired expect 1
check weaklyConnectedRepaired expect 1
check stonglyConnectedRepaired expect 1
check transitiveRepaired expect 1

pred repair_pred_1{undirected[] iff undirectedOK[] }
run repair_pred_1

assert repair_assert_1{undirected[] iff undirectedOK[] }
check repair_assert_1