sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    Teacher.Teaches in Class 
}

pred inv7 {
    all t : Teacher | t.Teaches in Class
}

pred inv8 {
    all t : Teacher | lone t.Teaches
}

pred inv9 {
    all c : Class | lone c.Teaches & Teacher
}

pred inv10 {
    all c : Class, s : Student | some s.(c.Groups)
}

pred inv11 {
    all c : Class | some c.Groups implies some t : Teacher | t.Teaches = c
}

pred inv12 {
    all t : Teacher | some g : t.Teaches.Groups
}

pred inv13 {
    all t : Teacher | all s : t.Tutors | s.Teaches in t.Teaches
}

pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Class.Groups) and t -> c in t.Teaches implies t -> s in t.Tutors
}

pred inv15 {
    all s : Person | some t : Teacher & ^s.Tutors = t
}

run {
    assert inv1
    assert inv2
    assert inv3
    assert inv4
    assert inv5
    assert inv6
    assert inv7
    assert inv8
    assert inv9
    assert inv10
    assert inv11
    assert inv12
    assert inv13
    assert inv14
    assert inv15
} for 15
```