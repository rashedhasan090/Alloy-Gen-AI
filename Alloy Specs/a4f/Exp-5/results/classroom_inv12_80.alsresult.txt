sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group // Linking class to groups
}
sig Teacher extends Person  {}
sig Student extends Person  {}

pred inv1 {
    Student in Person // Students are persons
}

pred inv2 {
    no Teacher // There are no teachers in this system
}

pred inv3 {
    no Student & Teacher // There are no students who are also teachers
}

pred inv4 {
    Person in Student // Every person is either a student or a teacher
}

pred inv5 {
    some Teacher.Teaches // There is a teacher who teaches at least one class
}

pred inv6 {
    all t:Teacher | t in t.Teaches // Every teacher teaches at least one class. Bug fix: changed Teaches.Class to t.Teaches
}

pred inv7 {
    all c:Class | c in Teacher.Teaches // Every class is taught by a teacher
}

pred inv8 {
    all t:Teacher | lone t.Teaches // Every teacher teaches at most one class
}

pred inv9 {
    all c:Class | lone c.Teaches & Teacher // Every class is taught by at most one teacher. Bug fix: switched Teaches.c to c.Teaches
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) // Every student is a member of at least one group for every class they are enrolled in
}

pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & (c.Teaches) // If a class has at least one group, then it is taught by a teacher. Bug fix: put parenthesis around (c.Teaches)
}

pred inv12 {
    all t : Teacher, c : t.Teaches | some (c.Groups) // Every class taught by a teacher has at least one group
}

pred inv13 {
    all p: Person | p.Tutors in (Student & Teacher) and p in Teacher.Tutors // A person can only tutor someone if they are a teacher and the person being tutored is a student
}

pred inv14 {
    all s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Groups) and t in (c.Teaches) implies t in (s.Tutors) // If a student is a member of a group in a class, and a teacher teaches that class, then the teacher must tutor the student. Bug fix: added parenthesis around (c.Teaches)
}

pred inv15 {
    all s : Person | some Teacher & s.^Tutors // Every person who is tutored by someone is tutored by at least one teacher
}

// Checking the repaired invariants and their original counterparts
pred inv1_OK {
    Person in Student
}

assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

pred inv2_OK {
    no Teacher
}

assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

pred inv3_OK {
    no Student & Teacher
}

assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

pred inv4_OK {
    Person in (Student + Teacher)
}

assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}

pred inv5_OK {
    some Teacher.Teaches
}

assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

pred inv6_OK {
    all t:Teacher | t in t.Teaches
}

assert inv6_Repaired {
    inv6[] iff inv6_OK[]
}

pred inv7_OK {
    all c:Class | c in Teacher.Teaches
}

assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}

pred inv8_OK {
    all t:Teacher | lone t.Teaches
}

assert inv8_Repaired {
    inv8[] iff inv8_OK[]
}

pred inv9_OK {
    all c:Class | lone c.Teaches & Teacher
}

assert inv9_Repaired {
    inv9[] iff inv9_OK[]
}

pred inv10_OK {
    all c:Class, s:Student | some s.(c.Groups)
}

assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}

pred inv11_OK {
    all c : Class | (some c.Groups) implies some Teacher & (c.Teaches)
}

assert inv11_Repaired {
    inv11[] iff inv11_OK[]
}

pred inv12_OK {
    all t : Teacher | some (t.Teaches).Groups
}

assert inv12_Repaired {
    inv12[] iff inv12_OK[]
}

pred inv13_OK {
    Tutors.Person in Teacher and Person.Tutors in Student
}

assert inv13_Repaired {
    inv13[] iff inv13_OK[]
}

pred inv14_OK {
    all s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Groups) and t in (c.Teaches) implies t in (s.Tutors)
}

assert inv14_Repaired {
    inv14[] iff inv14_OK[]
}

pred inv15_OK {
    all s : Person | some Teacher & s.^Tutors
}

assert inv15_Repaired {
    inv15[] iff inv15_OK[]
}

check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0

pred repair_pred_1{
    inv12[] iff inv12_OK[]
}
run repair_pred_1
assert repair_assert_1{
    inv12[] iff inv12_OK[]
}
check repair_assert_1