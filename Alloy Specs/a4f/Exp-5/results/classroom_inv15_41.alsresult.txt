sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    all t:Teacher | t in t.Teaches.Teacher 
}

pred inv7 {
    all c:Class | c.Teaches in Teacher 
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone c.Teaches & Teacher 
}

pred inv10 {
    all c:Class, s:Student | some c.Groups[s] 
}

pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & c.Teaches 
}

pred inv12 {
    all t : Teacher | some (t.Teaches).Groups 
}

pred inv13 {
    all p:Person | (p in Teacher.Tutors) implies (p.Teaches in Student) 
}

pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c.Groups[s] = g) and (t.Teaches = c) implies (t in s.Tutors) 
}

pred inv15 {
    all s : Student | some t : Teacher | t in s.^Tutors 
}

run inv1_Repaired for 6
run inv2_Repaired for 6
run inv3_Repaired for 6
run inv4_Repaired for 6
run inv5_Repaired for 6
run inv6_Repaired for 6
run inv7_Repaired for 6
run inv8_Repaired for 6
run inv9_Repaired for 6
run inv10_Repaired for 6
run inv11_Repaired for 6
run inv12_Repaired for 6
run inv13_Repaired for 6
run inv14_Repaired for 6
run inv15_Repaired for 6

assert inv1_Repaired {
    inv1[] iff Person in Student
}

assert inv2_Repaired {
    inv2[] iff no Teacher
}

assert inv3_Repaired {
    inv3[] iff no Student & Teacher
}

assert inv4_Repaired {
    inv4[] iff Person in (Student + Teacher)
}

assert inv5_Repaired {
    inv5[] iff some Teacher.Teaches
}

assert inv6_Repaired {
    inv6[] iff all t:Teacher | t in t.Teaches.Teacher
}

assert inv7_Repaired {
    inv7[] iff all c:Class | c.Teaches in Teacher
}

assert inv8_Repaired {
    inv8[] iff all t:Teacher | lone t.Teaches
}

assert inv9_Repaired {
    inv9[] iff all c:Class | lone c.Teaches & Teacher
}

assert inv10_Repaired {
    inv10[] iff all c:Class, s:Student | some c.Groups[s]
}

assert inv11_Repaired {
    inv11[] iff all c : Class | (some c.Groups) implies some Teacher & c.Teaches
}

assert inv12_Repaired {
    inv12[] iff all t : Teacher | some (t.Teaches).Groups
}

assert inv13_Repaired {
    inv13[] iff all p:Person | (p in Teacher.Tutors) implies (p.Teaches in Student)
}

assert inv14_Repaired {
    inv14[] iff all s : Person, c : Class, t : Teacher, g : Group | (c.Groups[s] = g) and (t.Teaches = c) implies (t in s.Tutors)
}

assert inv15_Repaired {
    inv15[] iff all s : Student | some t : Teacher | t in s.^Tutors
}