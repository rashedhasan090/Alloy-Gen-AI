sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person  {}

sig Student extends Person  {}

pred inv1 {
    Person in Student 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    all t:Teacher | t in t.Teaches.Teaches
}

pred inv7 {
    all t:Teacher | all c:t.Teaches | c in Class
}

pred inv8 {
    all t:Teacher | lone t.Teaches
}

pred inv9 {
    all c:Class | lone t:Teacher | t in Teaches.c
}

pred inv10 {
    all c:Class | all s:Student | some g:c.Groups[s]
}

pred inv11 {
    all c : Class | (some c.Groups) implies some t:Teacher & t.Teaches=c
}

pred inv12 {
    all t : Teacher | some g:t.Teaches.Groups
}

pred inv13 {
    all t:Teacher, s:Student | s in t.Tutors implies t in s.Teaches
}

pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors
}

pred inv15 {
    all s : Person | some t:Teacher | t in ^s.Tutors
}

check inv1, inv2, inv3, inv4, inv5, inv6, inv7, inv8, inv9, inv10, inv11, inv12, inv13, inv14, inv15 for 0

pred repair_pred_1{inv8[] iff inv8_OK[] }
run repair_pred_1
assert repair_assert_1{inv8[] iff inv8_OK[] }
check repair_assert_1