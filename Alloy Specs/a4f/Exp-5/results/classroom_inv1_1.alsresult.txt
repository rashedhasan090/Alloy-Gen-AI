sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : set Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}

pred inv1 { 
    // at least one person is a student
    some Student
}

pred inv2 { 
    // no person is a teacher
    no Teacher
}

pred inv3 { 
    // no person is both a student and a teacher
    no Student & Teacher 
}

pred inv4 { 
    // every person is either a student or a teacher
    Person = Student + Teacher 
}

pred inv5 { 
    // there exists at least one teacher that teaches at least one class
    some t: Teacher | some c: t.Teaches
}

pred inv6 { 
    // every teacher teaches at least one class
    all t:Teacher | some t.Teaches
}

pred inv7 { 
    // every class is taught by at least one teacher
    all c:Class | some t:Teacher | t.teaches = c
}

pred inv8 { 
    // every teacher teaches at most one class
    all t:Teacher | lone t.Teaches 
}

pred inv9 { 
    // every class is taught by at most one teacher
    all c:Class | lone t:Teacher | t.teaches = c
}

pred inv10 { 
    // every class has at least one student in a group
    all c:Class | some p:Person | p in c.Groups
}

pred inv11 { 
    // if a class has at least one group, then there is at least one teacher that teaches the class
    all c:Class | (some c.Groups) implies some t:Teacher | t.Teaches = c
}

pred inv12 { 
    // every teacher teaches at least one group in at least one class
    all t:Teacher | some c:t.Teaches | some g:Class[c.Groups] | some p:Person[g] | p in t.Tutors
}

pred inv13 { 
    // every person who tutors someone is a teacher and every person who is tutored is a student
    all p1,p2:Person | p1 in p2.Tutors implies (p1 in Teacher and p2 in Student)
}

pred inv14 { 
    // if a class has at least one group including person p, and teacher t teaches the class, then t tutors p
    all c:Class, s:Person, g:Group | (g = c.Groups[s] and some t:Teacher | t.teaches = c) implies (t in s.Tutors)
}

pred inv15 { 
    // every person who is tutored by someone is a student and is tutored by at least one teacher
    all s:Student | some t:Teacher | t in s.^Tutors
}

assert inv1_Repaired { 
    inv1[] iff inv1_OK[]
}

assert inv2_Repaired { 
    inv2[] iff inv2_OK[]
}

assert inv3_Repaired { 
    inv3[] iff inv3_OK[]
}

assert inv4_Repaired { 
    inv4[] iff inv4_OK[]
}

assert inv5_Repaired { 
    inv5[] iff inv5_OK[]
}

assert inv6_Repaired { 
    inv6[] iff inv6_OK[]
}

assert inv7_Repaired { 
    inv7[] iff inv7_OK[]
}

assert inv8_Repaired { 
    inv8[] iff inv8_OK[]
}

assert inv9_Repaired { 
    inv9[] iff inv9_OK[]
}

assert inv10_Repaired { 
    inv10[] iff inv10_OK[]
}

assert inv11_Repaired { 
    inv11[] iff inv11_OK[]
}

assert inv12_Repaired { 
    inv12[] iff inv12_OK[]
}

assert inv13_Repaired { 
    inv13[] iff inv13_OK[]
}

assert inv14_Repaired { 
    inv14[] iff inv14_OK[]
}

assert inv15_Repaired { 
    inv15[] iff inv15_OK[]
}

check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0 
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0