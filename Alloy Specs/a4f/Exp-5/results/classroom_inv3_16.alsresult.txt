sig Person  {
        Tutors : set Person,
        Teaches : set Class
}

sig Group {}

sig Class  {
        Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
        Person in Student 
}

pred inv2 {
        no Teacher 
}

pred inv3 {
        all p:Person | (p in Student or p in Teacher) 
}

pred inv4 {
        Person in (Student + Teacher) 
}

pred inv5 {
        some Teacher.Teaches 
}

pred inv6 {
        Teacher.Teaches in Class
}

pred inv7 {
        Teacher.Teaches in Class 
}

pred inv8 {
        all t:Teacher | lone t.Teaches 
}

pred inv9 {
        all c:Class | lone {t:Teacher | t.Teaches = c}
}

pred inv10 {
        all c:Class, s:Student | some g:Group | g = c.Groups[s]
}

pred inv11 {
        all c : Class | (some c.Groups) implies some t:Teacher | t.Teaches = c 
}

pred inv12 {
        all t : Teacher | some g:Group, c:Class | g = (t.Teaches).Groups and c.Teaches = t 
}

pred inv13 {
        all p:Person | (p.Tutors in Teacher and p in Student) 
}

pred inv14 {
        all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors
}

pred inv15 {
        all s : Person | some T:Teacher | T.Tutors = s 
}

check inv1 expect 0
check inv2 expect 0
check inv3 expect 0 
check inv4 expect 0
check inv5 expect 0
check inv6 expect 0
check inv7 expect 0
check inv8 expect 0
check inv9 expect 0
check inv10 expect 0
check inv11 expect 0
check inv12 expect 0
check inv13 expect 0
check inv14 expect 0
check inv15 expect 0