sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}

pred inv1 {
    Student in Person 
}
pred inv2 {
    Teacher = none 
}
pred inv3 {
    no Student & Teacher 
}
pred inv4 {
    Person = Student + Teacher
}
pred inv5 {
    some t: Teacher | t.Teaches != none
}
pred inv6 {
    all t: Teacher | t.Teaches in Class
}
pred inv7 {
    all c: Class | c in Teacher.Teaches
}
pred inv8 {
    all t: Teacher | lone t.Teaches
}
pred inv9 {
    all c: Class | lone (Teaches.c & Teacher)
}
pred inv10 {
    all c: Class, s: Student | some g: c.Groups | s in g
}
pred inv11 {
    all c: Class | (some c.Groups) implies (some t: Teacher | t.Teaches = c)
}
pred inv12 {
    all t: Teacher | some g: (t.Teaches).Groups
}
pred inv13 {
    all t: Teacher, s: Student | s in t.Tutors implies t in s.Teaches
}
pred inv14 {
    all s: Person, c: Class, g: Group | (c -> s -> g) in Class.Groups implies (some t: Teacher | t.Teaches = c and (t -> s) in t.Tutors)
}
pred inv15 {
    all s: Student | some t: Teacher | t in s.^Tutors
}
check inv1, inv2, inv3, inv4, inv5, inv6, inv7, inv8, inv9, inv10, inv11, inv12, inv13, inv14, inv15 for 0 but 15 Int.