sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group,
    Teachers: set Person
}

sig Teacher extends Person {}
sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in Student + Teacher
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher.Teaches in Class
}

pred inv7 {
    all c:Class | c.Teachers in Teacher
}

pred inv8 {
    all t:Teacher | lone t.Teaches
}

pred inv9 {
    all c:Class | lone (c.Teachers & Teacher)
}

pred inv10 {
    all c:Class, s:Student | some g:Group | s->g in c.Groups
}

pred inv11 {
    all c:Class, t: Teacher, s: Student | some g: Group | s -> g in c.Groups and t -> c in Teaches implies t in s.Tutors
}

pred inv12 {
    all t: Teacher | some t.Teaches.Groups
}

pred inv13 {
    all t: Teacher, s: Student | s in t.Tutors.Iff[t in s.Teaches]
}

pred inv14 {
    all s:Person, c:Class, g:Group | c.Groups[s][g] implies let t = c.Teachers | s.tutors = g.tutors
}

pred inv15 {
    all s:Person | some t:Teacher & ^s.Tutors
}

run {
    assert inv1
    assert inv2
    assert inv3
    assert inv4
    assert inv5
    assert inv6
    assert inv7
    assert inv8
    assert inv9
    assert inv10
    assert inv11
    assert inv12
    assert inv13
    assert inv14
    assert inv15
} for 5