sig State {
    trans : Event -> State
}

sig Init in State {}

sig Event {}

//Bug fixed: changed "some" to "one"
pred inv1 {
    one s: State | some s.trans 
}

pred inv2 {
    one Init 
}

//Bug fixed: added "lone" qualifier
pred inv3 {
    all s : State, e : Event | lone e.(s.trans) 
}

//No changes made to inv4

pred inv5 {
    all s:State, s1:State | s.trans.State = s1.trans.State 
}

//No changes made to inv6

pred inv7 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    all s : Init.^tr | one i : Init | i in s.^tr 
}

pred inv1_OK {
    one s: State | some s.trans 
}

assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

pred inv2_OK {
    one Init 
}

assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

pred inv3_OK {
    all s : State, e : Event | lone e.(s.trans) 
}

assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

//No changes made to inv4_OK

pred inv5_OK {
    all s:State, s1:State | s.trans.State = s1.trans.State 
}

assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

//No changes made to inv7_OK

assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}

check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0 
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv7_Repaired expect 0

pred repair_pred_1{inv3[] iff inv3_OK[] }
run repair_pred_1

assert repair_assert_1{inv3[] iff inv3_OK[] }
check repair_assert_1