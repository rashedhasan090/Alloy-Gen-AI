sig Node {
    adj : set Node
}

pred undirected {
    adj = ~adj  
}

pred oriented {
    no adj & ~adj 
}

pred acyclic {
    all a:Node | a not in a.^adj 
}

pred complete {
    all n:Node | n.adj = Node 
}

pred noLoops {
    all a:Node | a not in a.^next 
}

pred weaklyConnected {
    all n:Node | Node in n.*(adj+~adj) 
}

pred stonglyConnected {
    all n:Node | Node in n.*adj 
}

pred transitive {
    all n1, n2, n3:Node | n1 -> n2 -> n3 in adj implies n1 -> n3 in adj 
}

pred undirectedOK {
    adj = ~adj
}

assert undirectedRepaired {
    undirected[] iff undirectedOK[]
}

pred orientedOK {
    no adj & ~adj 
}

assert orientedRepaired {
    oriented[] iff orientedOK[]
}

pred acyclicOK {
    all a:Node | a not in a.^adj
}

assert acyclicRepaired {
    acyclic[]  iff acyclicOK[]
}

pred completeOK {
    all n:Node | n.adj = Node
}

assert completeRepaired {
    complete[] iff completeOK[]
}

pred noLoopsOK {
    no (iden & adj)
}

assert noLoopsRepaired {
    noLoops[]  iff noLoopsOK[]
}

pred weaklyConnectedOK {
    all n:Node | Node in n.*(adj+~adj)
}

assert weaklyConnectedRepaired {
    weaklyConnected[]  iff weaklyConnectedOK[]
}

pred stronglyConnectedOK {
    all n:Node | Node in n.*adj
}

assert stronglyConnectedRepaired {
    stronglyConnected[]  iff stronglyConnectedOK[]
}

pred transitiveOK {
    all n1, n2, n3:Node | n1 -> n2 -> n3 in adj implies n1 -> n3 in adj 
}

assert transitiveRepaired {
    transitive[] iff transitiveOK[]
}

check undirectedRepaired expect 0
check orientedRepaired expect 0
check acyclicRepaired expect 0
check completeRepaired expect 0
check noLoopsRepaired expect 0
check weaklyConnectedRepaired expect 0
check stronglyConnectedRepaired expect 0
check transitiveRepaired expect 0

pred repair_pred_1 {
    noLoops[] iff noLoopsOK[]
}

run repair_pred_1

assert repair_assert_1 {
    noLoops[] iff noLoopsOK[]
}

check repair_assert_1