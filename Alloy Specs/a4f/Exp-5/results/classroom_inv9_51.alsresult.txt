sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    Teacher = none
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person = Student + Teacher
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    all t: Teacher | t in t.Teaches.Class
}

pred inv7 {
    all c: Class | c in c.Groups.Person.Teaches
}

pred inv8 {
    all t: Teacher | lone t.Teaches
}

pred inv9 {
    all c: Class | lone (Teaches.c & Teacher)
}

pred inv10 {
    all c: Class, s: Student | some c.Groups.s
}

pred inv11 {
    all c: Class | (some c.Groups) implies some t: Teacher | t.Teaches = c
}

pred inv12 {
    all t: Teacher | some g: Group | (g in t.Teaches.Groups)
}

pred inv13 {
    all p: Person | (p.Tutors in Student and p in Teacher.Teaches.Person)
}

pred inv14 {
    all s: Person, c: Class, g: Group | (c.Groups.s = g) and (c in Teaching.t) implies (s in g.Person and t in s.Tutors)
}

pred inv15 {
    all s: Person | some t: Teacher | s in t.*Tutors
}

run inv1, inv2, inv3, inv4, inv5, inv6, inv7, inv8, inv9, inv10, inv11, inv12, inv13, inv14, inv15 for 5 but 5 Int

assert inv1_Repaired {
    inv1[] iff Student in Person
}

assert inv2_Repaired {
    inv2[] iff Teacher = none
}

assert inv3_Repaired {
    inv3[] iff no Student & Teacher
}

assert inv4_Repaired {
    inv4[] iff Person = Student + Teacher
}

assert inv5_Repaired {
    inv5[] iff some Teacher.Teaches
}

assert inv6_Repaired {
    inv6[] iff all t: Teacher | t in t.Teaches.Class
}

assert inv7_Repaired {
    inv7[] iff all c: Class | c in c.Groups.Person.Teaches
}

assert inv8_Repaired {
    inv8[] iff all t: Teacher | lone t.Teaches
}

assert inv9_Repaired {
    inv9[] iff all c: Class | lone (Teaches.c & Teacher)
}

assert inv10_Repaired {
    inv10[] iff all c: Class, s: Student | some c.Groups.s
}

assert inv11_Repaired {
    inv11[] iff all c: Class | (some c.Groups) implies some t: Teacher | t.Teaches = c
}

assert inv12_Repaired {
    inv12[] iff all t: Teacher | some g: Group | (g in t.Teaches.Groups)
}

assert inv13_Repaired {
    inv13[] iff all p: Person | (p.Tutors in Student and p in Teacher.Teaches.Person)
}

assert inv14_Repaired {
    inv14[] iff all s: Person, c: Class, g: Group | (c.Groups.s = g) and (c in Teaching.t) implies (s in g.Person and t in s.Tutors)
}

assert inv15_Repaired {
    inv15[] iff all s: Person | some t: Teacher | s in t.*Tutors
}

check inv1_Repaired
check inv2_Repaired
check inv3_Repaired
check inv4_Repaired
check inv5_Repaired
check inv6_Repaired
check inv7_Repaired
check inv8_Repaired
check inv9_Repaired
check inv10_Repaired
check inv11_Repaired
check inv12_Repaired
check inv13_Repaired
check inv14_Repaired
check inv15_Repaired