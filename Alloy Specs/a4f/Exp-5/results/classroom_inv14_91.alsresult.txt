sig Person {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class {
    Groups : Person -> Group
}
sig Teacher extends Person {}
sig Student extends Person {}
pred inv1 {
    Student in Person
}
pred inv2 {
    no Teacher
}
pred inv3 {
    no (Student & Teacher)
}
pred inv4 {
    Person in (Student + Teacher)
}
pred inv5 {
    some Teacher.Teaches
}
pred inv6 {
    Teacher.Teaches in Class
}
pred inv7 {
    all t: Teacher | t.Teaches in Class
}
pred inv8 {
    all t: Teacher | lone t.Teaches
}
pred inv9 {
    all c: Class | lone (c.Teaches & Teacher)
}
pred inv10 {
    all c: Class, s: Student | some g: Group | g in c.Groups[s]
}
pred inv11 {
    all c: Class | (some g: c.Groups | some t: Teacher | t Teaches c) implies some s: Student | s in g
}
pred inv12 {
    all t: Teacher | some g: t.Teaches.Groups
}
pred inv13 {
    all p: Person, t: p.Tutors | (t in Teacher and p in Student)
}
pred inv14 {
    all c: Class, s: Student | some g: c.Groups[s] implies some t: Teacher | t Teaches c and (t,s) in t.Tutors
}
pred inv15 {
    all s: Student | some t: Teacher | s in t.Tutors.*
}
check inv1 expect 0
check inv2 expect 0
check inv3 expect 0
check inv4 expect 0
check inv5 expect 0
check inv6 expect 0
check inv7 expect 0
check inv8 expect 0
check inv9 expect 0
check inv10 expect 0
check inv11 expect 0
check inv12 expect 0
check inv13 expect 0
check inv14 expect 0
check inv15 expect 0