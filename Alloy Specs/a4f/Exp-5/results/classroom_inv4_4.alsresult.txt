sig Person {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no (Teacher & Student)
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher in Class.Teaches
}

pred inv7 {
    all c:Class | c.Teaches in Teacher
}

pred inv8 {
    all t:Teacher | lone t.Teaches
}

pred inv9 {
    all c:Class | lone (c.Teaches & Teacher)
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups)
}

pred inv11 {
    all c:Class | (some c.Groups) implies some t:Teacher | t.Teaches = c
}

pred inv12 {
    all t:Teacher | some g:Group | g in (t.Teaches).Groups
}

pred inv13 {
    all t:Teacher, s:Student | s in t.Tutors
}

pred inv14 {
    all s:Person, c:Class | (c -> s -> _) in Class.Groups and some t:Teacher | t.Teaches = c implies t in s.Tutors
}

pred inv15 {
    all s:Person | some t:Teacher & ^s.Tutors
}

run inv1_Repaired for 5

run inv2_Repaired for 5

run inv3_Repaired for 5

run inv4_Repaired for 5

run inv5_Repaired for 5

run inv6_Repaired for 5

run inv7_Repaired for 5

run inv8_Repaired for 5

run inv9_Repaired for 5

run inv10_Repaired for 5

run inv11_Repaired for 5

run inv12_Repaired for 5

run inv13_Repaired for 5

run inv14_Repaired for 5

run inv15_Repaired for 5

assert repair_assert_1 { inv4[] iff inv4_OK[] }

check repair_assert_1