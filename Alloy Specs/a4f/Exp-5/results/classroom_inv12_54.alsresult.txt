sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}

pred inv1 {
    Student in Person 
}
pred inv2 {
    no Teacher 
}
pred inv3 {
    no Student & Teacher 
}
pred inv4 {
    Person in (Student + Teacher) 
}
pred inv5 {
    some Teacher.Teaches 
}
pred inv6 {
    all t:Teacher | t in t.Teaches.Class
}
pred inv7 {
    all t:Teacher | Teaching(t.Teaches)  
}
pred inv8 {
    all t:Teacher | lone t.Teaches 
}
pred inv9 {
    all c:Class | lone Teaching[Teacher, c] 
}
pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) 
}
pred inv11 {
    all c : Class | (some c.Groups) implies some Teaching[Teacher, c] 
}
pred inv12 {
    all t:Teacher | all c:Class | some g:Group | g in c.Groups[t]
}
pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student 
}
pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t -> c in Teaching implies t -> s in Tutors
}
pred inv15 {
    all s : Student | some Teaching[Teacher, ^s.Tutors]
}

pred Teaching[t: Teacher, c: Class] {
    t in c.Teaches
}

run {} for 5
check inv1
check inv2
check inv3 
check inv4
check inv5
check inv6
check inv7
check inv8
check inv9
check inv10
check inv11
check inv12
check inv13
check inv14
check inv15

pred repair_pred_1{inv12[] iff inv12_OK[] }
run repair_pred_1
assert repair_assert_1{inv12[] iff inv12_OK[] }
check repair_assert_1