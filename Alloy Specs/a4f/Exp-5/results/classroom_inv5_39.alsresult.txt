sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}

pred inv1 {
    Student in Person 
}
pred inv2 {
    no Teacher 
}
pred inv3 {
    no Student & Teacher 
}
pred inv4 {
    Person in (Student + Teacher) 
}
pred inv5 {
    some Teacher.Teaches 
}
pred inv6 {
    Teacher.Teaches in Class 
}
pred inv7 {
    Class in Teacher.Teaches 
}
pred inv8 {
    all t:Teacher | lone t.Teaches 
}
pred inv9 {
    all c:Class | lone (c -> Teacher) implies lone (c -> Student)
}
pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) 
}
pred inv11 {
    all c : Class | (some c.Groups) implies some t:Teacher | t.Teaches = c
}
pred inv12 {
    all t : Teacher | some (t.Teaches).Groups 
}
pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student 
}
pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors
}
pred inv15 {
    all s : Person | some t:Teacher | s in t.Tutors 
}

run inv1, inv2, inv3, inv4, inv5, inv6, inv7, inv8, inv9, inv10, inv11, inv12, inv13, inv14, inv15 for 5 

check inv1 for 5 expect 2
check inv2 for 5 expect 2
check inv3 for 5 expect 2
check inv4 for 5 expect 2
check inv5 for 5 expect 2
check inv6 for 5 expect 2
check inv7 for 5 expect 2
check inv8 for 5 expect 2
check inv9 for 5 expect 2
check inv10 for 5 expect 2
check inv11 for 5 expect 2
check inv12 for 5 expect 2
check inv13 for 5 expect 2
check inv14 for 5 expect 2
check inv15 for 5 expect 2