sig Person {
    Tutors: set Person,
    Teaches: set Class
}

sig Group {}

sig Class {
    Groups: Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    all p: Person | p in Student
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    all p: Person | p in Student or p in Teacher
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    all t: Teacher | t.Teaches in t
}

pred inv7 {
    all c: Class | c in Teacher.Teaches
}

pred inv8 {
    all t: Teacher | lone t.Teaches
}

pred inv9 {
    all c: Class | lone (Teaches.c & Teacher)
}

pred inv10 {
    all c: Class, s: Student | some g: Group | g = c.Groups[s]
}

pred inv11 {
    all c: Class | (some c.Groups) implies (some t: Teacher | t.Teaches = c)
}

pred inv12 {
    all t: Teacher | some c: Class | c.Groups.t
}

pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student
}

pred inv14 {
    all s: Person, c: Class, g: Group | c.Groups[s] = g and t: Person | t -> c in Teaches implies t.Tutors[s]
}

pred inv15 {
    all s: Person | some t: Teacher | s in ^t.Tutors
}

pred inv6_OK {
    Teacher in Teaches.Class
}

assert inv6_Repaired {
    inv6[] iff inv6_OK[]
}

check inv6_Repaired expect 0