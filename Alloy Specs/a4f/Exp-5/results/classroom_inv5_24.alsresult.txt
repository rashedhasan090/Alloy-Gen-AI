sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in Student + Teacher 
}

pred inv5 {
    some c : Class | some t : Teacher | t in c.Teaches
}

pred inv6 {
    Teacher.Teaches in Class 
}

pred inv7 {
    Teacher.Teaches in Class 
}

pred inv8 {
    all t : Teacher | lone t.Teaches 
}

pred inv9 {
    all c : Class | lone (c.Teaches & Teacher)
}

pred inv10 {
    all c : Class, s : Student | some g : Group | g = c.Groups[s]
}

pred inv11 {
    all c : Class | (some c.Groups) implies (some t : Teacher | t in c.Teaches)
}

pred inv12 {
    all t : Teacher | some g : Group | g in t.Teaches.Groups
}

pred inv13 {
    all t : Teacher, s : Student | s in t.Tutors
}

pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c.WhoTeaches[s] = t) and (c.Groups[s] = g) implies (t.Tutors = s)
}

pred inv15 {
    all s : Person | (some t : Teacher | s in (^t.Tutors))
}

run {
    assert inv1;
    assert inv2;
    assert inv3;
    assert inv4;
    assert inv5;
    assert inv6;
    assert inv7;
    assert inv8;
    assert inv9;
    assert inv10;
    assert inv11;
    assert inv12;
    assert inv13;
    assert inv14;
    assert inv15;
} for 15 Person, 3 Teacher, 5 Student, 7 Group, 10 Class, 30 Person->Group, 5 Class->Teacher, 5 Tutors, 50 Teaches, 30 WhoTeaches, 10 Groups, exactly 250 Students, exactly 50 Teachers, exactly 70 Groups, exactly 100 Classes, exactly 750 Persons, exactly 1000 Associations.