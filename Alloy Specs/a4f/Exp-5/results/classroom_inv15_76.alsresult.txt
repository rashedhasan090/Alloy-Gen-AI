sig Person {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class {
    Groups : Person lone -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in Student + Teacher
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher.Teaches in Class
}

pred inv7 {
    Class in Teacher.Teaches
}

pred inv8 {
    all t : Teacher | lone t.Teaches
}

pred inv9 {
    all c : Class | lone Teaches[c] & Teacher
}

pred inv10 {
    all c: Class, s: Student | some c.Groups[s]
}

pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & c.teaches
}

pred inv12 {
    all t : Teacher | some t.Teaches.Groups
}

pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student
}

pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | 
    (c -> s -> g in Class.Groups) and 
    t in Teacher and 
    t -> c in t.Teaches implies s in t.Tutors
}

pred inv15 {
    all s : Person | some Teacher & ^s.Tutors
}

run inv1 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv2 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv3 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv4 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv5 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv6 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv7 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv8 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv9 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv10 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv11 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv12 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv13 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv14 for 3 but exactly 1 Student, 2 Teacher, and 4 Class

run inv15 for 3 but exactly 1 Student, 2 Teacher, and 4 Class