sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}
pred inv1 {
    Student in Person 
}
pred inv2 {
    no Teacher 
}
pred inv3 {
    no Student & Teacher 
}
pred inv4 {
    Person in (Student + Teacher) 
}
pred inv5 {
    some Teacher.Teaches 
}
pred inv6 {
    Teacher.Teaches in Class 
}
pred inv7 {
    all t: Teacher | t.Teaches in Class
}
pred inv8 {
    all t:Teacher | lone t.Teaches 
}
pred inv9 {
    all c:Class | (lone ((Student + Teacher) & c.Groups)) or (lone(c->Teacher)) 
}
pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) 
}
pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & Teacher.Teaches=c 
}
pred inv12 {
    all t : Teacher | some (t.Teaches).Groups 
}
pred inv13 {
    all t: Teacher | all s: t.Tutors | s in Student
}
pred inv14 {
    all s : Person, c : Class, g : Group | (c -> s -> g in Groups) implies some t : Teacher | t -> c in Teaches and t -> s in Tutors
}
pred inv15 {
    all s : Person | some t : Teacher & ^s.Tutors.t 
}
run {} for 5 but 7 Group, 10 Class, 15 Student, 2 Teacher
```