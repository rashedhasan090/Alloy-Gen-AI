sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Person in Student 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no (Student & Teacher) 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.teaches 
}

pred inv6 {
    all t:Teacher | tTeaches.in(Class)
}

pred inv7 {
    all c:Class | some Teacher & c.teaches 
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone c.Teaches & Teacher 
}

pred inv10 {
    all c:Class, s:Student | some g:(c.Groups) | s in g 
}

pred inv11 {
    all c:Class | (some c.Groups) implies (some t:Teacher | t.teaches = c) 
}

pred inv12 {
    all t:Teacher | some g:(t.Teaches).Groups 
}

pred inv13 {
    all p:Person | (p in Teacher.Tutors) iff (p in Student)
}

pred inv14 {
    all c:Class, s:Person, t:Teacher, g:Group | (c.Groups[s] = g) and (t.teaches = c) implies (g in t.Tutors)
}

pred inv15 {
    all s:Person | some t:Teacher | s in t.^Tutors
}

pred isRepaired{
    inv1[] and inv2[] and inv3[] and inv4[] and inv5[] and inv6[] and inv7[] and inv8[] and inv9[] and inv10[] and inv11[] and inv12[] and inv13[] and inv14[] and inv15[]
}

run isRepaired for 5 but exactly 5 Class, 5 Person, 5 Teacher, 5 Student, 5 Group

assert inv1_Repaired {
    all p:Person | (p in Student) implies (Person in p)
}

assert inv2_Repaired {
    no Teacher 
}

assert inv3_Repaired {
    no (Student & Teacher) 
}

assert inv4_Repaired {
    all p:Person | p in (Student + Teacher)
}

assert inv5_Repaired {
    some Teacher.teaches 
}

assert inv6_Repaired {
    all t:Teacher | t in Teaches.t.Class 
}

assert inv7_Repaired {
    all c:Class | some Teacher | Teacher in c.Teaches 
}

assert inv8_Repaired {
    all t:Teacher | lone t.Teaches 
}

assert inv9_Repaired {
    all c:Class | (all t:Teacher | c.Teaches[t] implies lone t) and (all s:Student | lone c.Groups[s])
}

assert inv10_Repaired {
    all c:Class, s:Student | some g:(c.Groups[s]) | g in c.Teacher.Tutors 
}

assert inv11_Repaired {
    all c:Class | (some c.Groups) implies (some t:Teacher | t.Teaches = c) 
}

assert inv12_Repaired {
    all t:Teacher | some g:(t.Teaches).Groups 
}

assert inv13_Repaired {
    all p:Person | (p in Teacher.Tutors) iff (p in Student)
}

assert inv14_Repaired {
    all c:Class, s:Person, t:Teacher, g:Group | (c.Groups[s] = g) and (t.Teaches = c) implies (g in t.Tutors)
}

assert inv15_Repaired {
    all s:Person | some t:Teacher | s in t.^Tutors
}

check isRepaired

check inv1_Repaired

check inv2_Repaired

check inv3_Repaired

check inv4_Repaired

check inv5_Repaired

check inv6_Repaired

check inv7_Repaired

check inv8_Repaired

check inv9_Repaired

check inv10_Repaired

check inv11_Repaired

check inv12_Repaired

check inv13_Repaired

check inv14_Repaired

check inv15_Repaired