sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person  {}

sig Student extends Person  {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    Teacher in Teach.Teaches 
}

pred inv7 {
    all c:Class | c in Teacher.Teaches 
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone (Teaches.c & Teacher) 
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) 
}

pred inv11 {
    all c: Class | (some c.Groups) implies (some t:Teacher | t.Teaches = c) 
}

pred inv12 {
    all t:Teacher | some (t.Teaches.Groups) 
}

pred inv13 {
    all p1:Person, p2:Person | p1 in Teacher.Tutors and p2 in Student.Tutors 
}

pred inv14 {
    all c:Class, s:Student, g:Group | (c -> s -> g in Class.Groups) implies 
    (some t:Teacher | (t -> c in Teacher.Teaches) and (t -> s in Teacher.Tutors))
}

pred inv15 {
    all s:Person | some t:Teacher | s in t.Tutors 
}

//checking the assertion repairs 
pred repair_pred_1{inv14[] iff inv14_OK[] }
run repair_pred_1
assert repair_assert_1{inv14[] iff inv14_OK[] }
check repair_assert_1