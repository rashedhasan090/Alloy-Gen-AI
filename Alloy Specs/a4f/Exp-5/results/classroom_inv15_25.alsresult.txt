sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}
pred inv1 {
    all p : Person | p in Student
}
pred inv2 {
    no Teacher
}
pred inv3 {
    no Student & Teacher
}
pred inv4 {
    all p : Person | p in Student or p in Teacher
}
pred inv5 {
    some t : Teacher | t.Teaches != none
}
pred inv6 {
    all t : Teacher | t.Teaches in Class
}
pred inv7 {
    all c : Class | some t : Teacher | t.Teaches = c
}
pred inv8 {
    all t : Teacher | lone t.Teaches
}
pred inv9 {
    all c : Class | (one t : Teacher | t.Teaches = c) 
    and (no s : Student | s in c.Groups)
}
pred inv10 {
    all s : Student, c : Class | s in c.Groups
}
pred inv11 {
    all c : Class | (some c.Groups) implies 
    (some t : Teacher | t.Teaches = c) 
}
pred inv12 {
    all t : Teacher | (some c : t.Teaches | some g : c.Groups | g in Group)
}
pred inv13 {
    all t : Teacher | all s : t.Tutors | s in Student
    all s : Student | all t : s.Tutors | t in Teacher
}
pred inv14 {
    all s : Student, c : Class | 
    s in c.Groups.Person and c in s.Tutors.Teaches implies 
    (some t : c.Teaches | t in s.Tutors)
}
pred inv15 {
    all s : Student | some t : s.^Tutors.Teacher
}
check inv1 expect 0
check inv2 expect 0
check inv3 expect 0
check inv4 expect 0
check inv5 expect 0
check inv6 expect 0
check inv7 expect 0
check inv8 expect 0
check inv9 expect 0
check inv10 expect 0
check inv11 expect 0
check inv12 expect 0
check inv13 expect 0
check inv14 expect 0
check inv15 expect 0