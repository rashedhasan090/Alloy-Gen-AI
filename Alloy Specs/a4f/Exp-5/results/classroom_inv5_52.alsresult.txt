sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}
pred inv1 {
    Person in Student 
}
pred inv2 {
    no Teacher 
}
pred inv3 {
    no Student & Teacher 
}
pred inv4 {
    Person in (Student + Teacher) 
}
pred inv5 {
    some x : Teacher | x.teaches in Class 
}
pred inv6 {
    all t:Teacher | t in t.teaches.teaches 
}
pred inv7 {
    all t:Teacher | all c:Class | (c in t.teaches) implies (t in c.groups.Tutors)
}
pred inv8 {
    all t:Teacher | lone t.teaches 
}
pred inv9 {
    all c:Class | lone c.groups.Teacher & lone c.groups.Student 
}
pred inv10 {
    all c:Class, s:Student | some g:Group | g = c.groups.s 
}
pred inv11 {
    all c:Class | (some c.groups) implies (some t:Teacher | (t in c.teaches))
}
pred inv12 {
    all t:Teacher | some g:Group | g = (t.teaches).groups
}
pred inv13 {
    all t:Teacher | all s: Student | (s.Tutors = t) implies (t in s.Tutors.Teaches) 
}
pred inv14 {
    all s : Person, c : Class, t : Person, g : Group | (c->s->g in groups) and (t->c in teaches) implies (t->s in tutors)
}
pred inv15 {
    all s : Person | (s in Teacher.Tutors) implies (some Teacher)
}
run inv1 for 3
run inv2 for 3
run inv3 for 3 
run inv4 for 3
run inv5 for 3
run inv6 for 3
run inv7 for 3
run inv8 for 3
run inv9 for 3
run inv10 for 3
run inv11 for 3
run inv12 for 3
run inv13 for 3
run inv14 for 3
run inv15 for 3
```