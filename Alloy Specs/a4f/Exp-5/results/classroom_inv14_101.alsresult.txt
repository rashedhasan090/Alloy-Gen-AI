sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    Teacher.Teaches in Class 
}

pred inv7 {
    all c:Class | c.Teaches in Teacher 
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone (c.Teaches & Teacher) 
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) 
}

pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & c.Teaches 
}

pred inv12 {
    all t : Teacher | some (t.Teaches).Groups 
}

pred inv13 {
    all t:Teacher, s:Student | s in t.Tutors implies t in s.Teaches 
}

pred inv14 {
    all s : Student, c : Class, t : Teacher | (some g : Group | g = c->s->g' and g' in c.Groups) and t->c in t.Teaches implies t->s in t.Tutors 
}

pred inv15 {
    all s : Person | some Teacher & ^s.Tutors
}

run inv1,inv2,inv3,inv4,inv5,inv6,inv7,inv8,inv9,inv10,inv11,inv12,inv13,inv14,inv15 for 5 Person, 5 Group, 5 Class, 2 Teacher, 3 Student 

pred repair_pred_1{inv14[] iff inv14_OK[] }
run repair_pred_1 for 5 Person, 5 Group, 5 Class, 2 Teacher, 3 Student 

assert repair_assert_1{inv14[] iff inv14_OK[] }
check repair_assert_1