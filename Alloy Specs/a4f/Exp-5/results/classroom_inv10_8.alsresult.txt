sig Person {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class {
    Groups : set Person,
    Teaches : set Teacher
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    all p:Person | p in Student
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    all p:Person | p in Student or p in Teacher
}

pred inv5 {
    some t:Teacher | t.Teaches != none
}

pred inv6 {
    all t:Teacher | t.Teaches in Class
}

pred inv7 {
    all c:Class | c.Teaches in Teacher
}

pred inv8 {
    all t:Teacher | lone t.Teaches
}

pred inv9 {
    all c:Class | lone c.Teaches & Teacher
}

pred inv10 {
    all c:Class, s:Student | some g:Group | g in c.Groups and s in g
}

pred inv11 {
    all c:Class | (some c.Teaches) implies some t:Teacher | t in c.Teaches
}

pred inv12 {
    all t:Teacher | some c:Class | c in t.Teaches and some g:Group | g in c.Groups
}

pred inv13 {
    all t:Teacher, s:Student | s in t.Tutors implies t in s.Teaches
}

pred inv14 {
    all c:Class, s: Student | some g:Group | g in c.Groups and g.Student = s implies some t:Teacher | t in c.Teaches and t in s.Tutors
}

pred inv15 {
    all s:Student | some t:Teacher | t in s.Tutors
}

assert inv1_Repaired {
    inv1[] iff all p:Person | p in Student
}

assert inv2_Repaired {
    inv2[] iff no Teacher
}

assert inv3_Repaired {
    inv3[] iff no Student & Teacher
}

assert inv4_Repaired {
    inv4[] iff all p:Person | p in Student or p in Teacher
}

assert inv5_Repaired {
    inv5[] iff some t:Teacher | t.Teaches != none
}

assert inv6_Repaired {
    inv6[] iff all t:Teacher | t.Teaches in Class
}

assert inv7_Repaired {
    inv7[] iff all c:Class | c.Teaches in Teacher
}

assert inv8_Repaired {
    inv8[] iff all t:Teacher | lone t.Teaches
}

assert inv9_Repaired {
    inv9[] iff all c:Class | lone c.Teaches & Teacher
}

assert inv10_Repaired {
    inv10[] iff all c:Class, s:Student | some g:Group | g in c.Groups and s in g
}

assert inv11_Repaired {
    inv11[] iff all c:Class | (some c.Teaches) implies some t:Teacher | t in c.Teaches
}

assert inv12_Repaired {
    inv12[] iff all t:Teacher | some c:Class | c in t.Teaches and some g:Group | g in c.Groups
}

assert inv13_Repaired {
    inv13[] iff all t:Teacher, s:Student | s in t.Tutors implies t in s.Teaches
}

assert inv14_Repaired {
    inv14[] iff all c:Class, s: Student | some g:Group | g in c.Groups and g.Student = s implies some t:Teacher | t in c.Teaches and t in s.Tutors
}

assert inv15_Repaired {
    inv15[] iff all s:Student | some t:Teacher | t in s.Tutors
}

check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0