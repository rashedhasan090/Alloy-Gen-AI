sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {} 
sig Class  {
    Groups : Person -> Group,
    Teaches : set Teacher
} 
sig Teacher extends Person  {}
sig Student extends Person  {}

pred inv1 {
    Student in Person  
}
pred inv2 {
    no Teacher 
}
pred inv3 {
    no Student & Teacher 
}
pred inv4 {
    Person in (Student + Teacher) 
}
pred inv5 {
    some Teacher.Teaches 
}
pred inv6 {
    all t:Teacher | t in t.Teaches 
}
pred inv7 {
    all c:Class | c.Teaches in Teacher 
}
pred inv8 {
    all t:Teacher | lone t.Teaches 
}
pred inv9 {
    all c:Class | lone c.Teaches & Teacher 
}
pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) 
}
pred inv11 {
    all c:Class | (some c.Groups) implies some t:Teacher | t in c.Teaches 
}
pred inv12 {
    all t:Teacher | some t.Teaches.Groups 
}
pred inv13 {
    all t:Teacher, s:Student | (t in s.Tutors) implies (s in t.Tutors)
}
pred inv14 {
    all s:Person, c:Class, t:Teacher, g:Group | (c -> s -> g in Class) and (t in c.Teaches) implies (t in s.Tutors)
}
pred inv15 {
    all s:Person | some t:Teacher | t in ^s.Tutors
}
```