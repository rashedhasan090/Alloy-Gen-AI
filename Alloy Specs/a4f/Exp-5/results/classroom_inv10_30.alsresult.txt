sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : set Person -> Group
}

sig Teacher extends Person {}
sig Student extends Person {}

pred inv1 {
    Person in Student 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in Student + Teacher 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    all t:Teacher | t.Teaches in Class 
}

pred inv7 {
    all c:Class | c in Teacher.Teaches 
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone {t:Teacher | t.Teaches = c} 
}

pred inv10 {
    all c:Class, s:Student | some g:Group | (s->c->g) in Class.Groups 
}

pred inv11 {
    all c:Class | (some c.Groups) implies some t:Teacher | t.Teaches = c 
}

pred inv12 {
    all t:Teacher | some g:Group | g in (t.Teaches).Groups 
}

pred inv13 {
    all p:Person | (p in Teacher.Tutors) implies (p.Tutors in Student) 
}

pred inv14 {
    all s: Person, c: Class, t: Person, g: Group | (c->s->g) in Class.Groups and t->c in Teaches implies t->s in Tutors
}

pred inv15 {
    all s: Person | some t:Teacher & s.Tutors=t
}

// Checking if all the repaired invariants are satisfied
assert check_inv1 {
    inv1[] iff Person in Student 
}
assert check_inv2 {
    inv2[] iff no Teacher 
}
assert check_inv3 {
    inv3[] iff no Student & Teacher 
}
assert check_inv4 {
    inv4[] iff Person in (Student + Teacher)
}
assert check_inv5 {
    inv5[] iff some Teacher.Teaches 
}
assert check_inv6 {
    inv6[] iff all t:Teacher | t.Teaches in Class 
}
assert check_inv7 {
    inv7[] iff all c:Class | c in Teacher.Teaches 
}
assert check_inv8 {
    inv8[] iff all t:Teacher | lone t.Teaches 
}
assert check_inv9 {
    inv9[] iff all c:Class | lone {t:Teacher | t.Teaches = c} 
}
assert check_inv10 {
    inv10[] iff all c:Class, s:Student | some g:Group | (s->c->g) in Class.Groups 
}
assert check_inv11 {
    inv11[] iff all c:Class | (some c.Groups) implies some t:Teacher | t.Teaches = c 
}
assert check_inv12 {
    inv12[] iff all t:Teacher | some g:Group | g in (t.Teaches).Groups 
}
assert check_inv13 {
    inv13[] iff all p:Person | (p in Teacher.Tutors) implies (p.Tutors in Student) 
}
assert check_inv14 {
    inv14[] iff all s: Person, c: Class, t: Person, g: Group | (c->s->g) in Class.Groups and t->c in Teaches implies t->s in Tutors
}
assert check_inv15 {
    inv15[] iff all s: Person | some t:Teacher & s.Tutors=t
}

// Running the checks
check check_inv1
check check_inv2
check check_inv3
check check_inv4
check check_inv5
check check_inv6
check check_inv7
check check_inv8
check check_inv9
check check_inv10
check check_inv11
check check_inv12
check check_inv13
check check_inv14
check check_inv15