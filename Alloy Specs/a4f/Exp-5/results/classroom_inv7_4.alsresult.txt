sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}
pred inv1 {
    Student in Person 
}
pred inv2 {
    no Teacher 
}
pred inv3 {
    no Student & Teacher 
}
pred inv4 {
    Person in (Student + Teacher) 
}
pred inv5 {
    some Teaches 
}
pred inv6 {
    all t : Teacher | t.Teaches in Class
}
pred inv7 {
    all t : Teacher, c : Class | t.Teaches = c -> t
}
pred inv8 {
    all t : Teacher | lone t.Teaches 
}
pred inv9 {
    all c : Class | lone Teaches[c] & Teacher 
}
pred inv10 {
    all c : Class, s : Student | some g : c.Groups | s in g
}
pred inv11 {
    all c : Class | (some c.Groups) => (some t : Teacher | t.Teaches = c)
}
pred inv12 {
    all t : Teacher | some g : t.Teaches.Groups 
}
pred inv13 {
    all t : Teacher | all s : t.Tutors | s in Student and t in s.Tutors
}
pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t.Teaches = c implies t in s.Tutors
}
pred inv15 {
    all s : Person | some t : Teacher | t in ^s.Tutors
}
pred inv7_OK {
    all t : Teacher, c : Class | t.Teaches = c -> t
}
assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}
pred repair_pred_1{
    inv7[] iff inv7_OK[] 
}
run repair_pred_1
assert repair_assert_1{
    inv7[] iff inv7_OK[] 
}
check repair_assert_1