sig Person {
  Tutors: set Person,
  Teaches: set Class
}

sig Group {}

sig Class {
  Groups: Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
  Student in Person
}

pred inv2 {
  no Teacher
}

pred inv3 {
  no (Student & Teacher)
}

pred inv4 {
  Person in (Student + Teacher)
}

pred inv5 {
  some Teacher.Teaches
}

pred inv6 {
  all t: Teacher | t in t.Teaches.TeachedBy
}

pred inv7 {
  all c: Class | c in c.Groups.Person.Teaches
}

pred inv8 {
  all t: Teacher | lone t.Teaches
}

pred inv9 {
  all c: Class | lone (Teaches.c & Teacher)
}

pred inv10 {
  all c: Class, s: Student | some c.Groups.s
}

pred inv11 {
  all c: Class, g: Group | some p: Person | c->p->g in Groups implies p in Teacher
}

pred inv12 {
  all t: Teacher | some (t.Teaches).Groups
}

pred inv13 {
  Tutors.Person in Teacher and Person.Tutors in Student
}

pred inv14 {
  all c: Class, s: Person, g: Group | (c -> s -> g in Groups) and (some t: Teacher | t -> c in Teaches) implies (some p: Person | p.Teaches.s)
}

pred inv15 {
  all s: Student | some Teacher & ^s.Tutors
}

check inv1 expect 0
check inv2 expect 0
check inv3 expect 0
check inv4 expect 0
check inv5 expect 0
check inv6 expect 0
check inv7 expect 0
check inv8 expect 0
check inv9 expect 0
check inv10 expect 0
check inv11 expect 0
check inv12 expect 0
check inv13 expect 0
check inv14 expect 0
check inv15 expect 0