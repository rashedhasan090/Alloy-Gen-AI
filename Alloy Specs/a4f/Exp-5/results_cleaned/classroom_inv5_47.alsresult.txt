sig Person {
  Tutors : set Person,
  Teaches : set Class
}

sig Group {}

sig Class {
  Groups : Person -> Group,
}

sig Teacher extends Person {}
sig Student extends Person {}

pred inv1 {
  Person in Student
}

pred inv2 {
  no Teacher
}

pred inv3 {
  no Student & Teacher
}

pred inv4 {
  Person in Student + Teacher
}

pred inv5 {
  some Teaches
}

pred inv6 {
  Teacher.Teaches in Class
}

pred inv7 {
  Class in Teacher.Teaches
}

pred inv8 {
  all t:Teacher | lone t.Teaches
}

pred inv9 {
  all c:Class | lone (Teaches.c & Teacher)
}

pred inv10 {
  all c:Class, s:Student | some s.(c.Groups)
}

pred inv11 {
  all c:Class | (some c.Groups) implies some Teacher & Teaches.c
}

pred inv12 {
  all t:Teacher | some (t.Teaches).Groups
}

pred inv13 {
  Tutors.Person in Teacher and Person.Tutors in Student
}

pred inv14 {
  all s:Person, c:Class, t:Teacher, g:Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors
}

pred inv15 {
  all s:Person | some Teacher & ^Tutors.s
}

// Check that all repaired invariants hold
pred check {
  inv1_OK[] and inv2_OK[] and inv3_OK[] and inv4_OK[] and inv5_OK[] and inv6_OK[] and inv7_OK[]
  and inv8_OK[] and inv9_OK[] and inv10_OK[] and inv11_OK[] and inv12_OK[] and inv13_OK[] and inv14_OK[]
  and inv15_OK[]
}
check expect 1