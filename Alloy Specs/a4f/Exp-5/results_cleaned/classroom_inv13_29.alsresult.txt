sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    all t: Teacher | t in t.Teaches
}

pred inv7 {
    all c: Class | c in c.Groups.Person.Teaches
}

pred inv8 {
    all t: Teacher | lone t.Teaches
}

pred inv9 {
    all c: Class | lone Teaches[c] & Teacher
}

pred inv10 {
    all c: Class, s: Student | some c.Groups[s]
}

pred inv11 {
    all c: Class | (some c.Groups) implies some Teacher & Teaches[c]
}

pred inv12 {
    all t: Teacher | some (t.Teaches).Groups
}

pred inv13 {
    all p: Person | p.Tutors.Person in Teacher and p.Tutors.Person in Student
}

pred inv14 {
    all s: Student, c: Class, g: Group | c.Groups[s] = g implies some t: Teacher | t.Teaches[c] and t.Tutors[s] in g
}

pred inv15 {
    all s: Student | some t: Teacher | t.Tutors[s]
}

assert inv1_Repaired {
    inv1[] iff Student in Person 
}

assert inv2_Repaired {
    inv2[] iff no Teacher
}

assert inv3_Repaired {
    inv3[] iff no Student & Teacher 
}

assert inv4_Repaired {
    inv4[] iff Person in (Student + Teacher)
}

assert inv5_Repaired {
    inv5[] iff some Teacher.Teaches
}

assert inv6_Repaired {
    inv6[] iff all t: Teacher | t in t.Teaches
}

assert inv7_Repaired {
    inv7[] iff all c: Class | c in c.Groups.Person.Teaches
}

assert inv8_Repaired {
    inv8[] iff all t: Teacher | lone t.Teaches
}

assert inv9_Repaired {
    inv9[] iff all c: Class | lone Teaches[c] & Teacher
}

assert inv10_Repaired {
    inv10[] iff all c: Class, s: Student | some c.Groups[s]
}

assert inv11_Repaired {
    inv11[] iff all c: Class | (some c.Groups) implies some Teacher & Teaches[c]
}

assert inv12_Repaired {
    inv12[] iff all t: Teacher | some (t.Teaches).Groups
}

assert inv13_Repaired {
    inv13[] iff all p: Person | p.Tutors.Person in Teacher and p.Tutors.Person in Student
}

assert inv14_Repaired {
    inv14[] iff all s: Student, c: Class, g: Group | c.Groups[s] = g implies some t: Teacher | t.Teaches[c] and t.Tutors[s] in g
}

assert inv15_Repaired {
    inv15[] iff all s: Student | some t: Teacher | t.Tutors[s]
}

check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0

pred repair_pred_1{
    inv13[] iff all p: Person | p.Tutors.Person in Teacher and p.Tutors.Person in Student
}

run repair_pred_1

assert repair_assert_1{
    inv13[] iff all p: Person | p.Tutors.Person in Teacher and p.Tutors.Person in Student
}

check repair_assert_1