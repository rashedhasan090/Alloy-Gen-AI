sig Person {
    Tutors: set Person,
    Teaches: set Class
}

sig Group {}

sig Class {
    Groups: Person -> Group
}

sig Teacher extends Person {}
sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in Student + Teacher
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher.Teaches in Class
}

pred inv7 {
    Teacher in Teaches.Class
}

pred inv8 {
    all t: Teacher | lone t.Teaches
}

pred inv9 {
    all c: Class | lone c.Teaches & Teacher
}

pred inv10 {
    all c: Class, s: Student | some s.(c.Groups)
}

pred inv11 {
    all c: Class | (some c.Groups) implies some Teacher & Teaches.c
}

pred inv12 {
    all t: Teacher | some t.Teaches.Groups
}

pred inv13 {
    all t: Teacher, s: Student | s in t.Tutors.Person
}

pred inv14 {
    all c: Class, s: Person, g: Group |
      (c.Groups[s] = g) and (some t: Teacher | t.Teaches = c and t.Tutors[s])
}

pred inv15 {
    all s: Person | some t: Teacher & t.Tutors = s
}

pred inv5_OK {
    some Teacher.Teaches
}

assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

check inv5_Repaired for 5

pred repair_pred_1 {
    inv5[] iff inv5_OK[]
}

run repair_pred_1

assert repair_assert_1 {
    inv5[] iff inv5_OK[]
}

check repair_assert_1 for 5