sig State {
        trans : Event -> State
}
sig Init in State {}
sig Event {}

// The LTS does not contain deadlocks, ie, each state has at least a transition.
pred inv1 {
    all s: State | some s.trans
}

// There is a single initial state.
pred inv2 {
    one Init
}

// The LTS is deterministic, ie, each state has at most a transition for each event.
pred inv3 {
    all s : State, e : Event | lone e.(s.trans)
}

// All states are reachable from an initial state.
pred inv4 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    State in Init.^tr
}

// All the states have the same events available.
pred inv5 {
    all s : State | Event = s.trans.Event
}

// Each event is available in at least a state.
pred inv6 {
    all e : Event | some s1, s2 : State | s1->e->s2 in trans
}

// The LTS is reversible, ie, from a reachable state it is always possible
// to return to an initial state.
pred inv7 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    all s : Init.^tr | some i : Init | i in s.^tr
}

// Fixes
pred inv1_OK {
    all s : State | lone s.trans
}

pred inv5_OK {
    // all distinct states have distinct transitions
    all disj s, s' : State | s.trans != s'.trans
}

assert inv1_Repaired {
    inv1 [] iff inv1_OK []
}

assert inv5_Repaired {
    inv5 [] iff inv5_OK []
}

check inv1_Repaired expect 0
check inv2
check inv3
check inv4
check inv5_Repaired expect 0
check inv7

// Unchanged
pred inv2_OK {
    one Init
}

pred inv3_OK {
    all s : State, e : Event | lone e.(s.trans)
}

pred inv4_OK {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    State in Init.^tr
}

pred inv7_OK {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    all s : Init.^tr | some i : Init | i in s.^tr
}

assert inv2_Repaired {
    inv2 [] iff inv2_OK []
}

assert inv3_Repaired {
    inv3 [] iff inv3_OK []
}

assert inv4_Repaired {
    inv4 [] iff inv4_OK []
}

assert inv7_Repaired {
    inv7 [] iff inv7_OK []
}

pred repair_pred_1 {
    inv5 [] iff inv5_OK []
}

run repair_pred_1

assert repair_assert_1 {
    inv5 [] iff inv5_OK []
}

check repair_assert_1