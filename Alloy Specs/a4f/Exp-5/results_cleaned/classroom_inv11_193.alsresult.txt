sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person  {}

sig Student extends Person  {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    Teacher.Teaches in Class 
}

pred inv7 {
    Teach in Teacher.Teaches 
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone c.Groups.Teachers 
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) 
}

pred inv11 {
    all c:Class, g:Group | some t:Teacher | 
        some c.Groups[g] implies (c->t->g in Groups and t->c in Teaches)
}

pred inv12 {
    all t : Teacher | some (t.Teaches).Groups 
}

pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student 
}

pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | 
        ((c -> s -> g in Groups) and (t -> c in Teaches)) implies (t -> s in Tutors)
}

pred inv15 {
    all s : Person | some Teacher & ^Tutors.s
}

run {} for 5 but 11 Person, 3 Teacher, 19 Student, 13 Class, 7 Group, 50 Person -> Group
check inv1 && inv2 && inv3 && inv4 && inv5 && inv6 && inv7 && inv8 && inv9 && inv10 && inv11 && inv12 && inv13 && inv14 && inv15 for 5 but 11 Person, 3 Teacher, 19 Student, 13 Class, 7 Group, 50 Person -> Group