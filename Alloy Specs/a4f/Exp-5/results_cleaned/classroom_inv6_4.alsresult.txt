sig Person {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class {
    Groups : set Group,
    Students : set Person
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Person in Student
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    all p : Person, c : Class | p in Teacher implies p.Teaches[c]
}

pred inv7 {
    all t : Teacher | t.Teaches in Class
}

pred inv8 {
    all t : Teacher | lone t.Teaches
}

pred inv9 {
    all c : Class | lone (Teaches.c & Teacher)
}

pred inv10 {
    all c : Class, s : Student | some c.Students && s.Tutors = c.Students
}

pred inv11 {
    all c : Class, g : Group | some c.Groups && g in c.Groups implies some Teacher && Teacher.Teaches = c
}

pred inv12 {
    all t : Teacher | some t.Teaches.Groups
}

pred inv13 {
    all p : Person | p in Student.Tutors && p.Tutors in Teacher
}

pred inv14 {
    all s : Student, c : Class, g : Group | c in s.Students.Groups && c -> s -> g in Groups implies some Teacher && Teacher.Teaches = c && Teacher.Tutors = s
}

pred inv15 {
    all s : Person | some Teacher && ^s.Tutors in Teacher.Teaches
}

assert inv1_Repaired {
    Person in Student 
}

assert inv2_Repaired {
    no Teacher 
}

assert inv3_Repaired {
    no Student & Teacher 
}

assert inv4_Repaired {
    Person in (Student + Teacher) 
}

assert inv5_Repaired {
    some Teacher.Teaches 
}

assert inv6_Repaired {
    all p : Person, c : Class | p in Teacher implies p.Teaches[c]
}

assert inv7_Repaired {
    all t : Teacher | t.Teaches in Class 
}

assert inv8_Repaired {
    all t : Teacher | lone t.Teaches 
}

assert inv9_Repaired {
    all c : Class | lone (Teaches.c & Teacher) 
}

assert inv10_Repaired {
    all c : Class, s : Student | some c.Students && s.Tutors = c.Students 
}

assert inv11_Repaired {
    all c : Class, g : Group | some c.Groups && g in c.Groups implies some Teacher && Teacher.Teaches = c 
}

assert inv12_Repaired {
    all t : Teacher | some t.Teaches.Groups 
}

assert inv13_Repaired {
    all p : Person | p in Student.Tutors && p.Tutors in Teacher 
}

assert inv14_Repaired {
    all s : Student, c : Class, g : Group | c in s.Students.Groups && c -> s -> g in Groups implies some Teacher && Teacher.Teaches = c && Teacher.Tutors = s 
}

assert inv15_Repaired { 
    all s : Person | some Teacher && ^s.Tutors in Teacher.Teaches 
}

check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0