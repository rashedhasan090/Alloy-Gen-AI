sig Person {
  Tutors: set Person,
  Teaches: set Class
}

sig Group {}

sig Class {
  Groups: Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
  Student in Person
}

pred inv2 {
  no Teacher
}

pred inv3 {
  no Student & Teacher
}

pred inv4 {
  Person in Student + Teacher
}

pred inv5 {
  some Teacher.Teaches
}

pred inv6 {
  all t: Teacher | t.Teaches in Class
}

pred inv7 {
  all c: Class | c -> Teacher.Teaches
}

pred inv8 {
  all t: Teacher | lone t.Teaches
}

pred inv9 {
  all c: Class | lone (Teaches.c & Teacher)
}

pred inv10 {
  all c: Class, s: Student | some g: Group | g = c -> s -> Groups
}

pred inv11 {
  all c: Class | (some c.Groups) implies some t: Teacher | t.Teaches = c
}

pred inv12 {
  all t: Teacher | some g: Group | g = t.Teaches -> Groups
}

pred inv13 {
  all t: Teacher, s: Student | s in t.Tutors implies t in s.Teaches
}

pred inv14 {
  all s: Student, c: Class, t: Teacher | t in s.Teaches and c in t.Teaches implies some g: Group | g = c -> s -> Groups iff t in s.Tutors
}

pred inv15 {
  all s: Person | some t: Teacher | t in ^s.Tutors
}

pred inv9_fixed {
  all c: Class | lone( c -> Teacher in Teaches )
}

run {} for 5
check inv1 expect 0
check inv2 expect 0
check inv3 expect 0
check inv4 expect 0
check inv5 expect 0
check inv6 expect 0
check inv7 expect 0
check inv8 expect 0
check inv9_fixed expect 0
check inv10 expect 0
check inv11 expect 0
check inv12 expect 0
check inv13 expect 0
check inv14 expect 0
check inv15 expect 0