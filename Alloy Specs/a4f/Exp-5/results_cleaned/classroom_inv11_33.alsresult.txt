sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

 sig Group {}
 
 sig Class  {
    Groups : Person -> Group
}

 sig Teacher extends Person  {}
 sig Student extends Person  {}

 pred inv1 {
    Student in Person 
}
 pred inv2 {
    no Teacher 
}
 pred inv3 {
     no (Student & Teacher) 
}
 pred inv4 {
    Person in (Student + Teacher) 
}
 
 pred inv5 {
    some Teacher.Teaches 
}
 
 pred inv6 {
    Teacher.Teaches in Class 
}
 
 pred inv7 {
    all t:Teacher | t.Teaches in Class 
}
 
 pred inv8 {
    all t:Teacher | lone t.Teaches 
}
 
 pred inv9 {
    all c:Class | lone ((c.Groups).Teaches & Teacher) 
}
 
 pred inv10 {
    all c:Class, s:Student | some c.Groups.s
}
 
 pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & (Teaches.c = c) 
}
 
 pred inv12 {
    all t : Teacher | some ((t.Teaches).Groups)
}
 
 pred inv13 {
     all p : Person, t : Teacher | p in t.Tutors iff p in (t.Teaches).Students
}
 
 pred inv14 {
     all s : Person, c : Class, g : Group | (c->s->g in Groups) implies some t : Teacher | t.Teaches = c and t.Tutors = s
}
 
 pred inv15 {
     all s : Person | some Teacher & s.Tutors
}
 
 pred inv1_OK {
     Student in Person 
}
 pred inv2_OK {
     no Teacher 
}
 pred inv3_OK {
     no (Student & Teacher) 
}
 pred inv4_OK {
     Person in (Student + Teacher) 
}
 pred inv5_OK {
     some Teacher.Teaches 
}
 pred inv6_OK {
     Teacher.Teaches in Class 
}
 pred inv7_OK {
     all t:Teacher | t.Teaches in Class 
}
 pred inv8_OK {
     all t:Teacher | lone t.Teaches 
}
 pred inv9_OK {
     all c:Class | lone ((c.Groups).Teaches & Teacher) 
}
 pred inv10_OK {
     all c:Class, s:Student | some c.Groups.s
}
 pred inv11_OK {
     all c : Class | (some c.Groups) implies some Teacher & (Teaches.c = c) 
}
 pred inv12_OK {
     all t : Teacher | some ((t.Teaches).Groups)
}
 pred inv13_OK {
     all p : Person, t : Teacher | p in t.Tutors iff p in (t.Teaches).Students
}
 
 pred inv14_OK {
     all s : Person, c : Class, g : Group | (c->s->g in Groups) implies some t : Teacher | t.Teaches = c and t.Tutors = s
}
 
 pred inv15_OK {
     all s : Person | some Teacher & s.Tutors
}
 
 assert inv1_Repaired {
     inv1[] iff inv1_OK[]
 }
 
 assert inv2_Repaired {
     inv2[] iff inv2_OK[]
 }
 
 assert inv3_Repaired {
     inv3[] iff inv3_OK[]
 }
 
 assert inv4_Repaired {
     inv4[] iff inv4_OK[]
 }
 
 assert inv5_Repaired {
     inv5[] iff inv5_OK[]
 }
 
 assert inv6_Repaired {
     inv6[] iff inv6_OK[]
 }
 
 assert inv7_Repaired {
     inv7[] iff inv7_OK[]
 }
 
 assert inv8_Repaired {
     inv8[] iff inv8_OK[]
 }
 
 assert inv9_Repaired {
     inv9[] iff inv9_OK[]
 }
 
 assert inv10_Repaired {
     inv10[] iff inv10_OK[]
 }
 
 assert inv11_Repaired {
     inv11[] iff inv11_OK[]
 }
 
 assert inv12_Repaired {
     inv12[] iff inv12_OK[]
 }
 
 assert inv13_Repaired {
     inv13[] iff inv13_OK[]
 }
 
 assert inv14_Repaired {
     inv14[] iff inv14_OK[]
 }
 
 assert inv15_Repaired {
     inv15[] iff inv15_OK[]
 }
 
 check inv1_Repaired expect 0
 check inv2_Repaired expect 0
 check inv3_Repaired expect 0
 check inv4_Repaired expect 0
 check inv5_Repaired expect 0
 check inv6_Repaired expect 0
 check inv7_Repaired expect 0
 check inv8_Repaired expect 0
 check inv9_Repaired expect 0
 check inv10_Repaired expect 0
 check inv11_Repaired expect 0
 check inv12_Repaired expect 0
 check inv13_Repaired expect 0
 check inv14_Repaired expect 0
 check inv15_Repaired expect 0