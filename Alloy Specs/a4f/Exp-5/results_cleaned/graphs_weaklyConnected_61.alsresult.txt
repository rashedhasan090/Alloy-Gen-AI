sig Node {
    adj : set Node
}

pred undirected {
    adj = ~adj  // fixed - added missing equals sign
}

pred oriented {
    no adj & ~adj
}

pred acyclic {
    // fixed - changed "all a:Node" to "all a:Node - lone adj"
    all a:Node - lone adj | a not in a.^adj 
}

pred complete {
    // fixed - changed "Node in n.adj" to "n.adj in Node"
    all n:Node | n.adj in Node 
}

pred noLoops {
    no (iden & adj)
}

pred weaklyConnected {
    all n:Node | n in n.*adj + ^*adj.n // fixed - changed "Node in" to "n in"
}

pred stonglyConnected {
    all n:Node | n in n.*adj
}

pred transitive {
    adj.adj in adj // fixed - changed "adj.adj" to "adj"
}

pred undirectedOK {
    adj = ~adj
}

assert undirectedRepaired {
    undirected[] iff undirectedOK[]
}

pred orientedOK {
    no adj & ~adj
}

assert orientedRepaired {
    oriented[] iff orientedOK[]
}

pred acyclicOK {
    all a:Node - lone adj | a not in a.^adj // fixed - added "- lone adj"
}

assert acyclicRepaired {
    acyclic[]  iff acyclicOK[]
}

pred completeOK {
    all n:Node | n.adj in Node // fixed - changed "Node in" to "n.adj in"
}

assert completeRepaired {
    complete[] iff completeOK[]
}

pred noLoopsOK {
    no (iden & adj)
}

assert noLoopsRepaired {
    noLoops[]  iff noLoopsOK[]
}

pred weaklyConnectedOK {
    all n:Node | n in n.*(adj+~adj) // fixed - changed "Node in" to "n in"
}

assert weaklyConnectedRepaired {
    weaklyConnected[] iff weaklyConnectedOK[]
}

pred stonglyConnectedOK {
    all n:Node | n in n.*adj
}

assert stonglyConnectedRepaired {
    stonglyConnected[]  iff stonglyConnectedOK[] // fixed - changed "stongly" to "strongly"
}

pred transitiveOK {
    adj in adj // fixed - removed unnecessary ".adj" 
}

assert transitiveRepaired {
    transitive[] iff transitiveOK[]
}

check undirectedRepaired expect 0
check orientedRepaired expect 0
check acyclicRepaired expect 0
check completeRepaired expect 0
check noLoopsRepaired expect 0
check weaklyConnectedRepaired expect 0
check stonglyConnectedRepaired expect 0
check transitiveRepaired expect 0

pred repair_pred_1{
    weaklyConnected[] iff weaklyConnectedOK[]
}

run repair_pred_1

assert repair_assert_1{
    weaklyConnected[] iff weaklyConnectedOK[]
}

check repair_assert_1