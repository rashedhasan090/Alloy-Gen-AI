sig Person {
    Tutors: set Person,
    Teaches: set Class
}

sig Group {}

sig Class {
    Groups: Person -> lone Group // change set to lone
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Person in Student
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher.Teaches in Class
}

pred inv7 {
    all t: Teacher | t.Teaches in Class // change Class in Teacher.Teaches to t.Teaches
}

pred inv8 {
    all t: Teacher | lone t.Teaches
}

pred inv9 {
    all c: Class | lone (Teaches.c & Teacher)
}

pred inv10 {
    all c: Class, s: Student | some s.(c.Groups)
}

pred inv11 {
    all c: Class | (some c.Groups) implies some t: Teacher | t in c.Groups.Person // add .Person to c.Groups
}

pred inv12 {
    all t: Teacher | some (t.Teaches).(Person -> lone Group) // change Groups to (Person -> lone Group)
}

pred inv13 {
    all t: Teacher, s: Student | s in t.Tutors
}

pred inv14 {
    all s: Person, c: Class, g: Group | (c->s->g in Groups) implies some t: Teacher | t.Teaches = c and t in g.Person // fix syntax and add t.Teaches = c condition
}

pred inv15 {
    all s: Person | some Teacher & ^s.Tutors // change ^Tutors.s to ^s.Tutors
}

run inv1, inv2, inv3, inv4, inv5, inv6, inv7, inv8, inv9, inv10, inv11, inv12, inv13, inv14, inv15 for 5 but 5 Person, 5 Teacher, 5 Student, 5 Class, 5 Group

assert inv1_Repaired {
    Person in Student
}

assert inv2_Repaired {
    no Teacher
}

assert inv3_Repaired {
    no Student & Teacher
}

assert inv4_Repaired {
    Person in (Student + Teacher)
}

assert inv5_Repaired {
    some Teacher.Teaches
}

assert inv6_Repaired {
    Teacher.Teaches in Class
}

assert inv7_Repaired {
    all t: Teacher | t.Teaches in Class
}

assert inv8_Repaired {
    all t: Teacher | lone t.Teaches
}

assert inv9_Repaired {
    all c: Class | lone (Teaches.c & Teacher)
}

assert inv10_Repaired {
    all c: Class, s: Student | some s.(c.Groups)
}

assert inv11_Repaired {
    all c: Class | (some c.Groups) implies some t: Teacher | t in c.Groups.Person
}

assert inv12_Repaired {
    all t: Teacher | some (t.Teaches).(Person -> lone Group)
}

assert inv13_Repaired {
    all t: Teacher, s: Student | s in t.Tutors
}

assert inv14_Repaired {
    all s: Person, c: Class, g: Group | (c->s->g in Groups) implies some t: Teacher | t.Teaches = c and t in g.Person
}

assert inv15_Repaired {
    all s: Person | some Teacher & ^s.Tutors
}

check inv1_Repaired
check inv2_Repaired
check inv3_Repaired
check inv4_Repaired
check inv5_Repaired
check inv6_Repaired
check inv7_Repaired
check inv8_Repaired
check inv9_Repaired
check inv10_Repaired
check inv11_Repaired
check inv12_Repaired
check inv13_Repaired
check inv14_Repaired
check inv15_Repaired

run repair_pred_1 // remove error for inv11

assert repair_assert_1 {
    inv11[] iff inv11_OK[]
}

check repair_assert_1