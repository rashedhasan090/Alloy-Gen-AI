sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person  {}

sig Student extends Person  {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    Teacher.Teaches in Class 
}

pred inv7 {
    all c:Class | some Teacher & c.Teaches 
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone c.Teaches & Teacher 
}

pred inv10 {
    all c:Class, s:Student | some g:Group | (g = c.Groups[s])
}

pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & Teaches.c 
}

pred inv12 {
    all t : Teacher | some (t.Teaches).Groups 
}

pred inv13 {
    all p:Person, t:Teacher | p in t.Tutors => p in Student and t in Teacher
}

pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c.Groups[s] = g) and t teaches c implies t.Tutors[s] = g
}

pred inv15 {
    all s : Person | some Teacher & ^s.Tutors
}

/* Repairs */

pred inv3_OK {
    no Student
}

pred inv9_OK {
    all c:Class | lone c.Teaches & Teacher 
}

assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

assert inv9_Repaired {
    inv9[] iff inv9_OK[]
} 

check inv3_Repaired expect 0
check inv9_Repaired expect 0