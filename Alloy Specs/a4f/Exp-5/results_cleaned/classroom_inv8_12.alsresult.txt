sig Person  {
    Tutors: set Person,
    Teaches: set Class
}

sig Group {}

sig Class {
    Groups: Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Person in Student 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    Teacher.Teaches in Class 
}

pred inv7 {
    all t: Teacher | t.Teaches in Class 
}

pred inv8 {
    all t1, t2: Teacher | some c: Class | (t1.Teaches & c) and (t2.Teaches & c) implies t1 = t2
}

pred inv9 {
    all c: Class | lone c.Teaches & Teacher 
}

pred inv10 {
    all c: Class, s: Student | some g: Group | c.Groups[s] = g
}

pred inv11 {
    all c: Class | (some c.Groups) implies (some t: Teacher | t.Teaches = c)
}

pred inv12 {
    all t: Teacher | some c: t.Teaches | some g: Group | c.Groups[g] = t
}

pred inv13 {
    all p: Person | p in Teacher.Tutors implies p in Teacher
}

pred inv14 {
    all s: Student, c: Class, g: Group | (c.Groups[s] = g) implies
        (some t: Teacher | (t.Teaches = c) and (g in t.Tutors))
}

pred inv15 {
    all s: Person | some t: Teacher | s in t.^Tutors
}

run {
    // check all invariants hold
    assert inv1
    assert inv2
    assert inv3
    assert inv4
    assert inv5
    assert inv6
    assert inv7
    assert inv8
    assert inv9
    assert inv10
    assert inv11
    assert inv12
    assert inv13
    assert inv14
    assert inv15
} for 5
```