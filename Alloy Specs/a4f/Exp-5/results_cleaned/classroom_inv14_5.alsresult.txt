sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person  {}

sig Student extends Person  {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no (Student & Teacher) 
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    Teacher.Teaches in Class 
}

pred inv7 {
    all t:Teacher | t.Teaches in Class 
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone (Teaches.c & Teacher ) 
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) 
}

pred inv11 {
    all c:Class | (some c.Groups) implies some Teacher & Teaches.c 
}

pred inv12 {
    all t:Teacher | some ((t.Teaches).Groups) 
}

pred inv13 {
    all t:Teacher, s:Student | s in t.Tutors implies t in s.Teaches 
}

pred inv14 {
    all s:Student, c:Class, g:Group | g = c.Groups[s] implies (some t:Teacher | t.Teaches = c and s in t.Tutors and g in (t.Teaches).Groups)
}

pred inv15 {
    all s: Person | s in Teacher.Tutors.^Tutors implies some Teacher & s in Teacher.Tutors
}

run {} for 5 expect {} conform to inv1+inv2+inv3+inv4+inv5+inv6+inv7+inv8+inv9+inv10+inv11+inv12+inv13+inv14+inv15