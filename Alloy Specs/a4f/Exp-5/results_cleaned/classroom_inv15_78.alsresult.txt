sig Person  {
        Tutors : set Person,
        Teaches : set Class
}
sig Group {}
sig Class  {
        Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}
pred inv1 {
        Student in Person 
}
pred inv2 {
        no Teacher 
}
pred inv3 {
        no Student & Teacher 
}
pred inv4 {
        Person in (Student + Teacher) 
}
pred inv5 {
        some Teacher.Teaches 
}
pred inv6 {
        Teacher.Teaches in Class 
}
pred inv7 {
        all c:Class | some Teacher & c.Teaches 
}
pred inv8 {
        all t:Teacher | lone t.Teaches 
}
pred inv9 {
        all c:Class | lone (c -> Teacher) & Teaches 
}
pred inv10 {
        all c:Class, s:Student | some s.(c.Groups) 
}
pred inv11 {
        all c : Class | (some c.Groups) implies some Teacher & c->Teaches 
}
pred inv12 {
        all t : Teacher | some (t.Teaches).Groups 
}
pred inv13 {
        Teacher.Tutors in Teacher and Student.Tutors in Student 
}
pred inv14 {
        all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Class.Groups) and t -> c in Teacher.Teaches implies t -> s in Teacher.Tutors
}
pred inv15 {
        all s : Person | some Teacher & ^s.Tutors 
}

pred repair_pred_1{inv15[] iff inv15_OK[] }
run repair_pred_1
assert repair_assert_1{inv15[] iff inv15_OK[] }
check repair_assert_1