sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}

pred inv1 {
    Student in Person 
}
pred inv2 {
    no Teacher 
}
pred inv3 {
    no Student & Teacher 
}
pred inv4 {
    Person in (Student + Teacher) 
}
pred inv5 {
    some Teacher.Teaches 
}
pred inv6 {
    all t:Teacher | t.Teaches in Class 
}
pred inv7 {
    all c:Class | c in Teacher.Teaches 
}
pred inv8 {
    all t:Teacher | lone t.Teaches 
}
pred inv9 {
    all c:Class | lone (Teaches.c & Teacher) 
}
pred inv10 {
    all c:Class | some c.Groups.Student 
}
pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & Teaches.c 
}
pred inv12 {
    all t : Teacher | some (t.Teaches.Groups) 
}
pred inv13 {
    Teacher.Tutors in Teacher and Student.Tutors in Student 
}
pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors
}
pred inv15 {
    all s : Person | some Teacher & ^Tutors.s
}

pred inv10_OK {
    all c:Class | some c.Groups 
}

assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}

check inv10_Repaired expect 0