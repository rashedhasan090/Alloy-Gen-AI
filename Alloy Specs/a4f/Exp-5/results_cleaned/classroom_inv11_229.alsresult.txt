sig Person {
    Tutors: set Person,
    Teaches: set Class
}

sig Group {}

sig Class {
    Groups: Person lone -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    all p: Person | p in Student
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    all p: Person | p in Student or p in Teacher
}

pred inv5 {
    some t: Teacher | some c: t.Teaches
}

pred inv6 {
    all t: Teacher | t.Teaches in Class
}

pred inv7 {
    all c: Class | c in Teacher.Teaches
}

pred inv8 {
    all t: Teacher | lone t.Teaches
}

pred inv9 {
    all c: Class | lone c.Groups.Person & Teacher in c.Groups.Person
}

pred inv10 {
    all c: Class, s: Student | some c.Groups[s]
}

pred inv11 {
    all c: Class, g: Group | (some g.Person).(c.Groups) = g implies c in Teacher.Teaches
}

pred inv12 {
    all t: Teacher | some (t.Teaches).Groups.Person
}

pred inv13 {
    all t: Teacher, s: Student | s in t.Tutors implies t in s.Teaches
}

pred inv14 {
    all c: Class, s: Person, g: Group | c.Groups[s] = g, t: Teacher, t -> c in Teaches implies t in s.Tutors
}

pred inv15 {
    all s: Person | some Teacher & s.Tutors
}

run {
    assert inv1
    assert inv2
    assert inv3
    assert inv4
    assert inv5
    assert inv6
    assert inv7
    assert inv8
    assert inv9
    assert inv10
    assert inv11
    assert inv12
    assert inv13
    assert inv14
    assert inv15
} for 5 but exactly 1 Teacher, 2 Student, 2 Class, 2 Group, 4 Person, 2 set Person, 2 set Class.