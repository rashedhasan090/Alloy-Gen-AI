sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person {}
sig Student extends Person {}

pred inv1 {
    Student in Person 
}
pred inv2 {
    no Teacher 
}
pred inv3 {
    no Student & Teacher 
}
pred inv4 {
    Person in (Student + Teacher) 
}
pred inv5 {
    some Teacher.Teaches 
}
pred inv6 {
    all t:Teacher | t in t.Teaches
}
pred inv7 {
    all c:Class | c in Teacher.Teaches
}
pred inv8 {
    all t:Teacher | lone t.Teaches 
}
pred inv9 {
    all c:Class | lone (Teaches.c & Teacher) 
}
pred inv10 {
    all c:Class, s:Student | some c.Groups.s 
}
pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & Teaches.c 
}
pred inv12 {
    all t : Teacher | some (t.Teaches).Groups 
}
pred inv13 {
    all p:Person | (p in Teacher.Tutors and p in Student)
}
pred inv14 {
    all s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Class.Groups) and (t -> c in Teacher.Teaches) implies (t -> s in Tutors) and (g in c.Groups) and (s in c.Groups.g)
}
pred inv15 {
    all s:Person | ( some Teacher & s.Tutors ) implies ( s in Student )
}

pred inv10_OK {
    all c:Class, s:Student | some s.(c.Groups) 
}
assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}

check inv10_Repaired expect 0

run inv10_Repaired for 3

assert repair_assert_1{inv10[] iff inv10_OK[] }
check repair_assert_1