sig Person {
   Tutors: set Person,
   Teaches: set Class
}

sig Group {}

sig Class {
   Groups: Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
   Student in Person
}

pred inv2 {
   no Teacher
}

pred inv3 {
   no Student & Teacher
}

pred inv4 {
   Person in Student + Teacher
}

pred inv5 {
   some Teacher.Teaches
}

pred inv6 {
   Teacher.Teaches in Class
}

pred inv7 {
   all t: Teacher | t.Teaches in Class
}

pred inv8 {
   all t: Teacher | lone t.Teaches
}

pred inv9 {
   all c: Class | lone c.Teaches & Teacher
}

pred inv10 {
   all c: Class, s: Student | some s.(c.Groups)
}

pred inv11 {
   all c: Class | (some c.Groups) implies some t: Teacher | t.Teaches = c
}

pred inv12 {  
   all t: Teacher | some t.Tutors
}

pred inv13 {
   all t: Teacher, s: Student | s in t.Tutors
}

pred inv14 {
   all s: Person, c: Class, t: Teacher, g: Group | (c -> s -> g in Class.Groups) and t -> c in t.Teaches implies t -> s in t.Tutors
}

pred inv15 {
   all s: Person | some t: Teacher | t.Tutors.s
}

// Check repairs
pred inv12_Repaired {  
   all t: Teacher | some (t.Teaches).Groups
}

assert inv12_Fixed {
   inv12_Repaired[] iff inv12[]
}

check inv12_Fixed expect 0