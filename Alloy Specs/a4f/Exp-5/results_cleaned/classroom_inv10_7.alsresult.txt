sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person  {}

sig Student extends Person  {}

pred inv1 {
    Person in Student
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in Student + Teacher
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    all t:Teacher | t in t.Teaches
}

pred inv7 {
    all c:Class | Teaches.c in c.Groups.Person.Teaches
}

pred inv8 {
    all t:Teacher | lone t.Teaches
}

pred inv9 {
    all c:Class | lone (Teaches.c & Teacher)
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups)
}

pred inv11 {
    all c:Class | (some c.Groups) implies some Teacher & Teaches.c
}

pred inv12 {
    all t:Teacher | some (t.Teaches).Groups
}

pred inv13 {
    all p:Person | p.Tutors in Teacher and p in Student implies some p.Teaches
}

pred inv14 {
    all s:Person, c:Class, g:Group | (c -> s -> g in Groups) implies
        some Teacher & (Teacher.Teaches = c) and
        all t:Teacher | t.Teaches = c implies t -> s in Tutors
}

pred inv15 {
    all s:Person | some Teacher & ^s.Tutors
}

run {
    check inv1
    check inv2
    check inv3
    check inv4
    check inv5
    check inv6
    check inv7
    check inv8
    check inv9

    assert inv1_Repaired {
        inv1[] iff Person in Student
    }

    assert inv2_Repaired {
        inv2[] iff no Teacher
    }

    assert inv3_Repaired {
        inv3[] iff no Student & no Teacher
    }

    assert inv4_Repaired {
        inv4[] iff Person in Student + Teacher
    }

    assert inv5_Repaired {
        inv5[] iff some Teacher.Teaches
    }

    assert inv6_Repaired {
        inv6[] iff all t:Teacher | t in t.Teaches
    }

    assert inv7_Repaired {
        inv7[] iff all c:Class | Teaches.c in c.Groups.Person.Teaches
    }

    assert inv8_Repaired {
        inv8[] iff all t:Teacher | lone t.Teaches
    }

    assert inv9_Repaired {
        inv9[] iff all c:Class | lone (Teaches.c & Teacher)
    }

    assert inv10_Repaired {
        inv10[] iff all c:Class, s:Student | some s.(c.Groups)
    }

    assert inv11_Repaired {
        inv11[] iff all c:Class | (some c.Groups) implies some Teacher & Teaches.c
    }

    assert inv12_Repaired {
        inv12[] iff all t:Teacher | some (t.Teaches).Groups
    }

    assert inv13_Repaired {
        inv13[] iff all p:Person | p.Tutors in Teacher and p in Student implies some p.Teaches
    }

    assert inv14_Repaired {
        inv14[] iff
            all s:Person, c:Class, g:Group |
                (c -> s -> g in Groups) implies
                    some Teacher & (Teacher.Teaches = c) and
                    all t:Teacher |
                        t.Teaches = c implies t -> s in Tutors
    }

    assert inv15_Repaired {
        inv15[] iff all s:Person | some Teacher & ^s.Tutors
    }

    check inv1_Repaired
    check inv2_Repaired
    check inv3_Repaired
    check inv4_Repaired
    check inv5_Repaired
    check inv6_Repaired
    check inv7_Repaired
    check inv8_Repaired
    check inv9_Repaired
    check inv10_Repaired
    check inv11_Repaired
    check inv12_Repaired
    check inv13_Repaired
    check inv14_Repaired
    check inv15_Repaired
}