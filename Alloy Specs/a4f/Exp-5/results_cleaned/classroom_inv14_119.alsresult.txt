sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person lone -> Group //changed from Person -> Group
}

sig Teacher extends Person  {}

sig Student extends Person  {}

pred inv1 {
    Person in Student 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    Teacher.Teaches in Class //changed from Teacher in Teaches.Class
}

pred inv7 {
    Class in Teacher.Teaches 
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone Teaches[c] & Teacher //changed from lone Teaches.c & Teacher
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) 
}

pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & c.Teaches //changed from some Teacher & Teaches.c
}

pred inv12 {
    all t : Teacher | some t.Teaches.Groups //changed from (t.Teaches).Groups
}

pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student 
}

pred inv14 {
    all s : Person, c : Class, g : Group | (c -> s -> g in Groups) implies some t : Teacher | t.Teaches = c and t.Tutors = s
}

pred inv15 {
    all s : Person | some Teacher & ^Tutors.s //changed from some Teacher & ^Tutors.s
}

//assertions remain the same as in the original code.