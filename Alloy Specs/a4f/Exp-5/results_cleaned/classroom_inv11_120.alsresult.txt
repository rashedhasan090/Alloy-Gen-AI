sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> set Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher.Teaches in Class
}

pred inv7 {
    all c : Class | c.Teaches in Teacher
}

pred inv8 {
    all t : Teacher | lone t.Teaches
}

pred inv9 {
    all c : Class | lone (c -> Teaches) & Teacher
}

pred inv10 {
    all c : Class, s : Student | some g : c.Groups | s in g.Persons
}

pred inv11 {
    all c : Class | some t : Teacher | t in c.Teaches
}

pred inv12 {
    all t : Teacher | some g : t.Teaches.Groups | g in Group
}

pred inv13 {
    all p : Person | p.Tutors in Teacher & p in Student
}

pred inv14 {
    all s : Person, c : Class, g : Group | (c -> s -> g) in Groups => some t : Teacher | t -> c in Teaches & t -> s in Tutors
}

pred inv15 {
    all s : Person | some t : Teacher & s in t.Tutors
}

// Added missing closing curly brace
assert inv11_Repaired {
    inv11[] iff inv11_OK[]
}