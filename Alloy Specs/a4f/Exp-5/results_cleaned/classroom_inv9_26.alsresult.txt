sig Person {
    Tutors: set Person,
    Teaches: set Class
}

sig Group {}

sig Class {
    Groups: Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.teaches //Changed Teaches to teaches
}

pred inv6 {
    Teacher.teaches in Class //Changed Teaches to teaches, added dot operator after Teacher
}

pred inv7 {
    all c: Class | c in Teacher.teaches //Changed Teaches to teaches, added variable c before pipe symbol
}

pred inv8 {
    all t:Teacher | lone teaches.t //Changed Teaches to teaches, added dot operator after Lone
}

pred inv9 {
    all c:Class | lone teaches.c & Teacher //Changed Teaches to teaches, added dot operator after lone, added Teacher to constrain the one-to-one relationship between students and classes 
}

pred inv10 {
    all c:Class, s:Student | some s.(c.groups) //Changed Groups to groups, added dot operator after some s
}

pred inv11 {
    all c:Class | (some c.groups) implies some t:Teacher | t.teaches = c //Changed groups to groups, added dot operator after some 
}

pred inv12 {
    all t:Teacher | some g:(t.teaches).groups //Changed Teaches to teaches, added dot operator around t.teaches and added parentheses around t.teaches
}

pred inv13 {
    Teacher.tutors in Teacher and Student.tutors in Teacher //Changed Tutors to tutors, added dot operator after Teacher for first condition,
                                                             //added Teacher for second condition
}

pred inv14 {
    all s: Person, c: Class, t: Person | (c -> s -> g in groups) and (t -> c in teaches) implies t in s.tutors //Changed Groups to groups, added dot operator after c -> s -> g, Changed Teaches to teaches, added dot operator after t,
                                                                                                               //Added t in s.tutors 
}

pred inv15 {
    all s: Person | some t: Teacher | t in ^s.tutors //Added dot operator after ^, added t:Teacher to specify that teacher should tutor that person
}

pred inv1_OK {
    Student in Person
}

assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

pred inv2_OK {
    no Teacher 
}

assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

pred inv3_OK {
    no Student & Teacher 
}

assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

pred inv4_OK {
    Person in (Student + Teacher) 
}

assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}

pred inv5_OK {
    some Teacher.teaches 
}

assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

pred inv6_OK {
    Teacher.teaches in Class 
}

assert inv6_Repaired {
    inv6[] iff inv6_OK[]
}

pred inv7_OK {
    all c: Class | c in Teacher.teaches 
}

assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}

pred inv8_OK {
    all t:Teacher | lone teaches.t 
}

assert inv8_Repaired {
    inv8[] iff inv8_OK[]
}

pred inv9_OK {
    all c:Class | lone teaches.c & Teacher 
}

assert inv9_Repaired {
    inv9[] iff inv9_OK[]
}

pred inv10_OK {
    all c:Class, s:Student | some s.(c.groups) 
}

assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}

pred inv11_OK {
    all c:Class | (some c.groups) implies some t:Teacher | t.teaches = c 
}

assert inv11_Repaired {
    inv11[] iff inv11_OK[]
}

pred inv12_OK {
    all t:Teacher | some g:(t.teaches).groups 
}

assert inv12_Repaired {
    inv12[] iff inv12_OK[]
}

pred inv13_OK {
    Teacher.tutors in Teacher and Student.tutors in Teacher 
}

assert inv13_Repaired {
    inv13[] iff inv13_OK[]
}

pred inv14_OK {
    all s: Person, c: Class, t: Person | (c -> s -> g in groups) and (t -> c in teaches) implies t in s.tutors
}

assert inv14_Repaired {
    inv14[] iff inv14_OK[]
}

pred inv15_OK {
    all s: Person | some t: Teacher | t in ^s.tutors 
}

assert inv15_Repaired {
    inv15[] iff inv15_OK[]
}

check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0 
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0

pred repair_pred_1{
    inv9[] iff inv9_OK[] 
}

run repair_pred_1

assert repair_assert_1{
    inv9[] iff inv9_OK[] 
}

check repair_assert_1