sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}
pred inv1 {
    Student in Person 
}
pred inv2 {
    no Teacher 
}
pred inv3 {
    no (Student & Teacher) 
}
pred inv4 {
    Person in (Student + Teacher) 
}
pred inv5 {
    some Teacher.Teaches 
}
pred inv6 {
    all t:Teacher | t.Teaches in Teaches
}
pred inv7 {
    all c:Class | c in Teacher.Teaches 
}
pred inv8 {
    all t:Teacher | lone t.Teaches 
}
pred inv9 {
    all c:Class | lone (Teaches.c & Teacher) 
}
pred inv10 {
    all c:Class | all s:Student | some g:c.Groups | s in g
}
pred inv11 {
    all c:Class | (some c.Groups) implies (some Teacher & (Teacher.Teaches = c))
}
pred inv12 {
    all t:Teacher | some g:(t.Teaches).Groups | g in (t.Tutors).Groups
}
pred inv13 {
    all p:Person | p.Tutors in Teacher implies p in Student 
}
pred inv14 {
    all s:Person, c:Class, t:Teacher, g:Group | (c -> s -> g in Class.Groups) and (t -> c in Teaches) implies (t -> s in Tutors)
}
pred inv15 {
    all s:Person | s in ^Tutors.Teacher
}
assert inv1_Repaired {
  Student in Person 
}
assert inv2_Repaired {
  no Teacher 
}
assert inv3_Repaired {
  no (Student & Teacher) 
}
assert inv4_Repaired {
  Person in (Student + Teacher) 
}
assert inv5_Repaired {
  some Teacher.Teaches 
}
assert inv6_Repaired {
  all t:Teacher | t.Teaches in Teaches
}
assert inv7_Repaired {
  all c:Class | c in Teacher.Teaches 
}
assert inv8_Repaired {
  all t:Teacher | lone t.Teaches 
}
assert inv9_Repaired {
  all c:Class | lone (Teaches.c & Teacher) 
}
assert inv10_Repaired {
  all c:Class | all s:Student | some g:c.Groups | s in g
}
assert inv11_Repaired {
  all c:Class | (some c.Groups) implies (some Teacher & (Teacher.Teaches = c))
}
assert inv12_Repaired {
  all t:Teacher | some g:(t.Teaches).Groups | g in (t.Tutors).Groups
}
assert inv13_Repaired {
  all p:Person | p.Tutors in Teacher implies p in Student 
}
assert inv14_Repaired {
  all s:Person, c:Class, t:Teacher, g:Group | (c -> s -> g in Class.Groups) and (t -> c in Teaches) implies (t -> s in Tutors)
}
assert inv15_Repaired {
  all s:Person | s in ^Tutors.Teacher
}
check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0 
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0