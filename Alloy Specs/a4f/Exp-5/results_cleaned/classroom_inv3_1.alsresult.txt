sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person  {}

sig Student extends Person  {}

pred inv1 {
    Student in Person 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    all t : Teacher | t in t.Teaches.Class 
}

pred inv7 {
    all c : Class | c in c.Groups.Person.Teaches
}

pred inv8 {
    all t : Teacher | lone t.Teaches 
}

pred inv9 {
    all c : Class | lone (Teaches.c & Teacher) 
}

pred inv10 {
    all c : Class, s : Student | some (c.Groups[s])
}

pred inv11 {
    all c : Class | some c.Groups implies some Teacher & c in Teacher.Teaches
}

pred inv12 {
    all t : Teacher | some (t.Teaches.Groups)
}

pred inv13 {
    all p : Person, t : Teacher | p in t.Tutors implies p in Student and t in Teacher
}

pred inv14 {
    all s : Person, c : Class, g : Group |
        (c -> s -> g in Groups) and
        all t : Teacher | t -> c in Teaches implies t -> s in Tutors
}

pred inv15 {
    all s : Person | some t : Teacher | t in s.Tutors
}

pred inv3_OK {
    no Student & no Teacher
}

assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

check inv3_Repaired expect 1