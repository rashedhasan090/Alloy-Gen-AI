sig Person  {
   Tutors : set Person,
   Teaches : set Class
}
sig Group {}
sig Class  {
   Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}
pred inv1 {
   Student in Person 
}
pred inv2 {
   no Teacher 
}
pred inv3 {
   no Student & Teacher 
}
pred inv4 {
   Person in (Student + Teacher) 
}
pred inv5 {
   some Teacher.Teaches 
}
pred inv6 {
   Teacher.Teaches in Class 
}
pred inv7 {
   all c:Class | some Teacher & c.Teaches 
}
pred inv8 {
   all t:Teacher | lone t.Teaches 
}
pred inv9 {
   all c:Class | lone c.Teaches & Teacher 
}
pred inv10 {
   all c:Class, s:Student | some s.(c.Groups) 
}
pred inv11 {
   all c : Class | (some c.Groups) implies some Teacher & c.Teaches 
}
pred inv12 {
   all t : Teacher | some (t.Teaches).Groups 
}
pred inv13 {
   all p:Person | (p in Teacher.Tutors) implies p in Teacher and p.Tutors in Student 
}
pred inv14 {
   all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Class.Groups) 
                                                    and (t -> c in Teaches)
                                                    implies t -> s in Tutors
}
pred inv15 {
   all s : Person | some Teacher & ^s.Tutors
}

pred inv4_OK {
   Person in (Student + Teacher)
}
assert inv4_Repaired {
   inv4[] iff inv4_OK[]
}

check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0