sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 { Student in Person }

pred inv2 { no Teacher }

pred inv3 { no Student & no Teacher }

pred inv4 { Person in (Student + Teacher) }

pred inv5 { some Teacher.Teaches }

pred inv6 { Teacher.Teaches in Class }

pred inv7 { all c:Class | some Teacher & c.Teaches }

pred inv8 { all t:Teacher | lone t.Teaches }

pred inv9 { all c:Class | lone c.Teaches & Teacher }

pred inv10 { all c:Class, s:Student | some s.(c.Groups) }

pred inv11 { all c : Class | (some c.Groups) implies some Teacher & c.Teaches }

pred inv12 { all t : Teacher | some (t.Teaches).Groups }

pred inv13 { all p:Person, t:Teacher | p in t.Tutors implies p in Student }

pred inv14 { all s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors }

pred inv15 { all s : Person | some Teacher & ^s.Tutors }

check inv1 expect 1
check inv2 expect 1
check inv3 expect 1
check inv4 expect 1
check inv5 expect 1
check inv6 expect 1
check inv7 expect 1
check inv8 expect 1
check inv9 expect 1
check inv10 expect 1
check inv11 expect 1
check inv12 expect 1
check inv13 expect 1
check inv14 expect 1
check inv15 expect 1

run {} for 5
