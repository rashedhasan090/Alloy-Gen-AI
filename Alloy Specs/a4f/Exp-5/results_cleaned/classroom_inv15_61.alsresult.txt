sig Person {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class {
    Groups : Person -> Group
}
sig Teacher extends Person {}
sig Student extends Person {}
pred inv1 {
    Student in Person
}
pred inv2 {
    no Teacher
}
pred inv3 {
    no Student & Teacher
}
pred inv4 {
    Person in (Student + Teacher)
}
pred inv5 {
    some Teacher.Teaches
}
pred inv6 {
    all t : Teacher | t in t.Teaches.TeachedBy
}
pred inv7 {
    all c : Class | some Teacher & c.TaughtBy
}
pred inv8 {
    all t : Teacher | lone t.Teaches
}
pred inv9 {
    all c : Class | lone c.TaughtBy & Teacher
}
pred inv10 {
    all c : Class, s : Student | some s.(c.Groups)
}
pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & c.TaughtBy
}
pred inv12 {
    all t : Teacher | some (t.Teaches).Groups
}
pred inv13 {
    all t : Teacher, s : Student | s in t.Tutors implies t in s.Teaches
}
pred inv14 {
    all s : Person, c : Class, g : Group | (c -> s -> g in Class.Groups) implies some t : Teacher | t -> s in t.Teaches and t -> c.TaughtBy
}
pred inv15 {
    all s : Person | some t : Teacher & s.Tutors.t
}
run inv1 for 3
run inv2 for 3
run inv3 for 3
run inv4 for 3
run inv5 for 3
run inv6 for 3
run inv7 for 3
run inv8 for 3
run inv9 for 3
run inv10 for 3
run inv11 for 3
run inv12 for 3
run inv13 for 3
run inv14 for 3
run inv15 for 3
```