sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group,
    Teachers : set Person
}

sig Teacher extends Person  {}

sig Student extends Person  {}

pred inv1 {
    Person in Student 
}

pred inv2 {
    no Teacher 
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person in (Student + Teacher) 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    Teacher in Teaches.Teachers 
}

pred inv7 {
    all c : Class | Teachers in c.Teaches implies Teacher in Teachers 
}

pred inv8 {
    all t : Teacher | lone t.Teaches 
}

pred inv9 {
    all c : Class | lone Teachers & c -> Teachers in c.Groups 
}

pred inv10 {
    all c : Class, s : Student | some s.(c.Groups)
}

pred inv11 {
    all c : Class | some c.Groups implies some Teachers & Teachers in c.Teaches
}

pred inv12 {
    all t : Teacher | some t.Teaches.Groups 
}

pred inv13 {
    all t : Teacher, s : Student | s in t.Tutors implies t in s.Teaches 
}

pred inv14 {
    all s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Groups) and t in c.Teachers implies t in s.Tutors
}

pred inv15 {
    all s : Person | some Teachers & ^s.Tutors in Teachers.Teaches.Teaches
}

// assert and check statements go here, omitted for brevity