The bug in this specification is that in the "complete" predicate, the expression "Node in n.adj" should be replaced with "n in Node.adj". 

Fixed code:

sig Node {
    adj : set Node
}

pred undirected {
    adj = ~adj
}

pred oriented {
    no adj & ~adj
}

pred acyclic {
    all a:Node | a not in a.^adj
}

pred complete {
    all n:Node | n in Node.adj
}

pred noLoops {
    no (iden & adj)
}

pred weaklyConnected {
    all n:Node | Node in n.*(adj+~adj)
}

pred stronglyConnected {
    all n:Node | Node in n.*adj
}

pred transitive {
    adj.adj in adj
}

pred repair_pred_1 { weaklyConnected[] iff weaklyConnectedOK[] }
run repair_pred_1

assert undirectedRepaired { undirected[] iff adj = ~adj }
assert orientedRepaired { oriented[] iff no adj & ~adj }
assert acyclicRepaired { acyclic[] iff all a:Node | a not in a.^adj }
assert completeRepaired { complete[] iff all n:Node | n in Node.adj }
assert noLoopsRepaired { noLoops[] iff no (iden & adj) }
assert weaklyConnectedRepaired { weaklyConnected[] iff all n:Node | Node in n.*(adj+~adj) }
assert stronglyConnectedRepaired { stronglyConnected[] iff all n:Node | Node in n.*adj }
assert transitiveRepaired { transitive[] iff adj.adj in adj }

check undirectedRepaired expect 0
check orientedRepaired expect 0
check acyclicRepaired expect 0
check completeRepaired expect 0
check noLoopsRepaired expect 0
check weaklyConnectedRepaired expect 0
check stronglyConnectedRepaired expect 0
check transitiveRepaired expect 0