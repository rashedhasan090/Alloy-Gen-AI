One possible fixed version of the code is:

sig Node {
    adj: set Node
}

pred undirected {
    adj = ~adj
}

pred oriented {
    no adj & ~adj
}

pred acyclic {
    all a: Node | a not in a.^adj
}

pred complete {
    all n: Node | n.adj = Node
}

pred noLoops {
    no (iden & adj)
}

pred weaklyConnected {
    all n: Node | Node in n.*(adj+~adj)
}

pred stronglyConnected {
    all n: Node | n in n.*adj
}

pred transitive {
    adj.adj in adj
}

check undirected[]
check oriented[]
check acyclic[]
check complete[]
check noLoops[]
check weaklyConnected[]
check stronglyConnected[]
check transitive[]

The bug was in the complete predicate, where the condition should be n.adj = Node instead of Node in n.adj.