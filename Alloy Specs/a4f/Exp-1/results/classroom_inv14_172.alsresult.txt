sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}
pred inv1 {
    Person in Student
}
pred inv2 {
    no Teacher
}
pred inv3 {
    no Student & Teacher
}
pred inv4 {
    Person in (Student + Teacher)
}
pred inv5 {
    some Teacher.Teaches
}
pred inv6 {
    Teacher in Teaches
}
pred inv7 {
    Class in Teacher.Teaches
}
pred inv8 {
    all t:Teacher | lone t.Teaches
}
pred inv9 {
    all c:Class | lone Teaches[c] & Teacher
}
pred inv10 {
    all c:Class, s:Student | some s.(c.Groups)
}
pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & Teaches[c]
}
pred inv12 {
    all t : Teacher | some (t.Teaches).Groups
}
pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student
}
pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors
}
pred inv15 {
    all s : Person | some Teacher & ^Tutors[s]
}

-- Repairs:

-- Fixed inv14: changed Teacher to Person in the signature of variable t
pred inv14_OK {
    all s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors
}

assert inv1_Repaired {
  Person in Student
}

assert inv2_Repaired {
    no Teacher
}

assert inv3_Repaired {
    no Student & Teacher
}

assert inv4_Repaired {
    Person in (Student + Teacher)
}

assert inv5_Repaired {
    some Teacher.Teaches
}

assert inv6_Repaired {
    Teacher in Teaches.Class
}

assert inv7_Repaired {
    Class in Teacher.Teaches
}

assert inv8_Repaired {
    all t:Teacher | lone t.Teaches
}

assert inv9_Repaired {
    all c:Class | lone Teaches.c & Teacher
}

assert inv10_Repaired {
    all c:Class, s:Student | some s.(c.Groups)
}

assert inv11_Repaired {
    all c : Class | (some c.Groups) implies some Teacher & Teaches.c
}

assert inv12_Repaired {
    all t : Teacher | some (t.Teaches).Groups
}

assert inv13_Repaired {
    Tutors.Person in Teacher and Person.Tutors in Student
}

assert inv14_Repaired {
    inv14[] iff inv14_OK[]
}

assert inv15_Repaired {
    all s : Person | some Teacher & ^Tutors.s
}

check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0

pred repair_pred_1 {
    inv14[] iff inv14_OK[]
}

run repair_pred_1

assert repair_assert_1 {
    inv14[] iff inv14_OK[]
}

check repair_assert_1