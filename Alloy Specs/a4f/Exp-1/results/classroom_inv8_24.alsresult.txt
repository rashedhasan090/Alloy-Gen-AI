sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group,
}
sig Teacher extends Person  {}
sig Student extends Person  {}

pred inv1 {
    Person in Student
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher.Teaches in Class
}

pred inv7 {
    Class in Teacher.Teaches
}

pred inv8 {
    all t:Teacher | lone x,y : Class | (x in t.Teaches and y in t.Teaches) implies x=y 
}

pred inv9 {
    all c:Class | lone Teaches[c] & Teacher
}

pred inv10 {
    all c:Class, s:Student | some g : Group | (c -> s -> g in Class.Groups)
}

pred inv11 {
    all c : Class | (some c.Groups) implies some t : Teacher | t.Teaches = c
}

pred inv12 {
    all t : Teacher | some g : Group | (g in (t.Teaches).Groups)
}

pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student 
}

pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Class.Groups) and (t -> c in Teaches) implies (t -> s in Tutors)
}

pred inv15 {
    all s : Person | some t : Teacher | (t.Teaches & ^s.Tutors)
}

pred inv8_OK {
    all t:Teacher | lone x,y : Class | ((x in t.Teaches and y in t.Teaches) implies x=y)
}

assert inv8_Repaired {
    inv8[] iff inv8_OK[]
}

check inv8_Repaired expect 0