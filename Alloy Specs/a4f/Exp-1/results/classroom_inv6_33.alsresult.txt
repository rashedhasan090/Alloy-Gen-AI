sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person {}
sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no (Student & Teacher)
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher in Teaches.Teaches
}

pred inv7 {
    Class in Teacher.Teaches
}

pred inv8 {
    all t:Teacher | lone t.Teaches
}

pred inv9 {
    all c:Class | lone (Teaches.c & Teacher)
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups)
}

pred inv11 {
  all c : Class | (some c.Groups) implies some Teacher & (Teacher.Teaches = c)
}

pred inv12 {
  all t : Teacher | some (t.Teaches).Groups
}

pred inv13 {
  Tutors.Person in Teacher and Person.Tutors in Student
}

pred inv14 {
  all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Class.Groups) and t -> c in t.Teaches implies t -> s in s.Tutors
}

pred inv15 {
  all s : Person | some Teacher & ^s.Tutors
}

pred inv6_OK {
  Teacher in Teaches.Teaches
}
assert inv6_Repaired {
  inv6[] iff inv6_OK[]
}

--- PerfectOracleCommands
check inv6_Repaired expect 0
```