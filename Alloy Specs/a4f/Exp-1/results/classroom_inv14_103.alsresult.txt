sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person  {}

sig Student extends Person  {}

// Fixing the bug in the inv15 predicate
pred inv15 {
    all s : Student | some t : Teacher | t.Tutors = s
}

pred inv1 {
    Person in Student
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher in Teaches.Class
}

pred inv7 {
    Class in Teacher.Teaches
}

pred inv8 {
    all t:Teacher | lone t.Teaches
}

pred inv9 {
    all c:Class | lone Teaches.c & Teacher
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups)
}

pred inv11 {
    all c : Class | (some c.Groups) implies some Teacher & Teaches.c
}

pred inv12 {
    all t : Teacher | some (t.Teaches).Groups
}

pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student
}

pred inv14 {
    all s : Student, c : Class, t : Teacher |
        t -> c in Teaches and (some g : Group | c -> s -> g in Groups) implies t -> s in Tutors
}

pred inv15_OK {
    all s : Student | some t : Teacher | t.Tutors = s
}

// Checking if the repaired invariant satisfies the original invariant
assert inv15_Repaired {
    inv15[] iff inv15_OK[]
}

// Performing all invariant checks
check inv1 expect 0
check inv2 expect 0
check inv3 expect 0 
check inv4 expect 0
check inv5 expect 0
check inv6 expect 0
check inv7 expect 0
check inv8 expect 0
check inv9 expect 0
check inv10 expect 0
check inv11 expect 0
check inv12 expect 0
check inv13 expect 0
check inv14 expect 0
check inv15_Repaired expect 0

// Checking the repaired invariant using a predicate
pred repair_pred_1 {
    inv14[] iff inv14_OK[]
}
run repair_pred_1
assert repair_assert_1 {
    inv14[] iff inv14_OK[]
}
check repair_assert_1