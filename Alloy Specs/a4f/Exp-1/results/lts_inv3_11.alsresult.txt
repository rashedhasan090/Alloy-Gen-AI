Fixed code:

/**
 * A labeled transition system (LTS) is comprised by States, a sub-set
 * of which are Initial, connected by transitions, here represented by 
 * Events.
 */
 
sig State {
    trans : Event -> State
}

sig Init in State {}

sig Event {}

/**
 * The LTS does not contain deadlocks, i.e., each state has at least a 
 * transition.
 */
 
pred inv1 {
    all s: State | some s.trans
}

/**
 * There is a single initial state.
 */
 
pred inv2 {
    one s: Init | true
}

/**
 * The LTS is deterministic i.e., each state has at most one transition
 * for each event.
 */
 
pred inv3 {
    all s : State, e : Event | lone e.(s.trans)
}

/**
 * All states are reachable from an initial state.
 */

pred inv4 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    Init in tr.^State
} 

/**
 * All the states have the same events available.
 */
 
pred inv5 {
    all s, s': State | s'.trans = s.trans
}

/**
 * Each event is available in at least one state.
 */
 
pred inv6 {
    all e : Event | some s : State | e in s.trans
}

/**
 * The LTS is reversible, i.e., from a reachable state it is always possible 
 * to return to an initial state.
 */
 
pred inv7 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    all s : State - Init | some i : Init | i in s.^tr
}

pred inv1_OK {
    all s: State | some s.trans
}

assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

pred inv2_OK {
    one s: Init | true
}

assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

pred inv3_OK {
    all s : State, e : Event | lone s.(e.trans)
}

assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

pred inv4_OK {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    Init in tr.^State
}

assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}

pred inv5_OK {
    all s, s': State | s'.trans = s.trans
}

assert inv5_Repaired {
   inv5[] iff inv5_OK[]
}

pred inv7_OK {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    all s : State - Init | some i : Init | i in s.^tr
}

assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}

check inv1_Repaired
check inv2_Repaired
check inv3_Repaired
check inv4_Repaired
check inv5_Repaired
check inv7_Repaired