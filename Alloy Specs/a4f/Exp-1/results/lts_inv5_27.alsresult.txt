The bug in this specification is in the pred inv5. The correct predicate is:

pred inv5 {
  all s1,s2:State | s1.trans = s2.trans
}

Here is the entire fixed code:

//'A labeled transition system (LTS) is comprised by States, a sub-set\n' +//'of which are Initial, connected by transitions, here represented by \n' +//'Events.\n'
sig State {
        trans : Event -> State
}
sig Init in State {}
sig Event {}

//'The LTS does not contain deadlocks, ie, each state has at least a \n' +'transition.\n'

pred inv1 {
    all s: State | some s.trans 
}

//'There is a single initial state.\n'

pred inv2 {
    one Init 
}

//'The LTS is deterministic, ie, each state has at most a transition for each event.\n'

pred inv3 {
    all s : State, e : Event | lone e.(s.trans)  
}

//'All states are reachable from an initial state.\n'

pred inv4 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
  State in Init.^tr 
}

//'All the states have the same events available.\n'

pred inv5 {
  all s1,s2:State | s1.trans = s2.trans
}

//'Each event is available in at least a state.\n'

pred inv6 {
    all e:Event | some s1,s2:State | s1->e->s2 in trans  
}

//'The LTS is reversible, ie, from a reachable state it is always possible \n' +'to return to an initial state.\n'

pred inv7 {
  let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    all s : Init.^tr | some i : Init | i in s.^tr 
}

pred inv1_OK {
    all s: State | some s.trans 
}
assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

pred inv2_OK {
    one Init 
}
assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

pred inv3_OK {
    all s : State, e : Event | lone e.(s.trans)  
}
assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

pred inv4_OK {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    State in Init.^tr 
}
assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}

pred inv5_OK {
    all s1,s2:State | s1.trans = s2.trans
}
assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

pred inv7_OK {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    all s : Init.^tr | some i : Init | i in s.^tr 
}
assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}

//'--- PerfectOracleCommands\n'
check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0 
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv7_Repaired expect 0

pred repair_pred_1{
    inv5[] iff inv5_OK[] 
}
run repair_pred_1
assert repair_assert_1{
    inv5[] iff inv5_OK[] 
}
check repair_assert_1