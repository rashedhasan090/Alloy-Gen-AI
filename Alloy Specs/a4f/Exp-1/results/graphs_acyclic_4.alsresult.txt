//Fixed code:

'Number Valuations: 8\n', 
'Number Tests: 38\n', 

sig Node {
    adj: set Node
}

// The graph is undirected, i.e., edges are symmetric
// http://mathworld.wolfram.com/UndirectedGraph.html
pred undirected {
    adj = ~adj  
}

// The graph is oriented, i.e., contains no symmetric edges.
// http://mathworld.wolfram.com/OrientedGraph.html
pred oriented {
    no a,b: Node | a->b in adj and b->a in adj
}

// The graph is acyclic, i.e., contains no directed cycles.
// http://mathworld.wolfram.com/AcyclicDigraph.html
pred acyclic {
    no a: Node | a in a.^adj
}

// The graph is complete, i.e., every node is connected to every other node.
// http://mathworld.wolfram.com/CompleteDigraph.html
pred complete {
    all n,m: Node | n!=m => n->m in adj or m->n in adj
}

// The graph contains no loops, i.e., nodes have no transitions to themselves.
// http://mathworld.wolfram.com/GraphLoop.html
pred noLoops {
    no a: Node | a->a in adj
}

// The graph is weakly connected, i.e., it is possible to reach every node from every node ignoring edge direction.
// http://mathworld.wolfram.com/WeaklyConnectedDigraph.html
pred weaklyConnected {
    all n,m: Node | n!=m => n in m.*(adj+~adj)
}

// The graph is strongly connected, i.e., it is possible to reach every node from every node considering edge direction.
// http://mathworld.wolfram.com/StronglyConnectedDigraph.html
pred stronglyConnected {
    all n,m: Node | n!=m => n in m.*adj or m in n.*adj
}

// The graph is transitive, i.e., if two nodes are connected through a third node, they also are connected directly.
// http://mathworld.wolfram.com/TransitiveDigraph.html
pred transitive {
    all a,b,c: Node | a->b in adj and b->c in adj => a->c in adj
}

run {
    undirected
    oriented
    acyclic
    complete
    noLoops
    weaklyConnected
    stronglyConnected
    transitive
} for 10

assert undirectedIsUndirected { undirected }
assert orientedIsOriented { oriented }
assert acyclicIsAcyclic { acyclic }
assert completeIsComplete { complete }
assert noLoopsHasNoLoops { noLoops }
assert weaklyConnectedIsWeaklyConnected { weaklyConnected }
assert stronglyConnectedIsStronglyConnected { stronglyConnected }
assert transitiveIsTransitive { transitive }

check undirectedIsUndirected expect 0
check orientedIsOriented expect 0
check acyclicIsAcyclic expect 0
check completeIsComplete expect 0
check noLoopsHasNoLoops expect 0
check weaklyConnectedIsWeaklyConnected expect 0
check stronglyConnectedIsStronglyConnected expect 0
check transitiveIsTransitive expect 0