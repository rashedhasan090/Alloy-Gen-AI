sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher in Class.Teaches
}

pred inv7 {
    Class in Teacher.Teaches
}

pred inv8 {
    all t:Teacher | lone t.Teaches
}

pred inv9 {
    all c:Class | lone (c.Teaches & Teacher)
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups)
}

pred inv11 {
    all c:Class | (some c.Groups) implies some t:Teacher | t.Teaches = c
}

pred inv12 {
    all t:Teacher, c:Class | t.Teaches = c implies some g:Group | c->t->g in Class.Groups
}

pred inv13 {
    all t:Teacher | t.Tutors = none and no s:Student | s.Tutors = t
}

pred inv14 {
    all s:Student, c:Class, g:Group | (c->s->g in Class.Groups) implies some t:Teacher | t.Teaches = c and c->t->g in Class.Groups and t->s in t.Tutors
}

pred inv15 {
    all s:Person | some t:Teacher & s.Tutors = t
}

run {
    check inv1
    check inv2
    check inv3
    check inv4
    check inv5
    check inv6
    check inv7
    check inv8
    check inv9
    check inv10
    check inv11
    check inv12
    check inv13
    check inv14
    check inv15
} for 10 but 1 Class, 2 Group, 2 Student, 2 Teacher, 4 Person