A correct version of the Alloy specification is:

// A labeled transition system (LTS) is comprised by States, a sub-set
// of which are Initial, connected by transitions, here represented by 
// Events.
sig State {
        trans : Event -> State
}

sig Init in State {}

sig Event {}

// The LTS does not contain deadlocks, i.e., each state has at least a 
// transition.
pred inv1 {
    all s: State | some s.trans
}

// There is a single initial state.
pred inv2 {
    one Init
}

// The LTS is deterministic, i.e., each state has at most a transition for each event.
pred inv3 {
    all s : State, e : Event | lone e.(s.trans)
}

// All states are reachable from an initial state.
pred inv4 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
        State in Init.^tr
}

// All the states have the same events available.
pred inv5 {
    all s, s' : State | all e : Event | (s.trans[e] != none) implies (s'.trans[e] != none)
}

// Each event is available in at least a state.
pred inv6 {
    all e : Event | some s1, s2 : State | s1->e->s2 in trans
}

// The LTS is reversible, i.e., from a reachable state, it is always possible 
// to return to an initial state.
pred inv7 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
        all s : Init.^tr | some i : Init | i in s.^tr
}

// Assertion repairs
pred inv5_OK {
    all s, s' : State | all e : Event | (s.trans[e] != none) implies (s'.trans[e] != none)
}
assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

// Checks for repaired invariants
check inv1[]
check inv2[]
check inv3[]
check inv4[]
check inv5_Repaired[]
check inv6[]
check inv7[]