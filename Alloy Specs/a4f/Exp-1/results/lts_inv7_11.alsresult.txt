The bug in this specification is in the definition of the predicate inv7. The let expression in inv7 has a syntax error, and the correct formulation is as follows: 

pred inv7 {
    all s1,s2:State, e1:Event | s1->e1->s2 in trans ==> (all e2:Event | s2->e2->s1 in trans or s1->e2->s1 in trans)
}

The corrected Alloy specification is as follows: 

sig State {
    trans : Event -> State
}

sig Init in State {}

sig Event {}

pred inv1 {
    all s: State | some s.trans
}

pred inv2 {
    one Init
}

pred inv3 {
    all s : State, e : Event | lone e.(s.trans)
}

pred inv4 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    State in Init.^tr
}

pred inv5 {
    all s:State, s1:State | s.trans.State = s1.trans.State
}

pred inv6 {
    all e:Event | some s1,s2:State | s1->e->s2 in trans
}

pred inv7 {
    all s1,s2:State, e1:Event | s1->e1->s2 in trans ==> (all e2:Event | s2->e2->s1 in trans or s1->e2->s1 in trans)
}

pred inv1_OK {
    all s: State | some s.trans
}

assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

pred inv2_OK {
    one Init
}

assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

pred inv3_OK{
    all s : State, e : Event | lone e.(s.trans) 
}

assert inv3_Repaired{
    inv3[] iff inv3_OK[]
}

pred inv4_OK {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    State in Init.^tr
}

assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}

pred inv5_OK {
    all s:State, s1:State | s.trans.State = s1.trans.State
}

assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

pred inv7_OK {
    all s1,s2:State, e1:Event | s1->e1->s2 in trans ==> (all e2:Event | s2->e2->s1 in trans or s1->e2->s1 in trans)
}

assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}

check inv1_Repaired
check inv2_Repaired
check inv3_Repaired 
check inv4_Repaired
check inv5_Repaired
check inv7_Repaired