sig File {
    link : set File
}
sig Trash extends File {}
sig Protected extends File {}
pred inv1 {
    no Trash --fix
}
pred inv2 {
    all f: File | f in Trash or f not in File.link --fix
}
pred inv3 {
    some Trash --fix
}
pred inv4 {
    no Protected & Trash --fix
}
pred inv5 {
    all f: File-Protected | f not in Trash implies some t: Trash | t.link=f --fix
}
pred inv6 {
    ~link.link in iden --fix
}
pred inv7 {
    no link.Trash --fix
}
pred inv8 {
    no link --fix
}
pred inv9 {
    no link.link --fix
}
pred inv10 {
    all t: Trash | t.link in Trash --fix
}
pred inv1_OK {
    no Trash --fix
}
assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

pred inv2_OK {
    File in Trash --fix
}
assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

pred inv3_OK {
    some Trash --fix
}
assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

pred inv4_OK {
    no Protected & Trash --fix
}
assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}

pred inv5_OK {
    File-Protected in Trash --fix
}
assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

pred inv6_OK {
    ~link.link in iden --fix
}
assert inv6_Repaired {
    inv6[] iff inv6_OK[]
}

pred inv7_OK {
    no link.Trash --fix
}
assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}

pred inv8_OK {
    no link --fix
}
assert inv8_Repaired {
    inv8[] iff inv8_OK[]
}

pred inv9_OK {
    no link.link --fix
}
assert inv9_Repaired {
    inv9[] iff inv9_OK[]
}

pred inv10_OK {
    all t: Trash | t.link in Trash --fix
}
assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}

check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0

pred repair_pred_1{
    inv5[] iff inv5_OK[]
}
run repair_pred_1
assert repair_assert_1{
    inv5[] iff inv5_OK[]
}
check repair_assert_1