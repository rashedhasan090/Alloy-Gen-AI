sig Person {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    all p : Person | p in Student implies p not in Teacher
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person = Student + Teacher
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher in Teaches.PrimClass
}

pred inv7 {
    Class in Teacher.Teaches
}

pred inv8 {
    all t : Teacher | lone t.Teaches
}

pred inv9 {
    all c : Class | lone Teaches[c] & Teacher
}

pred inv10 {
    all c : Class, s : Student |
        some g : Group | g = c.Groups[s]
}

pred inv11 {
    all c : Class | (some c.Groups) implies (some t : Teacher | t.Teaches = c)
}

pred inv12 {
    all t : Teacher | some g : t.Teaches.Groups
}

pred inv13 {
    all p : Person | p.Tutors in Student implies p in Teacher and p.Tutors in Teacher
}

pred inv14 {
    all s : Person, c : Class, t : Person, g : Group |
        (c -> s -> g) in Class.Groups and t -> c in Teaches implies t -> s in Tutors
}

pred inv15 {
    all s : Person | some t : Teacher | s.Tutors = ^t
}

assert inv1_Repaired {
    all p : Person | p in Student implies p not in Teacher
}

assert inv2_Repaired {
    no Teacher
}

assert inv3_Repaired {
    no Student & Teacher
}

assert inv4_Repaired {
    Person = Student + Teacher
}

assert inv5_Repaired {
    some Teacher.Teaches
}

assert inv6_Repaired {
    Teacher in Teaches.PrimClass
}

assert inv7_Repaired {
    Class in Teacher.Teaches
}

assert inv8_Repaired {
    all t : Teacher | lone t.Teaches
}

assert inv9_Repaired {
    all c : Class | lone Teaches[c] & Teacher
}

assert inv10_Repaired {
    all c : Class, s : Student |
        some g : Group | g = c.Groups[s]
}

assert inv11_Repaired {
    all c : Class | (some c.Groups) implies (some t : Teacher | t.Teaches = c)
}

assert inv12_Repaired {
    all t : Teacher | some g : t.Teaches.Groups
}

assert inv13_Repaired {
    all p : Person | p.Tutors in Student implies p in Teacher and p.Tutors in Teacher
}

assert inv14_Repaired {
    all s : Person, c : Class, t : Person, g : Group |
        (c -> s -> g) in Class.Groups and t -> c in Teaches implies t -> s in Tutors
}

assert inv15_Repaired {
    all s : Person | some t : Teacher | s.Tutors = ^t
}

`check inv1_Repaired expect 0`
`check inv2_Repaired expect 0`
`check inv3_Repaired expect 0`
`check inv4_Repaired expect 0`
`check inv5_Repaired expect 0`
`check inv6_Repaired expect 0`
`check inv7_Repaired expect 0`
`check inv8_Repaired expect 0`
`check inv9_Repaired expect 0`
`check inv10_Repaired expect 0`
`check inv11_Repaired expect 0`
`check inv12_Repaired expect 0`
`check inv13_Repaired expect 0`
`check inv14_Repaired expect 0`
`check inv15_Repaired expect 0`