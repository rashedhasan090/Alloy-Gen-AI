'---------------------\n'
'sig Person {\n'
'  Tutors : set Person,\n'
'  Teaches : set Class\n'
'}\n'
'sig Group {}\n'
'sig Class {\n'
'  Groups : Person -> Group\n'
'}\n'
'sig Teacher extends Person {}\n'
'sig Student extends Person {}\n'
'pred inv1 {\n'
'  all s : Student | s in Person\n'
'}\n'
'pred inv2 {\n'
'  no t : Teacher | t in Person\n'
'}\n'
'pred inv3 {\n'
'  no s : Student & t : Teacher | s in t or t in s\n'
'}\n'
'pred inv4 {\n'
'  all s: Student | s in Person\n'
'}\n'
'pred inv5 {\n'
'  some t : Teacher | t.Teaches != {}\n'
'}\n'
'pred inv6 {\n'
'  all t : Teacher | t in Teaches.Class\n'
'}\n'
'pred inv7 {\n'
'  all c : Class, t : Teacher | c in t.Teaches <=> t in Teaches.c\n'
'}\n'
'pred inv8 {\n'
'  all t : Teacher | lone t.Teaches\n'
'}\n'
'pred inv9 {\n'
'  all c : Class | lone s : Student | s in c.Groups implies some t : Teacher | t.Teaches = c and t in s.Tutors\n'
'}\n'
'pred inv10 {\n'
'  all c : Class | some s : Student | s in c.Groups\n'
'}\n'
'pred inv11 {\n'
'  all c : Class | some g : c.Groups | some t : Teacher | t.Teaches = c and t in g.Person\n'
'}\n'
'pred inv12 {\n'
'  all t : Teacher | some g : t.Teaches.Groups | g.Person = t\n'
'}\n'
'pred inv13 {\n'
'  all t : Teacher, s : Student | s in t.Tutors implies t in s.Tutors.Teacher\n'
'}\n'
'pred inv14 {\n'
'  all s : Student, c : Class, g : Group | c->s->g in Groups implies some t : Teacher | t.Teaches = c and t->s in Tutors\n'
'}\n'
'pred inv15 {\n'
'  all s : Person | some t : Teacher | t in ^s.Tutors\n'
'}\n'
'pred inv1_OK {\n'
'  all s : Student | s in Person\n'
'}\n'
'assert inv1_Repaired {\n'
'  inv1[] iff inv1_OK[]\n'
'}\n'
'pred inv2_OK {\n'
'  no t : Teacher | t in Person\n'
'}\n'
'assert inv2_Repaired {\n'
'  inv2[] iff inv2_OK[]\n'
'}\n'
'pred inv3_OK {\n'
'  no s : Student & t : Teacher | s in t or t in s\n'
'}\n'
'assert inv3_Repaired {\n'
'  inv3[] iff inv3_OK[]\n'
'}\n'
'pred inv4_OK {\n'
'  all s : Student | s in Person\n'
'}\n'
'assert inv4_Repaired {\n'
'  inv4[] iff inv4_OK[]\n'
'}\n'
'pred inv5_OK {\n'
'  some t : Teacher | t.Teaches != {}\n'
'}\n'
'assert inv5_Repaired {\n'
'  inv5[] iff inv5_OK[]\n'
'}\n'
'pred inv6_OK {\n'
'  all t : Teacher | t in Teaches.Class\n'
'}\n'
'assert inv6_Repaired {\n'
'  inv6[] iff inv6_OK[]\n'
'}\n'
'pred inv7_OK {\n'
'  all c : Class, t : Teacher | c in t.Teaches <=> t in Teaches.c\n'
'}\n'
'assert inv7_Repaired {\n'
'  inv7[] iff inv7_OK[]\n'
'}\n'
'pred inv8_OK {\n'
'  all t : Teacher | lone t.Teaches\n'
'}\n'
'assert inv8_Repaired {\n'
'  inv8[] iff inv8_OK[]\n'
'}\n'
'pred inv9_OK {\n'
'  all c : Class | lone s : Student | s in c.Groups implies some t : Teacher | t.Teaches = c and t in s.Tutors\n'
'}\n'
'assert inv9_Repaired {\n'
'  inv9[] iff inv9_OK[]\n'
'}\n'
'pred inv10_OK {\n'
'  all c : Class | some s : Student | s in c.Groups\n'
'}\n'
'assert inv10_Repaired {\n'
'  inv10[] iff inv10_OK[]\n'
'}\n'
'pred inv11_OK {\n'
'  all c : Class | some g : c.Groups | some t : Teacher | t.Teaches = c and t in g.Person\n'
'}\n'
'assert inv11_Repaired {\n'
'  inv11[] iff inv11_OK[]\n'
'}\n'
'pred inv12_OK {\n'
'  all t : Teacher | some g : t.Teaches.Groups | g.Person = t\n'
'}\n'
'assert inv12_Repaired {\n'
'  inv12[] iff inv12_OK[]\n'
'}\n'
'pred inv13_OK {\n'
'  all t : Teacher, s : Student | s in t.Tutors implies t in s.Tutors.Teacher\n'
'}\n'
'assert inv13_Repaired {\n'
'  inv13[] iff inv13_OK[]\n'
'}\n'
'pred inv14_OK {\n'
'  all s : Student, c : Class, g : Group | c->s->g in Groups implies some t : Teacher | t.Teaches = c and t->s in Tutors\n'
'}\n'
'assert inv14_Repaired {\n'
'  inv14[] iff inv14_OK[]\n'
'}\n'
'pred inv15_OK {\n'
'  all s : Person | some t : Teacher | t in ^s.Tutors\n'
'}\n'
'assert inv15_Repaired {\n'
'  inv15[] iff inv15_OK[]\n'
'}\n'
'-- PerfectOracleCommands\n'
'check inv1_Repaired expect 0\n'
'check inv2_Repaired expect 0\n'
'check inv3_Repaired expect 0\n'
'check inv4_Repaired expect 0\n'
'check inv5_Repaired expect 0\n'
'check inv6_Repaired expect 0\n'
'check inv7_Repaired expect 0\n'
'check inv8_Repaired expect 0\n'
'check inv9_Repaired expect 0\n'
'check inv10_Repaired expect 0\n'
'check inv11_Repaired expect 0\n'
'check inv12_Repaired expect 0\n'
'check inv13_Repaired expect 0\n'
'check inv14_Repaired expect 0\n'
'check inv15_Repaired expect 0\n'