sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class  {
    Groups : Person -> Group
}
sig Teacher extends Person  {}
sig Student extends Person  {}
pred inv1 {
    Student in Person 
}
pred inv2 {
    no Teacher
}
pred inv3 {
    no (Student & Teacher)
}
pred inv4 {
    Person in (Student + Teacher)
}
pred inv5 {
    some Teacher.Teaches
}
pred inv6 {
    Teacher.Teaches in Class
}
pred inv7 {
    Class in Teacher.Teaches
}
pred inv8 {
    all t:Teacher | lone t.Teaches
}
pred inv9 {
    all c:Class | lone (Teaches.c & Teacher)
}
pred inv10 {
    all c:Class, s:Student | some g:Group | c->s->g in Class.Groups
}
pred inv11 {
    all c:Class, g:Group | some t:Teacher | c->t->g in Class.Groups
}
pred inv12 {
    all t:Teacher | some (t.Teaches).Groups
}
pred inv13 {
    Teacher.Tutors in Teacher
    Student.Tutors in Teacher
}
pred inv14 {
    all s:Student, c:Class, t:Teacher, g:Group | c->s->g in Class.Groups and t->c in Teacher.Teaches implies t->s in Student.Tutors
}
pred inv15 {
    all s:Person | some t:Teacher | t in ^s.Tutors
}

run { 
    check inv1 
    check inv2 
    check inv3 
    check inv4 
    check inv5 
    check inv6 
    check inv7 
    check inv8 
    check inv9 
    check inv10 
    check inv11 
    check inv12 
    check inv13 
    check inv14 
    check inv15 
} for 5 but 5 Class, 5 Group, 5 Person, 5 Teacher, 5 Student