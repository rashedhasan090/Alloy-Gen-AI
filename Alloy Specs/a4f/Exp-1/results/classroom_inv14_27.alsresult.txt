sig Person  {
    Tutors : set Person,
    Teaches : set Class
}
sig Group {}
sig Class {
    Groups : Person -> Group
}
sig Teacher extends Person {}
sig Student extends Person {}
pred inv1 {
    Student in Person
}
pred inv2 {
    no Teacher
}
pred inv3 {
    no (Student & Teacher)
}
pred inv4 {
    Person in (Student + Teacher)
}
pred inv5 {
    some Teacher.Teaches
}
pred inv6 {
    Teacher.Teaches in Class
}
pred inv7 {
    all c : Class | c in Teacher.Teaches
}
pred inv8 {
    all t : Teacher | lone t.Teaches
}
pred inv9 {
    all c : Class | (lone Teaches[c]) implies Teacher in Teaches[c]
}
pred inv10 {
    all c : Class, s : Student | s in c.Groups.Group implies some t : Teacher | t -> c in Teaches and t in s.^Tutors
}
pred inv11 {
    all c : Class | (some c.Groups) implies some t : Teacher | t -> c in Teaches
}
pred inv12 {
    all t : Teacher | some g : (t.Teaches).Groups | g in (Student.tutors).Group
}
pred inv13 {
    Tutors.Person in Teacher and Tutors.Person in Student
}
pred inv14 {
    all s : Student, c : Class | c.s in Groups.Group implies some t : Teacher | t -> c in Teaches and t in s.^Tutors
}
pred inv15 {
    all s : Person | some t : Teacher | t.Teaches.s
}

run {} for 10

// repairs inv14 by replacing "->" with "in"
pred repair_pred_1 {
    all s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors
    all s : Person, c : Class | c.s in Groups.Group implies some t : Teacher | t in c.Teaches and t in s.^Tutors
}

run repair_pred_1

assert repair_assert_1 {
    all s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Groups) and t -> c in Teaches iff t -> s in Tutors
}

check repair_assert_1

check inv1
check inv2
check inv3
check inv4
check inv5
check inv6
check inv7
check inv8
check inv9
check inv10
check inv11
check inv12
check inv13
check inv14
check inv15
```