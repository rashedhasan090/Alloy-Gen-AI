sig Person {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class {
    Groups : Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher.Teaches in Class
}

pred inv7 {
    Class in Teacher.Teaches
}

pred inv8 {
    all t : Teacher | lone t.Teaches
}

pred inv9 {
    all c : Class | lone (Teaches.c & Teacher)
}

pred inv10 {
    all c : Class | some s : Student | s -> c in Groups
}

pred inv11 {
    all c : Class | (some c.Groups) implies (some t : Teacher | t.Teaches = c)
}

pred inv12 {
    all t : Teacher | some g : Group | g in (t.Teaches).Groups
}

pred inv13 {
    all t : Teacher, s : Student | t in s.Tutors implies t in Teacher and s in Student
}

pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | c -> s -> g in Groups and t -> c in Teaches 
    implies t -> s in Tutors
}

pred inv15 {
    all s : Person | some t : Teacher | t in ^s.Tutors
}

pred inv10_OK {
    all c : Class | some s : Student | s -> c in Groups
}

assert inv10_Repaired {
    inv10 [] iff inv10_OK []
}

check inv10_Repaired expect 0.