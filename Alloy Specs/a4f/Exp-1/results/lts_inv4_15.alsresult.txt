One possible fixed code:

// A labeled transition system (LTS) is comprised by States, a sub-set
// of which are Initial, connected by transitions, here represented by
// Events.
sig State {
        trans : Event -> State
}
sig Init in State {}
sig Event {}

// The LTS does not contain deadlocks, ie, each state has at least a
// transition.
pred inv1 {
    all s: State | some s.trans
}

// There is a single initial state.
pred inv2 {
    one s : Init
}

// The LTS is deterministic, ie, each state has at most a transition for each event.
pred inv3 {
    all s : State, e : Event | lone s.trans[e]
}

// All states are reachable from an initial state.
pred inv4 {
    let tr = { s1, s2 : State, e : Event | s1.trans[e] = s2 } |
    all s : State | some i : Init | i in s.^tr
}

// All the states have the same events available.
pred inv5 {
    all s: State, s1: State | s.trans.Event = s1.trans.Event
}

// Each event is available in at least a state.
pred inv6 {
    all e:Event | some s1,s2:State | s1.trans[e] = s2
}

// The LTS is reversible, ie, from a reacheable state it is always possible
// to return to an initial state.
pred inv7 {
    let tr = { s1, s2 : State, e : Event | s1.trans[e] = s2 } |
    all s : Init.^tr | some i : Init | i in s.^tr
}

// PerfectOracleCommands
check inv1 expect 0
check inv2 expect 0
check inv3 expect 0 
check inv4 expect 0
check inv5 expect 0
check inv6 expect 0
check inv7 expect 0