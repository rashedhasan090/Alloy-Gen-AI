sig Person {
    Tutors: set Person,
    Teaches: set Class
}

sig Group {}

sig Class {
    Groups: Person -> Group
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Student in Person
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in Student + Teacher
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher.Teaches in Class
}

pred inv7 {
    all t: Teacher | t.Teaches in Class
}

pred inv8 {
    all t:Teacher | lone t.Teaches
}

pred inv9 {
    all c:Class | lone Teaches[c] & Teacher
}

pred inv10 {
    all c:Class, s:Student | some c.Groups[s]
}

pred inv11 {
    all c:Class | (some c.Groups) implies some t:Teacher | t.Teaches = c
}

pred inv12 {
    all t:Teacher | some g:Group | g in (t.Teaches).Groups
}

pred inv13 {
    all t:Teacher, s:Student | s in t.Tutors implies t in s.Teaches
}

pred inv14 {
    all s:Person, c:Class, t:Person, g:Group | (c->s->g in Class.Groups) and (t->c in Teacher.Teaches) implies t->s in Person.Tutors
}

pred inv15 {
    all s:Person | some t:Teacher & s.Tutors=t
}

/* repair predicate for inv7 */
pred inv7_OK {
    all t: Teacher | t.Teaches in Class
}

assert inv7_Repaired {
    inv7[] iff inv7_OK[]
} 

/* check all invariants */
check inv1[] expect 0
check inv2[] expect 0
check inv3[] expect 0 
check inv4[] expect 0
check inv5[] expect 0
check inv6[] expect 0
check inv7_Repaired expect 0
check inv8[] expect 0
check inv9[] expect 0
check inv10[] expect 0
check inv11[] expect 0
check inv12[] expect 0
check inv13[] expect 0
check inv14[] expect 0
check inv15[] expect 0