The bug in this specification is in the pred inv6. The correct predicate should be:

pred inv6 {
    all e : Event | some s1 : State | e in s1.trans
} 

Here is the full fixed code:

// A labeled transition system (LTS) is comprised by states, a sub-set
// of which are Initial, connected by transitions, here represented by 
// events.
sig State {
    trans : Event -> State
}

// There is a single initial state.
one sig Init in State {}

// An event is defined simply as a label of a transition.
sig Event {}

// The LTS does not contain deadlocks, i.e., each state has at least a 
// transition.
pred inv1 {
    all s : State | some s.trans
}

// The LTS is deterministic, i.e., each state has at most a transition for each event.
pred inv2 {
    all s : State, e : Event | lone e.(s.trans)
}

// All states are reachable from an initial state.
pred inv3 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    State in Init.^tr
}

// All the states have the same events available.
pred inv4 {
    all s, s1 : State | s.trans.State = s1.trans.State
}

// Each event is available in at least a state.
pred inv5 {
    all e : Event | some s1 : State | e in s1.trans
}

// The LTS is reversible, i.e., from a reachable state it is always possible 
// to return to an initial state.
pred inv7 {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    all s : Init.^tr | some i : Init | i in s.^tr
}

pred inv1_OK {
    all s : State | some s.trans
}

assert inv1_Repaired {
    inv1 [] iff inv1_OK []
}

pred inv2_OK {
    one Init
}

assert inv2_Repaired {
    inv2 [] iff inv2_OK []
}

pred inv3_OK {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    State in Init.^tr
}

assert inv3_Repaired {
    inv3 [] iff inv3_OK []
}

pred inv4_OK {
    all s, s1 : State | s.trans.State = s1.trans.State
}

assert inv4_Repaired {
    inv4 [] iff inv4_OK []
}

pred inv5_OK {
    all e : Event | some s1 : State | e in s1.trans
}

assert inv5_Repaired {
    inv5 [] iff inv5_OK []
}

pred inv7_OK {
    let tr = { s1, s2 : State | some e : Event | s1->e->s2 in trans } |
    all s : Init.^tr | some i : Init | i in s.^tr
}

assert inv7_Repaired {
    inv7 [] iff inv7_OK []
}

// PerfectOracleCommands
check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0 
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv7_Repaired expect 0

pred repair_pred_1{
    inv2 [] iff inv2_OK []
}

run repair_pred_1

assert repair_assert_1{
    inv2 [] iff inv2_OK []
}

check repair_assert_1