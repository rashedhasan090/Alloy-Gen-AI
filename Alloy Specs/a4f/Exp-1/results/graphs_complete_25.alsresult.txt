sig Node {
   adj : set Node
}

pred undirected {
   adj = ~adj
}

pred oriented {
   no adj & ~adj
}

pred acyclic {
   all a: Node | a not in a.^adj
}

pred complete {
   all n: Node | n in Node.adj &&
   all m: Node | m != n => m in n.adj
}

pred noLoops {
   no iden & adj
}

pred weaklyConnected {
   all n: Node | all m: Node | Node in n.*(adj+~adj) & m in n.*(adj+~adj)
}

pred stronglyConnected {
   all n: Node | all m: Node | Node in n.*adj & m in n.*adj
}

pred transitive {
   all n: Node | all m: Node | all l: Node | (m in n.adj && l in m.adj) => l in n.adj 
}

pred undirectedOK {
   adj = ~adj
}

assert undirectedRepaired {
   undirected[] iff undirectedOK[]
}

pred orientedOK {
   no adj & ~adj
}

assert orientedRepaired {
   oriented[] iff orientedOK[]
}

pred acyclicOK {
   all a:Node | a not in a.^adj
}

assert acyclicRepaired {
   acyclic[] iff acyclicOK[]
}

pred completeOK {
   all n:Node | all m:Node | n!=m => m in n.adj
}

assert completeRepaired {
   complete[] iff completeOK[]
}

pred noLoopsOK {
   no iden & adj
}

assert noLoopsRepaired {
   noLoops[] iff noLoopsOK[]
}

pred weaklyConnectedOK {
   all n:Node | all m:Node | Node in n.*(adj+~adj) => m in n.*(adj+~adj)
}

assert weaklyConnectedRepaired {
   weaklyConnected[] iff weaklyConnectedOK[]
}

pred stronglyConnectedOK {
   all n:Node | all m:Node | (Node in n.*adj) && (m in n.*adj)
}

assert stronglyConnectedRepaired {
   stronglyConnected[] iff stronglyConnectedOK[]
}

pred transitiveOK {
   all n:Node | all m:Node | all l:Node | (m in n.adj && l in m.adj) => l in n.adj
}

assert transitiveRepaired {
   transitive[] iff transitiveOK[]
}

check undirectedRepaired expect 0
check orientedRepaired expect 0
check acyclicRepaired expect 0
check completeRepaired expect 0
check noLoopsRepaired expect 0
check weaklyConnectedRepaired expect 0
check stronglyConnectedRepaired expect 0
check transitiveRepaired expect 0

pred repair_pred_1 {
   complete[] iff completeOK[]
}

run repair_pred_1

assert repair_assert_1 {
   complete[] iff completeOK[]
}

check repair_assert_1