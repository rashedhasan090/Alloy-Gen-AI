abstract sig Source {}

sig User extends Source {
    profile : set Work,
    visible : set Work
}

sig Institution extends Source {}

sig Id {}

sig Work {
    ids : some Id,
    source : one Source
}

pred inv1 {
    all u:User | u.visible in u.profile --correct
}

pred inv2 {
    all u:User, w:Work | w in u.profile implies (u.source = w.source or some i:Institution | i in w.source) --fixed
}

pred inv3 {
    all w:Work, w1:Work | (w in User.profile && w1 in User.profile && w.source = w1.source) implies no (w.ids & w1.ids) --fixed
}

pred inv1_OK {
    all u:User | u.visible in u.profile --correct
}

assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

pred inv2_OK {
    all u:User, w:Work | w in u.profile implies (u.source = w.source or some i:Institution | i in w.source) --correct
}

assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

pred inv3_OK {
    all w:Work, w1:Work | (w in User.profile && w1 in User.profile && w.source = w1.source) implies no (w.ids & w1.ids) --correct
}

assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

-- PerfectOracleCommands
check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0

pred repair_pred_1{inv3[] iff inv3_OK[] }

run repair_pred_1

assert repair_assert_1{inv3[] iff inv3_OK[] }

check repair_assert_1