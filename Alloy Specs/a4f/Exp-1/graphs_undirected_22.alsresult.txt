Here is the corrected code:

sig Node {
    adj : set Node
}

pred undirected {
    adj = ~adj
}

pred oriented {
    no adj & ~adj
}

pred acyclic {
    all a:Node | a not in a.^adj
}

pred complete {
    all n:Node | Node in n.adj
}

pred noLoops {
    no (iden & adj)
}

pred weaklyConnected {
    all n:Node | Node in n.*(adj+~adj)
}

pred stronglyConnected {
    all n:Node | Node in n.*adj
}

pred transitive {
    adj.adj in adj
}

check undirected expect 0
check oriented expect 0
check acyclic expect 0
check complete expect 0
check noLoops expect 0
check weaklyConnected expect 0
check stronglyConnected expect 0
check transitive expect 0