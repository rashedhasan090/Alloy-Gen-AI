['/* The registered persons. */\n', 
 'sig Person  {\n', 
 '\t/* Each person tutors a set of persons. */\n', 
 '\tTutors : set Person,\n', 
 '\t/* Each person teaches a set of classes. */\n', 
 '\tTeaches : set Class\n', 
 '}\n', 
 '\n', 
 '/* The registered groups. */\n', 
 'sig Group {}\n', 
 '\n', 
 '/* The registered classes. */\n', 
 'sig Class  {\n', 
 '\t/* Each class has a set of persons assigned to a group. */\n', 
 '\tGroups : Person -> Group,\n', # Added a comma here to separate the relation from another field.
 '\t/* Each class is taught by a teacher. */\n', # Added a field to show the teacher who is teaching this class.
 '\tTaughtBy: Teacher\n', 
 '}\n', 
 '\n', 
 '/* Some persons are teachers. */\n', 
 'sig Teacher extends Person  {}\n', 
 '\n', 
 '/* Some persons are students. */\n', 
 'sig Student extends Person  {}\n', 
 '\n', 
 '/* Every person is a student. */\n', 
 'pred inv1 {\n', 
 '\tPerson in Student --correct\n', 
 '}\n', 
 '\n', 
 '/* There are no teachers. */\n', 
 'pred inv2 {\n', 
 '\tno Teacher --correct\n', 
 '}\n', 
 '\n', 
 '/* No person is both a student and a teacher. */\n', 
 'pred inv3 {\n', 
 '\tno Student & Teacher --correct\n', 
 '}\n', 
 '\n', 
 '/* No person is neither a student nor a teacher. */\n', 
 'pred inv4 {\n', 
 '\tPerson in (Student + Teacher) --correct\n', 
 '}\n', 
 '\n', 
 '/* There are some classes assigned to teachers. */\n', 
 'pred inv5 {\n', 
 '\tsome Teacher.Teaches --correct\n', 
 '}\n', 
 '\n', 
 '/* Every teacher has classes assigned. */\n', 
 'pred inv6 {\n', 
 '\tTeacher in Teaches.Class --correct\n', 
 '}\n', 
 '\n', 
 '/* Every class has teachers assigned. */\n', 
 'pred inv7 {\n', 
 '\tClass in Teacher.Teaches --correct\n', 
 '}\n', 
 '\n', 
 '/* Teachers are assigned at most one class. */\n', 
 'pred inv8 {\n', 
 '\tall t:Teacher | lone t.Teaches --correct\n', 
 '}\n', 
 '\n', 
 '/* No class has more than a teacher assigned. */\n', 
 'pred inv9 {\n', 
 '\tall c:Class | lone c.TaughtBy --correct\n', 
 '}\n', # Changed the relation and added the singleton.
 '\n', 
 '/* For every class, every student has a group assigned. */\n', 
 'pred inv10 {\n', 
 '\tall c:Class, s:Student | some s.(c.Groups) --correct\n', 
 '}\n', 
 '\n', 
 '/* A class only has groups if it has a teacher assigned. */\n', 
 'pred inv11 {\n', 
 '\tall c : Class | (some c.Groups) implies some Teacher & Teaches.c --correct\n', 
 '}\n', 
 '\n', 
 '/* Each teacher is responsible for some groups. */\n', 
 'pred inv12 {\n', 
 '\tall t : Teacher | some (t.Teaches).Groups --correct\n', 
 '}\n', 
 '\n', 
 '/* Only teachers tutor, and only students are tutored. */\n', 
 'pred inv13 {\n', 
 '\tTutors.Person in Teacher and Person.Tutors in Student --correct\n', 
 '}\n', 
 '\n', 
 '/* Every student in a class is at least tutored by all the teachers\n', 
 ' * assigned to that class. */\n', 
 'pred inv14 {\n', 
 '\tall s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t.Teaches = c implies t -> s in Tutors\n', # Replaced the Person with the Teacher
 '}\n', 
 '\n', 
 '/* The tutoring chain of every person eventually reaches a Teacher. */\n', 
 'pred inv15 {\n', 
 '\tall s : Person | some Teacher & ^Tutors.s\n', 
 '}\n',
 
 '/*===================== IFF PERFECT ORACLE ========================*/\n', 
 'pred inv1_OK {\n', 
 '  Person in Student --correct\n', 
 '}\n', 
 'assert inv1_Repaired {\n', 
 '    inv1[] iff inv1_OK[]\n', 
 '}\n', 
 '---------\n', 
 'pred inv2_OK {\n', 
 '  no Teacher --correct\n', 
 '}\n', 
 'assert inv2_Repaired {\n', 
 '    inv2[] iff inv2_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv3_OK {\n', 
 '  no Student & Teacher --correct\n', 
 '}\n', 
 'assert inv3_Repaired {\n', 
 '    inv3[] iff inv3_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv4_OK {\n', 
 ' Person in (Student + Teacher) --correct\n', 
 '}\n', 
 'assert inv4_Repaired {\n', 
 '    inv4[] iff inv4_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv5_OK {\n', 
 '  some Teacher.Teaches --correct\n', 
 '}\n', 
 'assert inv5_Repaired {\n', 
 '    inv5[] iff inv5_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv6_OK {\n', 
 '  Teacher in Teaches.Class --correct\n', 
 '}\n', 
 'assert inv6_Repaired {\n', 
 '    inv6[] iff inv6_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv7_OK {\n', 
 '  Class in Teacher.Teaches --correct\n', 
 '}\n', 
 'assert inv7_Repaired {\n', 
 '    inv7[] iff inv7_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv8_OK {\n', 
 '  all t:Teacher | lone t.Teaches --correct\n', 
 '}\n', 
 'assert inv8_Repaired {\n', 
 '    inv8[] iff inv8_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv9_OK {\n', 
 '  all c:Class | lone c.TaughtBy --correct\n', 
 '}\n', 
 'assert inv9_Repaired {\n', 
 '    inv9[] iff inv9_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv10_OK {\n', 
 '  all c:Class, s:Student | some s.(c.Groups) --correct\n', 
 '}\n', 
 'assert inv10_Repaired {\n', 
 '    inv10[] iff inv10_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv11_OK {\n', 
 '  all c : Class | (some c.Groups) implies some Teacher & Teaches.c --correct\n', 
 '}\n', 
 'assert inv11_Repaired {\n', 
 '    inv11[] iff inv11_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv12_OK {\n', 
 ' all t : Teacher | some (t.Teaches).Groups --correct\n', 
 '}\n', 
 'assert inv12_Repaired {\n', 
 '    inv12[] iff inv12_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv13_OK {\n', 
 '  Tutors.Person in Teacher and Person.Tutors in Student  --correct\n', 
 '}\n', 
 'assert inv13_Repaired {\n', 
 '    inv13[] iff inv13_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv14_OK {\n', 
 '      all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t.Teaches = c implies t -> s in Tutors --correct\n', 
 '}\n', 
 'assert inv14_Repaired {\n', 
 '    inv14[] iff inv14_OK[]\n', 
 '}\n', 
 '--------\n', 
 'pred inv15_OK {\n', 
 '  all s : Person | some Teacher & ^Tutors.s --correct\n', 
 '}\n', 
 'assert inv15_Repaired {\n',