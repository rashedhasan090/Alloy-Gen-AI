['/* The registered persons. */\n', 
 'sig Person  {\n', 
 '\t/* Each person tutors a set of persons. */\n', 
 '\tTutors : set Person,\n', 
 '\t/* Each person teaches a set of classes. */\n', 
 '\tTeaches : set Class\n', 
 '}\n',
 '\n', 
 '/* The registered groups. */\n', 
 'sig Group {}\n', 
 '\n', 
 '/* The registered classes. */\n', 
 'sig Class  {\n', 
 '\t/* Each class has a set of persons assigned to a group. */\n', 
 '\tGroups : Person -> Group,\n', 
 '\t/* Each class has a set of teachers assigned to it. */\n', 
 '\tHas_teacher : set Teacher\n',
 '}\n', 
 '\n', 
 '/* Some persons are teachers. */\n', 
 'sig Teacher extends Person  {}\n', 
 '\n', 
 '/* Some persons are students. */\n', 
 'sig Student extends Person  {}\n', 
 '\n', 
 '/* Every person is a student. */\n', 
 'pred inv1 {\n', 
 '\tPerson in Student --correct\n', 
 '}\n', 
 '\n', 
 '/* There are no teachers. */\n', 
 'pred inv2 {\n', 
 '\tno Teacher --correct\n', 
 '}\n', 
 '\n', 
 '/* No person is both a student and a teacher. */\n', 
 'pred inv3 {\n', 
 '\tno Student & Teacher --correct\n', 
 '}\n', 
 '\n', 
 '/* No person is neither a student nor a teacher. */\n', 
 'pred inv4 {\n', 
 '\tPerson in (Student + Teacher) --correct\n', 
 '}\n', 
 '\n', 
 '/* There are some classes assigned to teachers. */\n', 
 'pred inv5 {\n', 
 '\tsome Teacher.Teaches --correct\n', 
 '}\n', 
 '\n', 
 '/* Every teacher has classes assigned. */\n', 
 'pred inv6 {\n', 
 '\tTeacher in Teaches.Class --correct\n', 
 '}\n', 
 '\n', 
 '/* Every class has teachers assigned. */\n', 
 'pred inv7 {\n', 
 '\tClass in Teacher.Teaches --correct\n', 
 '}\n', 
 '\n', 
 '/* Teachers are assigned at most one class. */\n', 
 'pred inv8 {\n', 
 '\tall t:Teacher | lone t.Teaches --correct\n', 
 '}\n', 
 '\n', 
 '/* No class has more than one teacher assigned. */\n', 
 'pred inv9 {\n', 
 '\tall c:Class | lone c.Has_teacher --correct\n', 
 '}\n', 
 '\n', 
 '/* For every class, every student has a group assigned. */\n', 
 'pred inv10 {\n', 
 '\tall c:Class, s:Student | some s.(c.Groups) --correct\n', 
 '}\n', 
 '\n', 
 '/* A class only has groups if it has a teacher assigned. */\n', 
 'pred inv11 {\n', 
 '\tall c : Class | (some c.Groups) implies some Teacher & c.Has_teacher --correct\n', 
 '}\n', 
 '\n', 
 '/* Each teacher is responsible for some groups. */\n', 
 'pred inv12 {\n', 
 '\tall t : Teacher | some (t.Teaches).Groups --correct\n', 
 '}\n', 
 '\n', 
 '/* Only teachers tutor, and only students are tutored. */\n', 
 'pred inv13 {\n', 
 '\tTutors.Person in Teacher and Person.Tutors in Student --correct\n', 
 '}\n', 
 '\n', 
 '/* Every student in a class is at least tutored by all the teachers\n', 
 ' * assigned to that class. */\n', 
 'pred inv14 {\n', 
 '\tall s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors\n', 
 '}\n', 
 '\n', 
 '/* The tutoring chain of every person eventually reaches a Teacher. */\n', 
 'pred inv15 {\n', 
 '\tall s : Person | some Teacher & ^Tutors.s\n', 
 '}\n',
 '\n', 
 '/* Perfect Oracle Repairs */\n', 
 'pred inv3_OK {\n', 
 '  no Student & Teacher --correct\n', 
 '}\n', 
 'assert inv3_Repaired {\n', 
 '  inv3[] iff inv3_OK[]\n', 
 '}\n', 
 'check inv3_Repaired\n',
 '--- PerfectOracleCommands\n', 
 ' check inv1 expect 0\n', 
 ' check inv2 expect 0\n', 
 ' check inv3_Repaired expect 0\n', 
 ' check inv4 expect 0\n', 
 ' check inv5 expect 0\n', 
 ' check inv6 expect 0\n', 
 ' check inv7 expect 0\n', 
 ' check inv8 expect 0\n', 
 ' check inv9 expect 0\n', 
 ' check inv10 expect 0\n', 
 ' check inv11 expect 0\n', 
 ' check inv12 expect 0\n', 
 ' check inv13 expect 0\n', 
 ' check inv14 expect 0\n', 
 ' check inv15 expect 0\n']