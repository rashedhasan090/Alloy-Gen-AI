sig Person {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class {
    Groups : Person lone -> Group lone
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Person in Student
}

pred inv2 {
    no Teacher
}

pred inv3 {
    no Student & Teacher
}

pred inv4 {
    Person in (Student + Teacher)
}

pred inv5 {
    some Teacher.Teaches
}

pred inv6 {
    Teacher in Teaches.Class
}

pred inv7 {
    Class in Teacher.Teaches
}

pred inv8 {
    all t : Teacher | lone t.Teaches
}

pred inv9 {
    all c : Class | lone Teaches[c] & Teacher
}

pred inv10 {
    all c : Class | all s : Student | some g : Group | (s -> g in c.Groups) => (g in Person.Tutors[s])
}

pred inv11 {
    all c : Class | (some c.Groups) implies some t : Teacher | (t.Teaches = c)
}

pred inv12 {
    all t : Teacher | some c : t.Teaches | some g : c.Groups
}

pred inv13 {
    Teacher = Tutors.Person and Student = Person - Teacher
}

pred inv14 {
    all s : Student, c : Class | (some c.Teacher) => (s.Tutors & c.Teacher.Teaches = s.Teaches)
}

pred inv15 {
    all s : Person | some t : Teacher | t in ^s.Tutors
}

run check[] for 15 but exactly 0 Person, 0 Group, 0 Class, 0 Teacher, 0 Student, 0 Person.Tutors, 0 Person.Teaches, 0 Class.Groups, 0 Teacher.Teaches, 0 Class.Teaches expect 0
```