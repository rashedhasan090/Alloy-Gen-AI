['/* The registered persons. */\n', 'sig Person  {\n', '\t/* Each person tutors a set of persons. */\n', '\tTutors : set Person,\n', '\t/* Each person teaches a set of classes. */\n', '\tTeaches : set Class\n', '}\n', '\n', '/* The registered groups. */\n', 'sig Group {}\n', '\n', '/* The registered classes. */\n', 'sig Class  {\n', '\t/* Each class has a set of persons assigned to a group. */\n', '\tGroups : Person -> Group,\n', '\t/* Each class has a set of teachers assigned. */\n', '\tAssigned_Teachers : set Teacher\n', '}\n', '\n', '/* Some persons are teachers. */\n', 'sig Teacher extends Person  {}\n', '\n', '/* Some persons are students. */\n', 'sig Student extends Person  {}\n', '\n', '/* Every person is a student. */\n', 'pred inv1 {\n', '\tPerson in Student \n', '}\n', '\n', '/* There are no teachers. */\n', 'pred inv2 {\n', '\tno Teacher \n', '}\n', '\n', '/* No person is both a student and a teacher. */\n', 'pred inv3 {\n', '\tno Student & Teacher \n', '}\n', '\n', '/* No person is neither a student nor a teacher. */\n', 'pred inv4 {\n', '\tPerson in (Student + Teacher) \n', '}\n', '\n', '/* There are some classes assigned to teachers. */\n', 'pred inv5 {\n', '\tsome Teacher.Teaches \n', '}\n', '\n', '/* Every teacher has classes assigned. */\n', 'pred inv6 {\n', '\tTeacher in Teaches.Class \n', '}\n', '\n', '/* Every class has teachers assigned. */\n', 'pred inv7 {\n', '\tClass in Teacher.Teaches \n', '}\n', '\n', '/* Teachers are assigned at most one class. */\n', 'pred inv8 {\n', '\tall t:Teacher | lone t.Teaches \n', '}\n', '\n', '/* No class has more than a teacher assigned. */\n', 'pred inv9 {\n', '\tall c:Class | lone c.Assigned_Teachers \n', '}\n', '\n', '/* For every class, every student has a group assigned. */\n', 'pred inv10 {\n', '\tall c:Class, s:Student | some s.(c.Groups) \n', '}\n', '\n', '/* A class only has groups if it has a teacher assigned. */\n', 'pred inv11 {\n', '\tall c : Class | (some c.Groups) implies some t : Teacher | t.Teaches = c\n', '}\n', '\n', '/* Each teacher is responsible for some groups. */\n', 'pred inv12 {\n', '\tall t : Teacher | some c : t.Teaches | c.Groups.t = Group\n', '}\n', '\n', '/* Only teachers tutor, and only students are tutored. */\n', 'pred inv13 {\n', '\tTutors.Person in Teacher and Person.Tutors in Student \n', '}\n', '\n', '/* Every student in a class is at least tutored by all the teachers\n', ' * assigned to that class. */\n', 'pred inv14 {\n', '\tall s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t in c.Assigned_Teachers implies t -> s in Tutors\n', '}\n', '\n', '/* The tutoring chain of every person eventually reaches a Teacher. */\n', 'pred inv15 {\n', '\tall s : Person | some Teacher & ^Tutors.s\n', '}\n', '\n', '/** IFF PERFECT ORACLE **/\n', 'assert inv1_Repaired {\n', '    inv1[] iff (Person in Student)\n', '}\n', 'assert inv2_Repaired {\n', '    inv2[] iff (no Teacher)\n', '}\n', 'assert inv3_Repaired {\n', '    inv3[] iff (no Student & Teacher)\n', '}\n', 'assert inv4_Repaired {\n', '    inv4[] iff (Person in (Student + Teacher))\n', '}\n', 'assert inv5_Repaired {\n', '    inv5[] iff (some Teacher.Teaches)\n', '}\n', 'assert inv6_Repaired {\n', '    inv6[] iff (Teacher in Teaches.Class)\n', '}\n', 'assert inv7_Repaired {\n', '    inv7[] iff (Class in Teacher.Teaches)\n', '}\n', 'assert inv8_Repaired {\n', '    inv8[] iff all t : Teacher | lone t.Teaches\n', '}\n', 'assert inv9_Repaired {\n', '    inv9[] iff all c : Class | lone c.Assigned_Teachers\n', '}\n', 'assert inv10_Repaired {\n', '    inv10[] iff all c : Class, s : Student | some s.(c.Groups)\n', '}\n', 'assert inv11_Repaired {\n', '    inv11[] iff all c : Class | (some c.Groups) implies some t : Teacher | t.Teaches = c\n', '}\n', 'assert inv12_Repaired {\n', '    inv12[] iff all t : Teacher | some c : t.Teaches | c.Groups.t = Group\n', '}\n', 'assert inv13_Repaired {\n', '    inv13[] iff (Tutors.Person in Teacher and Person.Tutors in Student)\n', '}\n', 'assert inv14_Repaired {\n', '    inv14[] iff all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t in c.Assigned_Teachers implies t -> s in Tutors\n', '}\n', 'assert inv15_Repaired {\n', '    inv15[] iff all s : Person | some Teacher & ^Tutors.s\n', '}\n', '\n', '/** PERFECT ORACLE COMMANDS **/\n', 'check inv1_Repaired\n', 'check inv2_Repaired\n', 'check inv3_Repaired\n', 'check inv4_Repaired\n', 'check inv5_Repaired\n', 'check inv6_Repaired\n', 'check inv7_Repaired\n', 'check inv8_Repaired\n', 'check inv9_Repaired\n', 'check inv10_Repaired\n', 'check inv11_Repaired\n', 'check inv12_Repaired\n', 'check inv13_Repaired\n', 'check inv14_Repaired\n', 'check inv15_Repaired\n']