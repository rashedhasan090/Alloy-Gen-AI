The fixed code is:

sig Node {
    adj: set Node
}

pred undirected {
    adj = ~adj //fixed
}

pred oriented {
    no adj & ~adj //fixed
}

pred acyclic {
    all a: Node | a not in a.^adj //fixed
}

pred complete {
    all n: Node | all m: Node - n | n in m.adj //fixed
}

pred noLoops {
    no (iden & adj)
}

pred weaklyConnected {
    all n: Node | all m: Node | n != m => (n in m.*(adj+~adj)) //fixed
}

pred stronglyConnected {
    all n: Node | all m: Node | n != m => (n in m.*adj and m in n.*adj) //fixed
}

pred transitive {
    adj.adj in adj
}

/* Perfect Oracle */

pred undirectedOK {
    adj = ~adj
}

assert undirectedRepaired {
    undirected[] iff undirectedOK[]
}

pred orientedOK {
    no adj & ~adj 
}

assert orientedRepaired {
    oriented[] iff orientedOK[]
}

pred acyclicOK {
    all a: Node | a not in a.^adj
}

assert acyclicRepaired {
    acyclic[] iff acyclicOK[]
}

pred completeOK {
    all n: Node | all m: Node - n | n in m.adj
}

assert completeRepaired {
    complete[] iff completeOK[]
}

pred noLoopsOK {
    no (iden & adj)
}

assert noLoopsRepaired {
    noLoops[] iff noLoopsOK[]
}

pred weaklyConnectedOK {
    all n: Node | all m: Node | n != m => (n in m.*(adj+~adj))
}

assert weaklyConnectedRepaired {
    weaklyConnected[] iff weaklyConnectedOK[]
}

pred stronglyConnectedOK {
    all n: Node | all m: Node | n != m => (n in m.*adj and m in n.*adj)
}

assert stronglyConnectedRepaired {
    stronglyConnected[] iff stronglyConnectedOK[]
}

pred transitiveOK {
    adj.adj in adj
}

assert transitiveRepaired {
    transitive[] iff transitiveOK[]
}

check undirectedRepaired expect 0
check orientedRepaired expect 0
check acyclicRepaired expect 0
check completeRepaired expect 0
check noLoopsRepaired expect 0
check weaklyConnectedRepaired expect 0
check stronglyConnectedRepaired expect 0
check transitiveRepaired expect 0

pred repair_pred_1{
    weaklyConnected[] iff weaklyConnectedOK[]
}
run repair_pred_1

assert repair_assert_1{
    weaklyConnected[] iff weaklyConnectedOK[]
}
check repair_assert_1