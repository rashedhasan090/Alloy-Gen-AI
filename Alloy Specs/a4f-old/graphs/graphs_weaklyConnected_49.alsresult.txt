["/*This file was automatically generated by AUnit v1.0's coverage-based test generation feature.\n", 'Test Suite Details:\n', '----------\n', 'Tests generated over: GRAPHS_templateAllCorrect.als\n', 'Number Valuations: 8\n', 'Number Tests: 38\n', 'Scope used: 5*/\n', '\n', '/* \n', 'Each node as a set of outgoing edges, representing a directed graph without multiple edged.\n', '*/\n', '\n', 'sig Node {\n', '\tadj : set Node\n', '}\n', '\n', '/*\n', 'The graph is undirected, ie, edges are symmetric.\n', 'http://mathworld.wolfram.com/UndirectedGraph.html\n', '*/\n', 'pred undirected {\n', '\tadj = ~adj\n', '}\n', '\n', '/*\n', 'The graph is oriented, ie, contains no symmetric edges.\n', 'http://mathworld.wolfram.com/OrientedGraph.html\n', '*/\n', 'pred oriented {\n', '   no adj & ~adj\n', '}\n', '\n', '/*\n', 'The graph is acyclic, ie, contains no directed cycles.\n', 'http://mathworld.wolfram.com/AcyclicDigraph.html\n', '*/\n', 'pred acyclic {\n', ' all a:Node | a not in a.^adj\n', '}\n', '\n', '/*\n', 'The graph is complete, ie, every node is connected to every other node.\n', 'http://mathworld.wolfram.com/CompleteDigraph.html\n', '*/\n', 'pred complete {\n', '  all n,m:Node | m != n implies m in n.adj\n', '}\n', '\n', '/*\n', 'The graph contains no loops, ie, nodes have no transitions to themselves.\n', 'http://mathworld.wolfram.com/GraphLoop.html\n', '*/\n', 'pred noLoops {\n', ' no (iden & adj)\n', '}\n', '\n', '/*\n', 'The graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\n', 'http://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n', '*/\n', 'pred weaklyConnected {\n', ' \tall n,m:Node | n != m implies Node in n.*(adj+~adj).m\n', '}\n', '\n', '/*\n', 'The graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\n', 'http://mathworld.wolfram.com/StronglyConnectedDigraph.html\n', '*/\n', 'pred stonglyConnected {\n', ' \tall n,m:Node | n != m implies Node in n.*adj.m\n', '}\n', '\n', '/*\n', 'The graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\n', 'http://mathworld.wolfram.com/TransitiveDigraph.html\n', '*/\n', 'pred transitive {\n', ' \tall n,m,p:Node | n in m.adj and m in p.adj implies n in p.adj\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/*======== IFF PERFECT ORACLE ===============*/\n', 'pred undirectedOK {\n', '\tadj = ~adj\n', '}\n', 'assert undirectedRepaired {\n', '    undirected[] iff undirectedOK[]\n', '}\n', '--------\n', 'pred orientedOK {\n', '\tno adj & ~adj \n', '}\n', 'assert orientedRepaired {\n', '    oriented[] iff orientedOK[]\n', '}\n', '--------\n', 'pred acyclicOK {\n', '\tall a:Node | a not in a.^adj\n', '}\n', 'assert acyclicRepaired {\n', '   acyclic[]  iff acyclicOK[]\n', '}\n', '--------\n', 'pred completeOK {\n', '\tall n,m:Node | m != n implies m in n.adj\n', '}\n', 'assert completeRepaired {\n', '    complete[] iff completeOK[]\n', '}\n', '--------\n', 'pred noLoopsOK {\n', '\tno (iden & adj)\n', '}\n', 'assert noLoopsRepaired {\n', '   noLoops[]  iff noLoopsOK[]\n', '}\n', '--------\n', 'pred weaklyConnectedOK {\n', ' \tall n,m:Node | n != m implies Node in n.*(adj+~adj).m\n', '}\n', 'assert weaklyConnectedRepaired {\n', '   weaklyConnected[]  iff weaklyConnectedOK[]\n', '}\n', '--------\n', 'pred stonglyConnectedOK {\n', ' \tall n,m:Node | n != m implies Node in n.*adj.m\n', '}\n', 'assert stonglyConnectedRepaired {\n', '   stonglyConnected[]  iff stonglyConnectedOK[]\n', '}\n', '--------\n', 'pred transitiveOK {\n', ' \tall n,m,p:Node | n in m.adj and m in p.adj implies n in p.adj\n', '}\n', 'assert transitiveRepaired {\n', '    transitive[] iff transitiveOK[]\n', '}\n', '\n', '--- PerfectOracleCommands\n', ' check undirectedRepaired expect 0\n', ' check orientedRepaired expect 0\n', ' check acyclicRepaired expect 0\n', ' check completeRepaired expect 0\n', ' check noLoopsRepaired expect 0\n', ' check weaklyConnectedRepaired expect 0\n', ' check stonglyConnectedRepaired expect 0\n', ' check transitiveRepaired expect 0\n', 'pred repair_pred_1{weaklyConnected[] iff weaklyConnectedOK[] }\n', 'run repair_pred_1\n', 'assert repair_assert_1{weaklyConnected[] iff weaklyConnectedOK[] }\n', 'check repair_assert_1\n']