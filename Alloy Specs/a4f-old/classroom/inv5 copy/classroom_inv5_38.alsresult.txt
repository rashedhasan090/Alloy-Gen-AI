sig Person  {
    Tutors : set Person,
    Teaches : set Class
}

sig Group {}

sig Class  {
    Groups : Person -> Group,
    Teachers : set Teacher
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
    Person in Student 
}

pred inv2 {
    Teacher = none
}

pred inv3 {
    no Student & Teacher 
}

pred inv4 {
    Person = Student + Teacher 
}

pred inv5 {
    some Teacher.Teaches 
}

pred inv6 {
    Teacher in Teaches.Teachers
}

pred inv7 {
    Class in Teachers.Teaches
}

pred inv8 {
    all t:Teacher | lone t.Teaches 
}

pred inv9 {
    all c:Class | lone c.Teachers 
}

pred inv10 {
    all c:Class, s:Student | some s.(c.Groups) 
}

pred inv11 {
    all c : Class | (some c.Groups) implies some Teachers & c.Teachers  
}

pred inv12 {
    all t : Teacher | some (t.Teaches).Groups 
}

pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student 
}

pred inv14 {
    all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t -> c in c.Teachers implies t -> s in s.Tutors
}

pred inv15 {
    all s : Person | some Teachers & ^s.Tutors
}

pred inv5_OK {
    some Teacher.Teaches 
}

assert inv5_Repaired {
  inv5[] iff inv5_OK[]
}

check inv5_Repaired expect 0