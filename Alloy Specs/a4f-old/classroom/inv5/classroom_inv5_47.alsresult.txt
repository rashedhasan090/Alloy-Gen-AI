['sig Person {\n', '\tTutors : set Person,\n', '\tTeaches : set Class\n', '}\n', '\n', 'sig Group {}\n', '\n', 'sig Class {\n', '\tGroups : Person -> Group\n', '}\n', '\n', 'sig Teacher extends Person {}\n', '\n', 'sig Student extends Person {}\n', '\n', 'pred inv1 {\n', '\tPerson in Student\n', '}\n', '\n', 'pred inv2 {\n', '\tno Teacher\n', '}\n', '\n', 'pred inv3 {\n', '\tno Student & Teacher\n', '}\n', '\n', 'pred inv4 {\n', '\tPerson in (Student + Teacher)\n', '}\n', '\n', 'pred inv5 {\n', '\tsome Teacher.Teaches\n', '}\n', '\n', 'pred inv6 {\n', '\tTeacher in Teaches\n', '}\n', '\n', 'pred inv7 {\n', '\tClass in Teacher.Teaches\n', '}\n', '\n', 'pred inv8 {\n', '\tall t:Teacher | lone t.Teaches\n', '}\n', '\n', 'pred inv9 {\n', '\tall c:Class | lone (Teaches.c & Teacher)\n', '}\n', '\n', 'pred inv10 {\n', '\tall c:Class, s:Student | some s.(c.Groups)\n', '}\n', '\n', 'pred inv11 {\n', '\tall c : Class | (some c.Groups) implies some Teacher & (Teaches.c)\n', '}\n', '\n', 'pred inv12 {\n', '\tall t : Teacher | some ((t.Teaches).Groups)\n', '}\n', '\n', 'pred inv13 {\n', '\tTutors.Person in Teacher and Person.Tutors in Student\n', '}\n', '\n', 'pred inv14 {\n', '\tall s : Person, c : Class | (c -> s in Groups) implies all t : (Teaches.c & Teacher) | t -> s in Tutors\n', '}\n', '\n', 'pred inv15 {\n', '\tall s : Person | some Teacher & ^Tutors.s\n', '}\n', 'pred inv1_OK {\n', '\tPerson in Student\n', '}\n', '\n', 'assert inv1_Repaired {\n', '\tinv1[] iff inv1_OK[]\n', '}\n', '---------\n', 'pred inv2_OK {\n', '\tno Teacher\n', '}\n', '\n', 'assert inv2_Repaired {\n', '\tinv2[] iff inv2_OK[]\n', '}\n', '--------\n', 'pred inv3_OK {\n', '\tno Student & Teacher\n', '}\n', '\n', 'assert inv3_Repaired {\n', '\tinv3[] iff inv3_OK[]\n', '}\n', '--------\n', 'pred inv4_OK {\n', '\tPerson in (Student + Teacher)\n', '}\n', '\n', 'assert inv4_Repaired {\n', '\tinv4[] iff inv4_OK[]\n', '}\n', '--------\n', 'pred inv5_OK {\n', '\tsome Teacher.Teaches\n', '}\n', '\n', 'assert inv5_Repaired {\n', '\tinv5[] iff inv5_OK[]\n', '}\n', '--------\n', 'pred inv6_OK {\n', '\tTeacher in Teaches\n', '}\n', '\n', 'assert inv6_Repaired {\n', '\tinv6[] iff inv6_OK[]\n', '}\n', '--------\n', 'pred inv7_OK {\n', '\tClass in Teacher.Teaches\n', '}\n', '\n', 'assert inv7_Repaired {\n', '\tinv7[] iff inv7_OK[]\n', '}\n', '--------\n', 'pred inv8_OK {\n', '\tall t:Teacher | lone t.Teaches\n', '}\n', '\n', 'assert inv8_Repaired {\n', '\tinv8[] iff inv8_OK[]\n', '}\n', '--------\n', 'pred inv9_OK {\n', '\tall c:Class | lone (Teaches.c & Teacher)\n', '}\n', '\n', 'assert inv9_Repaired {\n', '\tinv9[] iff inv9_OK[]\n', '}\n', '--------\n', 'pred inv10_OK {\n', '\tall c:Class, s:Student | some s.(c.Groups)\n', '}\n', '\n', 'assert inv10_Repaired {\n', '\tinv10[] iff inv10_OK[]\n', '}\n', '--------\n', 'pred inv11_OK {\n', '\tall c : Class | (some c.Groups) implies some Teacher & (Teaches.c)\n', '}\n', '\n', 'assert inv11_Repaired {\n', '\tinv11[] iff inv11_OK[]\n', '}\n', '--------\n', 'pred inv12_OK {\n', '\tall t : Teacher | some ((t.Teaches).Groups)\n', '}\n', '\n', 'assert inv12_Repaired {\n', '\tinv12[] iff inv12_OK[]\n', '}\n', '--------\n', 'pred inv13_OK {\n', '\tTutors.Person in Teacher and Person.Tutors in Student\n', '}\n', '\n', 'assert inv13_Repaired {\n', '\tinv13[] iff inv13_OK[]\n', '}\n', '--------\n', 'pred inv14_OK {\n', '\tall s : Person, c : Class | (c -> s in Groups) implies all t : (Teaches.c & Teacher) | t -> s in Tutors\n', '}\n', '\n', 'assert inv14_Repaired {\n', '\tinv14[] iff inv14_OK[]\n', '}\n', '--------\n', 'pred inv15_OK {\n', '\tall s : Person | some Teacher & ^Tutors.s\n', '}\n', '\n', 'assert inv15_Repaired {\n', '\tinv15[] iff inv15_OK[]\n', '}\n', '--------\n', 'check inv1_Repaired expect 0\n', 'check inv2_Repaired expect 0\n', 'check inv3_Repaired expect 0 \n', 'check inv4_Repaired expect 0\n', 'check inv5_Repaired expect 0\n', 'check inv6_Repaired expect 0\n', 'check inv7_Repaired expect 0\n', 'check inv8_Repaired expect 0\n', 'check inv9_Repaired expect 0\n', 'check inv10_Repaired expect 0\n', 'check inv11_Repaired expect 0\n', 'check inv12_Repaired expect 0\n', 'check inv13_Repaired expect 0\n', 'check inv14_Repaired expect 0\n', 'check inv15_Repaired expect 0\n', 'pred repair_pred_1{inv5[] iff inv5_OK[] }\n', 'run repair_pred_1\n', 'assert repair_assert_1{inv5[] iff inv5_OK[] }\n', 'check repair_assert_1\n']