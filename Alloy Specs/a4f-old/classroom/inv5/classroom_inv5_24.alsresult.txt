sig Person  {
  Tutors : set Person,
  Teaches : set Class
}

sig Group {}

sig Class  {
  Groups : Person -> Group,
  Teachers : set Teacher
}

sig Teacher extends Person {}

sig Student extends Person {}

pred inv1 {
  Person in Student
}

pred inv2 {
  no Teacher
}

pred inv3 {
  no Student & Teacher
}

pred inv4 {
  Person in (Student + Teacher)
}

pred inv5 {
  some Teacher.Teaches
}

pred inv6 {
  Teacher in Teaches.Teacher
}

pred inv7 {
  Class in Teachers.Teaches
}

pred inv8 {
  all t:Teacher | lone t.Teaches
}

pred inv9 {
  all c:Class | lone Teachers.Teaches.c
}

pred inv10 {
  all c:Class, s:Student | some s.(c.Groups)
}

pred inv11 {
  all c : Class | (some c.Groups) implies some Teachers.Teaches.c
}

pred inv12 {
  all t : Teacher | some (t.Teaches).Groups
}

pred inv13 {
  Tutors.Person in Teacher and Person.Tutors in Student
}

pred inv14 {
  all s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t in c.Teachers implies t -> s in Tutors
}

pred inv15 {
  all s : Person | some Teacher & ^Tutors.s
}

/* Re-check all invariants after repair */
pred repair_pred_1{
  inv5[] iff some Teacher.Teaches
}
run repair_pred_1

assert repair_assert_1{
  inv5[] iff some Teacher.Teaches
}
check repair_assert_1

check inv1 expect 0
check inv2 expect 0
check inv3 expect 0
check inv4 expect 0
check inv5 expect 0
check inv6 expect 0
check inv7 expect 0
check inv8 expect 0
check inv9 expect 0
check inv10 expect 0
check inv11 expect 0
check inv12 expect 0
check inv13 expect 0
check inv14 expect 0
check inv15 expect 0