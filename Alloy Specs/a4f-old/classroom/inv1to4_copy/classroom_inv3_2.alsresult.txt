['/* The registered persons. */\n', 
 'sig Person  {\n', '\t/* Each person tutors a set of persons. */\n', 
 '\tTutors : set Person,\n', '\t/* Each person teaches a set of classes. */\n', 
 '\tTeaches : set Class\n', '}\n', '\n', '/* The registered groups. */\n', 
 'sig Group {}\n', '\n', '/* The registered classes. */\n', 
 'sig Class  {\n', '\t/* Each class has a set of persons assigned to a group. */\n', 
 '\tGroups : Person -> Group,\n', '\t/* Each class has a set of teachers assigned to it. */\n',
 '\tAssignedTeachers : set Teacher\n', '}\n', '\n', '/* Some persons are teachers. */\n', 'sig Teacher extends Person  {}\n', '\n', '/* Some persons are students. */\n', 'sig Student extends Person  {}\n', '\n', '/* Every person is a student. */\n',
 'pred inv1 {\n', '\tPerson in Student \n', '}\n', '\n', '/* There are no teachers. */\n', 
 'pred inv2 {\n', '\tno Teacher \n', '}\n', '\n', '/* No person is both a student and a teacher. */\n', 
 'pred inv3 {\n', '--\tno Student & Teacher \n', '}\n', '\n', '/* No person is neither a student nor a teacher. */\n', 
 'pred inv4 {\n', '\tPerson in (Student + Teacher) \n', '}\n', '\n', '/* There are some classes assigned to teachers. */\n', 
 'pred inv5 {\n', '\tsome Teacher.Teaches \n', '}\n', '\n', '/* Every teacher has classes assigned. */\n', 
 'pred inv6 {\n', '\tTeacher in AssignedTeachers \n', '}\n', '\n', '/* Every class has teachers assigned. */\n', 
 'pred inv7 {\n', '\tall c : Class | c.AssignedTeachers != none \n', '}\n', '\n', '/* Teachers are assigned at most one class. */\n',
 'pred inv8 {\n', '\tall t:Teacher | lone t.Teaches \n', '}\n', '\n', '/* No class has more than a teacher assigned. */\n', 
 'pred inv9 {\n', '\tall c:Class | lone c.AssignedTeachers \n', '}\n', '\n', '/* For every class, every student has a group assigned. */\n',
 'pred inv10 {\n', '\tall c:Class, s:Student | some s.(c.Groups) \n', '}\n', '\n', '/* A class only has groups if it has a teacher assigned. */\n', 
 'pred inv11 {\n', '\tall c : Class | (some c.Groups) implies some t : c.AssignedTeachers | t.Teaches = c \n', '}\n', '\n', '/* Each teacher is responsible for some groups. */\n', 
 'pred inv12 {\n', '\tall t : Teacher | some (t.Teaches & Class.AssignedTeachers) . Groups\n', '}\n', '\n', '/* Only teachers tutor, and only students are tutored. */\n',
 'pred inv13 {\n', '\tTutors.Person in Teacher and Person.Tutors in Student \n', '}\n', '\n', '/* Every student in a class is at least tutored by all the teachers\n', ' * assigned to that class. */\n',
 'pred inv14 {\n', '\tall s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t -> c in AssignedTeachers implies t -> s in Tutors\n', '}\n', '\n', '/* The tutoring chain of every person eventually reaches a Teacher. */\n', 'pred inv15 {\n', '\tall s : Person | some Teacher & ^Tutors.s\n', '}\n\n',
 '/*============== REPAIR ASSERTIONS ====================*/\n',
 'pred repair_pred_1{inv3[] iff no Student & Teacher}\n', 'run repair_pred_1\n',
 'assert repair_assert_1{inv3[] iff no Student & Teacher}\n', 'check repair_assert_1\n\n',
 '/*--- END OF REPAIR ASSERTIONS ---*/\n\n',
 '/*-------- REPAIRED INVARIANTS ---------*/\n', 
 'pred inv1_Repaired {\n', '\tPerson in Student \n', '}\n', 
 'pred inv2_Repaired {\n', '\tno Teacher \n', '}\n', 
 'pred inv3_Repaired {\n', '\tno Student & Teacher \n', '}\n', 
 'pred inv4_Repaired {\n', '\tPerson in (Student + Teacher) \n', '}\n', 
 'pred inv5_Repaired {\n', '\tsome Teacher.Teaches \n', '}\n', 
 'pred inv6_Repaired {\n', '\tTeacher in AssignedTeachers \n', '}\n', 
 'pred inv7_Repaired {\n', '\tall c : Class | c.AssignedTeachers != none \n', '}\n', 
 'pred inv8_Repaired {\n', '\tall t:Teacher | lone t.Teaches \n', '}\n',
 'pred inv9_Repaired {\n', '\tall c:Class | lone c.AssignedTeachers \n', '}\n', 
 'pred inv10_Repaired {\n', '\tall c:Class, s:Student | some s.(c.Groups) \n', '}\n', 
 'pred inv11_Repaired {\n', '\tall c : Class | (some c.Groups) implies some t : c.AssignedTeachers | t.Teaches = c \n', '}\n', 
 'pred inv12_Repaired {\n', '\tall t : Teacher | some (t.Teaches & Class.AssignedTeachers) . Groups\n', '}\n',
 'pred inv13_Repaired {\n', '\tTutors.Person in Teacher and Person.Tutors in Student \n', '}\n', 
 'pred inv14_Repaired {\n', '\tall s : Person, c : Class, t : Teacher, g : Group | (c -> s -> g in Groups) and t -> c in AssignedTeachers implies t -> s in Tutors\n', '}\n', 
 'pred inv15_Repaired {\n', '\tall s : Person | some Teacher & ^Tutors.s \n', '}\n', 
 '/*-------- END OF REPAIRED INVARIANTS ---------*/\n\n', 
 '/*-------- PERFECT ORACLE ASSERTIONS ------------*/\n',
 'assert inv1_OK {\n', '\tPerson in Student \n', '}\n', 
 'assert inv2_OK {\n', '\tno Teacher \n', '}\n',
 'assert inv3_OK {\n', '\tno Student & Teacher \n', '}\n', 
 'assert inv4_OK {\n', '\tPerson in (Student + Teacher) \n', '}\n', 
 'assert inv5_OK {\n', '\tsome Teacher.Teaches \n', '}\n', 
 'assert inv6_OK {\n', '\tTeacher in Teaches.Class \n', '}\n', 
 'assert inv7_OK {\n', '\tClass in Teacher.Teaches \n', '}\n', 
 'assert inv8_OK {\n', '\tall t:Teacher | lone t.Teaches \n', '}\n', 
 'assert inv9_OK {\n', '\tall c:Class | lone Teaches.c & Teacher \n', '}\n', 
 'assert inv10_OK {\n', '\tall c:Class, s:Student | some s.(c.Groups) \n', '}\n', 
 'assert inv11_OK {\n', '\tall c : Class | (some c.Groups) implies some Teacher & Teaches.c \n', '}\n', 
 'assert inv12_OK {\n', '\tall t : Teacher | some (t.Teaches).Groups \n', '}\n', 
 'assert inv13_OK {\n', '\tTutors.Person in Teacher and Person.Tutors in Student  \n', '}\n', 
 'assert inv14_OK {\n', '      all s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors \n', '}\n', 
 'assert inv15_OK {\n', '\tall s : Person | some Teacher & ^Tutors.s \n', '}\n', 
 '/*-------- END OF PERFECT ORACLE ASSERTIONS ------------*/\n\n', 
 '/*--- PerfectOracleCommands---*/\n', 
 'check inv1_Repaired expect 0\n', 'check inv2_Repaired expect 0\n', 
 'check inv3_Repaired expect 0 \n', 'check inv4_Repaired expect 0\n', 
 'check inv5_Repaired expect 0\n', 'check inv6_Repaired expect 0\n', 
 'check inv7_Repaired expect 0\n', 'check inv8_Repaired