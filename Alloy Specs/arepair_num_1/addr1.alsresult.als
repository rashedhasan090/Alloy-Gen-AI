The bug in this specification is in the fact constraint that defines T2. It states that each name entry may only map to at most one listing, which is incorrect. The correct constraint should state that each name entry should map to at least one listing. To fix this, replace "lone" with "some" in the fact constraint. 

Fixed fact constraint: 
fact {all b:Book | all n:b.entry | some b.listed[n]}

['/* Specification */\n', '// types (only relations, sigs/universe, preds assumed fix)\n', 'abstract sig Listing { }\n', 'sig Address extends Listing { }\n', 'sig Name extends Listing { }\n', 'sig Book {\n', '\tentry: set Name, // T1\n', '\tlisted: entry ->set Listing // T2\n', '}\n', 'fun lookup [b: Book, n: Name] : set Listing {n.^(b.listed)}\n', '// constraints\n', '// T. holeType constraints (multiplicity & range restriction)\n', '// T1\n', '// set\n', '// T2\n', '// A name entry maps to at least one name or address.\n', 'fact {all b:Book | all n:b.entry | some b.listed[n]}\n', '// F. fact constraints\n', '// F1 All names reachable from any name entry in the book are themselves entries.\n', 'fact { all b:Book | all n,l:Name | l in lookup[b,n] implies l in b.entry }\n', '// F2 Acyclic\n', 'fact { all b:Book | all n:b.entry | not n in lookup[b,n] }\n', '\n', '\n', '/* Refinement Task */ \n', '// A. assertion (universal statement over constraints; in this case, C1)\n', 'assert repair_assert_1 {\n', '\tall b:Book | all n:b.entry | some (lookup[b,n]&Address)\n', '}\n', 'check repair_assert_1 for exactly 1 Address, exactly 2 Name, exactly 1 Book\n', '// P. problem (subset of the universal statement over constraints)\n', '// some b:Book | some n:b.entry_in | no (lookup[b,n]&Addr)\n', '// F. fix (spec + fix + assert = UNSAT)\n', '//fact {all b:Book | all n:b.entry_in | some b.target_of[n]}\n', '\n', 'pred repair_pred_1 {\n', '\tall b:Book | all n:b.entry | some (lookup[b,n]&Address)\n', '}\n', 'run repair_pred_1 for exactly 1 Address, exactly 2 Name, exactly 1 Book\n']