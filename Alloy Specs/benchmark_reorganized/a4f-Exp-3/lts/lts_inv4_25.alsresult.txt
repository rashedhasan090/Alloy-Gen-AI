/*
A labeled transition system (LTS) is comprised by States, a subset
of which are Initial, connected by transitions, here represented by 
Events.
*/
sig State {
        trans : Event -> State
}
sig Init in State {}
sig Event {}
/*
The LTS does not contain deadlocks, ie, each state has at least a 
transition.
*/
pred inv1 {
	all s: State | some s.trans 
}
/*
There is a single initial state.
*/
pred inv2 {
	one s: Init | s in State
}
/*
The LTS is deterministic, ie, each state has at most a transition for each event.
*/
pred inv3 {
	all s : State, e : Event | lone e.(s.trans)  
}
/*
All states are reachable from an initial state.
*/
pred inv4 {
	all s : State | some i : Init | i -> s in trans 
}
/*
All the states have the same events available.
*/
pred inv5 {
	all s:State, s1:State | s.trans.Event = s1.trans.Event 
}
/*
Each event is available in at least a state.
*/
pred inv6 {
	all e:Event | some s1:State | e in s1.trans
}
/*
The LTS is reversible, ie, from a reachable state it is always possible 
to return to an initial state.
*/
pred inv7 {
	all s : State | some i : Init | s -> i in trans.*  
}

assert inv1_Repaired {
    inv1[] iff inv1[]
}

assert inv2_Repaired {
    inv2[] iff inv2[]
}

assert inv3_Repaired {
    inv3[] iff inv3[]
}

assert inv4_Repaired {
    inv4[] iff inv4[]
}

assert inv5_Repaired {
    inv5[] iff inv5[]
}

assert inv6_Repaired {
    inv6[] iff inv6[]
}

assert inv7_Repaired {
    inv7[] iff inv7[]
}