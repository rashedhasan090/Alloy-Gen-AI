/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
pred inv1 {
	Person in Student 
}
/* There are no teachers. */
pred inv2 {
	no Teacher 
}
/* No person is both a student and a teacher. */
pred inv3 {
	no Student & Teacher 
}
/* No person is neither a student nor a teacher. */
pred inv4 {
	Person in (Student + Teacher) 
}
/* There are some classes assigned to teachers. */
pred inv5 {
	some Teacher.Teaches 
}
/* Every teacher has classes assigned. */
pred inv6 {
	Teacher in Teaches.Class 
}
/* Every class has teachers assigned. */
pred inv7 {
	Class in Teacher.Teaches 
}
/* Teachers are assigned at most one class. */
pred inv8 {
	all t:Teacher | lone t.Teaches 
}
/* No class has more than one teacher assigned. */
pred inv9 {
	all c:Class | lone Teacher & c.Teaches 
}
/* For every class, every student has a group assigned. */
pred inv10 {
	all c:Class, s:Student | some g:Group | (s->g) in c.Groups 
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
	all c : Class | (some c.Groups) implies some t : Teacher | (t -> c) in Teaches 
}
/* Each teacher is responsible for some groups. */
pred inv12 {
	all t : Teacher | some g:Group | (t -> g) in (Teaches.Class).Groups
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
	all p : Person | (p in Teacher) iff (p.Tutors in Teacher) and (p.Tutors != p)
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14 {
	all c : Class, s : Student | some g:Group | (s->g) in c.Groups and 
		all t : Teacher | (t -> c) in Teaches implies (t -> s) in g.Tutors
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
	all s : Student | some t : Teacher | t in ^s.Tutors
}

/*================ Repair ================== */
/* Revised Inv9 */
pred inv9_OK {
  all c:Class | #(Teacher & c.Teaches) <= 1
}

assert inv9_Repaired {
    inv9[] iff inv9_OK[]
}

check inv9_Repaired

/* Revised Inv10 */
pred inv10_OK {
	all c:Class, s:Student | some g:Group | g in c.Groups.s
}
assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}

check inv10_Repaired

/* Revised Inv11 */
pred inv11_OK {
	all c : Class | (some c.Groups) implies some t : Teacher | (t -> c) in Teaches 
}
assert inv11_Repaired {
    inv11[] iff inv11_OK[]
}

check inv11_Repaired