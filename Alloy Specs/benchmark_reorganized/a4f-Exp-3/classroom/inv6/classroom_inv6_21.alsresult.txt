/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
pred inv1 {
	Person in Student 
}
/* There are no teachers. */
pred inv2 {
	no Teacher 
}
/* No person is both a student and a teacher. */
pred inv3 {
	no Student & Teacher 
}
/* No person is neither a student nor a teacher. */
pred inv4 {
	Person in (Student + Teacher) 
}
/* There are some classes assigned to teachers. */
pred inv5 {
	some Teacher.Teaches 
}
/* Every teacher has classes assigned. */
pred inv6 {
	all t:Teacher | some c:Class | t in c.Teaches
}
/* Every class has teachers assigned. */
pred inv7 {
	all c:Class | some t:Teacher | t in c.Teaches
}
/* Teachers are assigned at most one class. */
pred inv8 {
	all t:Teacher | lone t.Teaches 
}
/* No class has more than a teacher assigned. */
pred inv9 {
	all c:Class | lone t:Teacher | t in c.Teaches
}
/* For every class, every student has a group assigned. */
pred inv10 {
	all c:Class, s:Student | some g:Group | (s -> g) in c.Groups
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
	all c : Class | (some c.Groups) implies some t : Teacher | t in c.Teaches
}
/* Each teacher is responsible for some groups. */
pred inv12 {
	all t : Teacher | some c : Class, g : Group | (t -> c) in c.Teaches and (g in c.Groups.t)
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
	all p:Person | p in Teacher <=> p.Tutors in Person - Teacher
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14 {
	all c:Class, s:Student | let tutors = c.Teaches.Tutors & Teacher | (s in c.Groups.Person => tutors in s.Tutors)
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
	all s:Student | some t:Teacher | t in ^s.Tutors
}

/* perfect oracle */
pred isPerfOracle {
	all p: Person | p.Teaches in Class and p.Tutors in Person
}

/* Alloy will try to falsify PerfectOracle by finding a counter-example */
run isPerfOracle for 5 but 3 Class, 3 Group, 3 Person

/* ======= Assertions =============== */

assert A1 {
    inv1
}

assert A2 {
    inv2
}

assert A3 {
    inv3
}

assert A4 {
    inv4
}

assert A5 {
    inv5
}

assert A6 {
    inv6
}

assert A7 {
    inv7
}

assert A8 {
    inv8
}

assert A9 {
    inv9
}

assert A10 {
    inv10
}

assert A11 {
    inv11
}

assert A12 {
    inv12
}

assert A13 {
    inv13
}

assert A14 {
    inv14
}

assert A15 {
    inv15
}