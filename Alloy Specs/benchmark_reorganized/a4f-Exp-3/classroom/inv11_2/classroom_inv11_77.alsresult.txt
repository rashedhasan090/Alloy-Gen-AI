/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
pred inv1 {
	Person in Student 
}
/* There are no teachers. */
pred inv2 {
	no Teacher 
}
/* No person is both a student and a teacher. */
pred inv3 {
	no Student & Teacher 
}
/* No person is neither a student nor a teacher. */
pred inv4 {
	Person in (Student + Teacher) 
}
/* There are some classes assigned to teachers. */
pred inv5 {
	some Teacher.Teaches 
}
/* Every teacher has classes assigned. */
pred inv6 {
	Teacher.Teaches = Class 
}
/* Every class has teachers assigned. */
pred inv7 {
	Class.Teaches = Teacher 
}
/* Teachers are assigned at most one class. */
pred inv8 {
	all t:Teacher | lone t.Teaches 
}
/* No class has more than a teacher assigned. */
pred inv9 {
	all c:Class | lone c.Teaches & Teacher 
}
/* For every class, every student has a group assigned. */
pred inv10 {
	all c:Class, s:Student | some s.(c.Groups) 
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
	all c: Class, g: Group, s: Student | (c->s->g in Groups) implies some t: Teacher | t->Teaches = c and t != s  
}
/* Each teacher is responsible for some groups. */
pred inv12 {
	all t : Teacher | some (t.Teaches).Groups 
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
	Tutors.Person in Teacher and Person.Tutors in Student 
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14 {
	all s : Person, c : Class | (c.Teaches & Teacher) -> s.Tutors 
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
	all s : Person | some Teacher & ^Tutors.s
}

/* Repaired Inv1 */
pred inv1_Repaired {
  Person in Student 
}
assert inv1_Repaired_Assert {
    inv1[] iff inv1_Repaired[]
}

/* Repaired Inv2 */
pred inv2_Repaired {
  no Teacher 
}
assert inv2_Repaired_Assert {
    inv2[] iff inv2_Repaired[]
}

/* Repaired Inv3 */
pred inv3_Repaired {
  no (s: Student, t: Teacher) | s=t 
}
assert inv3_Repaired_Assert {
    inv3[] iff inv3_Repaired[]
}

/* Repaired Inv4 */
pred inv4_Repaired {
  Person in (Student + Teacher) 
}
assert inv4_Repaired_Assert {
    inv4[] iff inv4_Repaired[]
}

/* Repaired Inv5 */
pred inv5_Repaired {
  some Teacher.Teaches
}
assert inv5_Repaired_Assert {
    inv5[] iff inv5_Repaired[]
}

/* Repaired Inv6 */
pred inv6_Repaired {
  Teacher.Teaches = Class 
}
assert inv6_Repaired_Assert {
    inv6[] iff inv6_Repaired[]
}

/* Repaired Inv7 */
pred inv7_Repaired {
  Class.Teaches = Teacher 
}
assert inv7_Repaired_Assert {
    inv7[] iff inv7_Repaired[]
}

/* Repaired Inv8 */
pred inv8_Repaired {
  all t: Teacher | lone t.Teaches 
}
assert inv8_Repaired_Assert {
    inv8[] iff inv8_Repaired[]
}

/* Repaired Inv9 */
pred inv9_Repaired {
  all c: Class | lone c.Teaches & Teacher 
}
assert inv9_Repaired_Assert {
    inv9[] iff inv9_Repaired[]
}

/* Repaired Inv10 */
pred inv10_Repaired {
  all c: Class, s: Student | some s.(c.Groups) 
}
assert inv10_Repaired_Assert {
    inv10[] iff inv10_Repaired[]
}

/* Repaired Inv11 */
pred inv11_Repaired {
  all c : Class, g: Group, s: Student | (c->s->g in Groups) implies some t: Teacher | t->Teaches = c and t != s  
}
assert inv11_Repaired_Assert {
    inv11[] iff inv11_Repaired[]
}

/* Repaired Inv12 */
pred inv12_Repaired {
 all t : Teacher | some (t.Teaches).Groups 
}
assert inv12_Repaired_Assert {
    inv12[] iff inv12_Repaired[]
}

/* Repaired Inv13 */
pred inv13_Repaired {
  Tutors.Person in Teacher and Person.Tutors in Student 
}
assert inv13_Repaired_Assert {
    inv13[] iff inv13_Repaired[]
}

/* Repaired Inv14 */
pred inv14_Repaired {
      all s : Person, c : Class | (c.Teaches & Teacher) -> s.Tutors 
}
assert inv14_Repaired_Assert {
    inv14[] iff inv14_Repaired[]
}

/* Repaired Inv15 */
pred inv15_Repaired {
  all s : Person | some Teacher & ^Tutors.s 
}
assert inv15_Repaired_Assert {
    inv15[] iff inv15_Repaired[]
}

/* Check All Repaired Invariants */
check inv1_Repaired_Assert
check inv2_Repaired_Assert
check inv3_Repaired_Assert
check inv4_Repaired_Assert
check inv5_Repaired_Assert
check inv6_Repaired_Assert
check inv7_Repaired_Assert
check inv8_Repaired_Assert
check inv9_Repaired_Assert
check inv10_Repaired_Assert
check inv11_Repaired_Assert
check inv12_Repaired_Assert
check inv13_Repaired_Assert
check inv14_Repaired_Assert
check inv15_Repaired_Assert

/* Repairing Done */