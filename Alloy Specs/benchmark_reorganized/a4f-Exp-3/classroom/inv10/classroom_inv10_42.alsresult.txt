/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
pred inv1_OK {
	Person in Student 
}
assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}
/* There are no teachers. */
pred inv2_OK {
	no Teacher 
}
assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}
/* No person is both a student and a teacher. */
pred inv3_OK {
	no Student & Teacher 
}
assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}
/* No person is neither a student nor a teacher. */
pred inv4_OK {
	Person in (Student + Teacher) 
}
assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}
/* There are some classes assigned to teachers. */
pred inv5_OK {
	some Teacher.Teaches 
}
assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}
/* Every teacher has classes assigned. */
pred inv6_OK {
	Teacher in Teaches.Class 
}
assert inv6_Repaired {
    inv6[] iff inv6_OK[]
}
/* Every class has at least one teacher assigned. */
pred inv7_OK {
	all c:Class | some t:Teacher | t in c.Teaches 
}
assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}
/* Teachers are assigned at most one class. */
pred inv8_OK {
	all t:Teacher | lone t.Teaches 
}
assert inv8_Repaired {
    inv8[] iff inv8_OK[]
}
/* No class has more than one teacher assigned. */
pred inv9_OK {
	all c:Class | lone t:Teacher | t in c.Teaches 
}
assert inv9_Repaired {
    inv9[] iff inv9_OK[]
}
/* For every class, every student has a group assigned. */
pred inv10_OK {
	all s:Student, c:Class | some g:Group | (s -> g) in c.Groups 
}
assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}
/* A class only has groups if it has a teacher assigned. */
pred inv11_OK {
	all c:Class | (some g:Group | g in c.Groups) iff (some t:Teacher | t in c.Teaches) 
}
assert inv11_Repaired {
    inv11[] iff inv11_OK[]
}
/* Each teacher is responsible for some groups. */
pred inv12_OK {
	all t:Teacher | some g:Group, c:Class | (g in c.Groups) and (t in c.Teaches) 
}
assert inv12_Repaired {
    inv12[] iff inv12_OK[]
}
/* Only teachers tutor, and only students are tutored. */
pred inv13_OK {
	all t:Teacher | t.Tutors = none 
	all s:Student | s.Tutors = some Teacher 
}
assert inv13_Repaired {
    inv13[] iff inv13_OK[]
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14_OK {
	all t:Teacher, s:Student, c:Class |
		((t in c.Teaches) and (s in c.Groups.Person)) implies
			(s.Tutors = t) or (some t':t.Tutors | t'->s in Tutors)
}
assert inv14_Repaired {
    inv14[] iff inv14_OK[]
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15_OK {
	(all s:Student | some t:Teacher | s.Tutors = t) and
	(all p:Person - Teacher | some t:p.Tutors | t in Teacher)
}
assert inv15_Repaired {
    inv15[] iff inv15_OK[]
}
/*======== IFF PERFECT ORACLE ===============*/
run inv1_Repaired for 0
run inv2_Repaired for 0
run inv3_Repaired for 0 
run inv4_Repaired for 0
run inv5_Repaired for 0
run inv6_Repaired for 0
run inv7_Repaired for 0
run inv8_Repaired for 0
run inv9_Repaired for 0
run inv10_Repaired for 0
run inv11_Repaired for 0
run inv12_Repaired for 0
run inv13_Repaired for 0
run inv14_Repaired for 0
run inv15_Repaired for 0