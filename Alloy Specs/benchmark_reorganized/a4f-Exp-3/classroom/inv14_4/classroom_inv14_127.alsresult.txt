/* The registered persons. */
sig Person {
    /* Each person tutors a set of persons. */
    Tutors: set Person,
    /* Each person teaches a set of classes. */
    Teaches: set Class,
    /* Each person belongs to a group. */
    Group: one Group
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class {
    /* Each class has a set of persons assigned to a group. */
    Groups: Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person {}
/* Some persons are students. */
sig Student extends Person {}
/* Every person is a student or a teacher, but not both. */
pred inv1 {
    no disj[c, t: Person | c != t && c in Student && t in Teacher]
}
/* There are no persons who are not students or teachers. */
pred inv2 {
    Person in (Student + Teacher)
}
/* No class has more than one teacher assigned to it. */
pred inv3 {
    all c: Class | lone p: Teacher | p in c.Teaches and p.Group in c.Groups.~values
}
/* For every class, every student has a group assigned. */
pred inv4 {
    all c: Class, s: Student | some g: Group | (s->g) in c.Groups
}
/* A class only has groups if it has a teacher assigned. */
pred inv5 {
    all c: Class | (some c.Groups) implies some p: Teacher | p in c.Teaches
}
/* Every teacher has classes assigned. */
pred inv6 {
    all t: Teacher | some c: Class | t in c.Teaches
}
/* Every class has teachers assigned. */
pred inv7 {
    all c: Class | some t: Teacher | t in c.Teaches
}
/* Every person who is tutored by someone is tutored by a teacher. */
pred inv8 {
    all s, t: Person | s.Tutors = t -> s.Tutors implies t in Teacher
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv9 {
    all c: Class, s: Student | s in c.Groups.Person -> s.Tutors
}
/* Each teacher is responsible for some groups. */
pred inv10 {
    all t: Teacher | some g: Group | t.Group = g and all c: Class | t in c.Teaches implies g in c.Groups.~values
}
/* Only teachers tutor, and only students are tutored. */
pred inv11 {
    Teacher.Tutors = Person and Student.Tutors = none
}
/* The tutoring chain of every person eventually reaches a teacher. */
pred inv12 {
    all s: Person | some t: Teacher | t in ^s.Tutors
}

/* Assertions */
assert inv1_ok {
    inv1
}
assert inv2_ok {
    inv2
}
assert inv3_ok {
    inv3
}
assert inv4_ok {
    inv4
}
assert inv5_ok {
    inv5
}
assert inv6_ok {
    inv6
}
assert inv7_ok {
    inv7
}
assert inv8_ok {
    inv8
}
assert inv9_ok {
    inv9
}
assert inv10_ok {
    inv10
}
assert inv11_ok {
    inv11
}
assert inv12_ok {
    inv12
}

/* Check assertions */
check inv1_ok expect 0
check inv2_ok expect 0
check inv3_ok expect 0
check inv4_ok expect 0
check inv5_ok expect 0
check inv6_ok expect 0
check inv7_ok expect 0
check inv8_ok expect 0
check inv9_ok expect 0
check inv10_ok expect 0
check inv11_ok expect 0
check inv12_ok expect 0