/* The registered persons. */
sig Person {
    /* Each person tutors a set of persons. */
    Tutors: set Person,
    /* Each person teaches a set of classes. */
    Teaches: set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class {
    /* Each class has a set of persons assigned to a group. */
    Groups: Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person {}
/* Some persons are students. */
sig Student extends Person {}
/* Every person is a student. */
pred inv1 {
    Person in Student
}
/* There are no teachers. */
pred inv2 {
    no Teacher
}
/* No person is both a student and a teacher. */
pred inv3 {
    no Student & Teacher
}
/* No person is neither a student nor a teacher. */
pred inv4 {
    Person in Student + Teacher
}
/* There are some classes assigned to teachers. */
pred inv5 {
    some Teacher.Teaches
}
/* Every teacher has classes assigned. */
pred inv6 {
    Teacher in Teachs.Class
}
/* Every class has teachers assigned. */
pred inv7 {
    Class in Teacher.Teaches
}
/* Teachers are assigned at most one class. */
pred inv8 {
    all t: Teacher | lone t.Teaches
}
/* No class has more than one teacher assigned. */
pred inv9 {
    all c: Class | lone t: Teacher | t.Teaches & c in t.Teaches.Class
}
/* For every class, every student has a group assigned. */
pred inv10 {
    all c: Class, s: Student | some g: Group | c.Groups[s] = g
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
    all c: Class | some t: Teacher | t.Teaches & c.Groups
}
/* Each teacher is responsible for some groups. */
pred inv12 {
    all t: Teacher | some g: Group | some c: t.Teaches | c.Groups[t] = g
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
    all p: Person | p.Tutors in Teacher implies p in Student
}
/* Every student in a class is at least tutored by all the teachers
 assigned to that class. */
pred inv14 {
    all c: Class, s: Student | some g : c.Groups[s] |
        all t: Teacher | t.Teaches & c implies s in t.Tutors[g]
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
    all s: Person | some t: Teacher | t in ^s.Tutors
}

/* Assertions */
assert inv1Repaired {
    inv1[] iff Person in Student
}

assert inv2Repaired {
    inv2[] iff no Teacher
}

assert inv3Repaired {
    inv3[] iff no Student & Teacher
}

assert inv4Repaired {
    inv4[] iff Person in Student + Teacher
}

assert inv5Repaired {
    inv5[] iff some Teacher.Teaches
}

assert inv6Repaired {
    inv6[] iff Teacher in Teaches.Class
}

assert inv7Repaired {
    inv7[] iff Class in Teacher.Teaches
}

assert inv8Repaired {
    inv8[] iff all t: Teacher | lone t.Teaches
}

assert inv9Repaired {
    inv9[] iff all c: Class | lone t: Teacher | t.Teaches & c in t.Teaches.Class
}

assert inv10Repaired {
    inv10[] iff all c: Class, s: Student | some g: Group | c.Groups[s] = g
}

assert inv11Repaired {
    inv11[] iff all c: Class | some t: Teacher | t.Teaches & c.Groups
}

assert inv12Repaired {
    inv12[] iff all t: Teacher | some g: Group | some c: t.Teaches | c.Groups[t] = g
}

assert inv13Repaired {
    inv13[] iff all p: Person | p.Tutors in Teacher implies p in Student
}

assert inv14Repaired {
    inv14[] iff all c: Class, s: Student | some g : c.Groups[s] |
        all t: Teacher | t.Teaches & c implies s in t.Tutors[g]
}

assert inv15Repaired {
    inv15[] iff all s: Person | some t: Teacher | t in ^s.Tutors
}

/* Verification of assertions */
check inv1Repaired expect 0
check inv2Repaired expect 0
check inv3Repaired expect 0
check inv4Repaired expect 0
check inv5Repaired expect 0
check inv6Repaired expect 0
check inv7Repaired expect 0
check inv8Repaired expect 0
check inv9Repaired expect 0
check inv10Repaired expect 0
check inv11Repaired expect 0
check inv12Repaired expect 0
check inv13Repaired expect 0
check inv14Repaired expect 0
check inv15Repaired expect 0