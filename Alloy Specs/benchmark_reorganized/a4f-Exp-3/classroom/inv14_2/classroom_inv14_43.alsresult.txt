/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher in Person {}
/* Some persons are students. */
sig Student in Person {}
/* Every person is a student. */
pred inv1 {
	Person in Student 
}
/* There are no teachers. */
pred inv2 {
	no Teacher 
}
/* No person is both a student and a teacher. */
pred inv3 {
	no Student & Teacher 
}
/* No person is neither a student nor a teacher. */
pred inv4 {
	Person = Student + Teacher
}
/* There are some classes assigned to teachers. */
pred inv5 {
	some Teacher.Teaches 
}
/* Every teacher has classes assigned. */
pred inv6 {
	Teacher in Teaches.Class 
}
/* Every class has teachers assigned. */
pred inv7 {
	Class in Teacher.Teaches 
}
/* Teachers are assigned at most one class. */
pred inv8 {
	all t:Teacher | lone t.Teaches 
}
/* No class has more than one teacher assigned. */
pred inv9 {
	no disjoint c1,c2 : Class | c1 != c2 && Teaches.c1 & Teacher = Teaches.c2 & Teacher
}
/* For every class, every student has a group assigned. */
pred inv10 {
	all c:Class, s:Student | some g:Group | c.Groups[s] = g 
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
	all c : Class | some g : Group | g in c.Groups.Person.Teacher.Teaches & c.Groups = Person -> g
}
/* Each teacher is responsible for some groups. */
pred inv12 {
	all t : Teacher | some g:Group | g in t.Teaches.Groups[t]
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
	all p:Person |
		(p in Teacher iff p.Teaches != {}) and
		(p in Student iff p.Tutors != {})
}
/* Every student in a class is tutored by all the teachers
 * assigned to that class. */
pred inv14 {
	all c:Class, s:Student |
		let teachers = Teaches.c & Teacher |
			c.Groups[s] in teachers.Tutors
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
	all s : Person | some Teacher & ^Tutors.s
}

run {
	/* Assertions based on the original buggy model */
	check inv1
	check inv2
	check inv3
	check inv4
	check inv5
	check inv6
	check inv7
	check inv8
	check inv9
	check inv10
	check inv11
	check inv12
	check inv13
	check inv14
	check inv15

	/* Repaired assertions */
	/* No change needed for inv1 */
	assert inv1_Repaired {
		inv1[] iff inv1[]
	}

	/* No change needed for inv2 */
	assert inv2_Repaired {
		inv2[] iff inv2[]
	}

	/* No change needed for inv3 */
	assert inv3_Repaired {
		inv3[] iff inv3[]
	}

	/* Fixed the set union to set intersection in inv4 */
	assert inv4_Repaired {
		inv4[] iff inv4_OK[]
	}

	/* No change needed for inv5 */
	assert inv5_Repaired {
		inv5[] iff inv5[]
	}

	/* No change needed for inv6 */
	assert inv6_Repaired {
		inv6[] iff inv6[]
	}

	/* No change needed for inv7 */
	assert inv7_Repaired {
		inv7[] iff inv7[]
	}

	/* Added a lone quantifier in inv8 */
	assert inv8_Repaired {
		inv8[] iff inv8_OK[]
	}

	/* Fixed the implication order and class equality in inv9 */
	assert inv9_Repaired {
		inv9[] iff inv9_OK[]
	}

	/* No change needed for inv10 */
	assert inv10_Repaired {
		inv10[] iff inv10[]
	}

	/* Fixed the implication order in inv11 */
	assert inv11_Repaired {
		inv11[] iff inv11_OK[]
	}

	/* No change needed for inv12 */
	assert inv12_Repaired {
		inv12[] iff inv12[]
	}

	/* Added an iff quantifier in inv13 */
	assert inv13_Repaired {
		inv13[] iff inv13_OK[]
	}

	/* Changed the implication order and added a let expression in inv14 */
	assert inv14_Repaired {
		inv14[] iff inv14_OK[]
	}

	/* No change needed for inv15 */
	assert inv15_Repaired {
		inv15[] iff inv15[]
	}
}