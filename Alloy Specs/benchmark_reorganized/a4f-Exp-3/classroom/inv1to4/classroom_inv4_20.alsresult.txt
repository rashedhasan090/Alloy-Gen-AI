/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
pred inv1 {
	Person in Student 
}
/* There are no teachers. */
pred inv2 {
	no Teacher 
}
/* No person is both a student and a teacher. */
pred inv3 {
	no Student & Teacher 
}
/* Every person is either a student or a teacher. */
pred inv4 {
	all p: Person | p in Student or p in Teacher
}
/* There are some classes assigned to teachers. */
pred inv5 {
	some Teacher.Teaches 
}
/* Every teacher has classes assigned. */
pred inv6 {
	all t: Teacher | t in Teaches.Class 
}
/* Every class has teachers assigned. */
pred inv7 {
	all c: Class | c in Teacher.Teaches 
}
/* Teachers are assigned at most one class. */
pred inv8 {
	all t:Teacher | lone t.Teaches 
}
/* No class has more than one teacher assigned. */
pred inv9 {
	all c:Class | lone x:Teacher | x in Teaches.c
}
/* For every class, every student has a group assigned. */
pred inv10 {
	all c:Class, s:Student | some g:Group | g = c.Groups[s]
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
	all c: Class | (some c.Groups) implies some t:Teacher | t in Teaches.c
}
/* Each teacher is responsible for some groups. */
pred inv12 {
	all t: Teacher | some c: t.Teaches | some g:Group | g = c.Groups[t]
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
	all t:Teacher | t.Tutors = none
	all s:Student | s.Tutors = some Teacher
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14 {
	all c:Class, s:Student | all t: c.Teaches | s in (t.Tutors).Tutors
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
	all s:Person | some t:Teacher | s in ^Tutors.t
}

/* Only teachers tutor, and only students are tutored. */
run inv13 for 4

/* The tutoring chain of every person eventually reaches a Teacher. */
check inv15 for 4

/* Teachers are assigned at most one class. */
check inv8 for 4

/* Repair invariant inv4 */
pred repair_inv4 {
	all p:Person | p in Student or p in Teacher
}
run repair_inv4

/* Check the repaired invariant inv4 */
check inv4 for 4