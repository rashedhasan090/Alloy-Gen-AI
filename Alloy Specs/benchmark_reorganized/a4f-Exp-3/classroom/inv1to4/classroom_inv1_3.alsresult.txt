/* The registered persons. */
sig Person {
    /* Each person tutors a set of persons. */
    Tutors: set Person,
    /* Each person teaches a set of classes. */
    Teaches: set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class {
    /* Each class has a set of persons assigned to a group. */
    Groups: Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person {}
/* Some persons are students. */
sig Student extends Person {}
/* Every person is a student. */
pred inv1 {
    all p: Person | p in Student
}
/* There are no teachers. */
pred inv2 {
    no Teacher
}
/* No person is both a student and a teacher. */
pred inv3 {
    no Student & Teacher
}
/* No person is neither a student nor a teacher. */
pred inv4 {
    Person in (Student + Teacher)
}
/* There are some classes assigned to teachers. */
pred inv5 {
    some Teacher.Teaches
}
/* Every teacher has classes assigned. */
pred inv6 {
    Teacher in Teaches 
}
/* Every class has teachers assigned. */
pred inv7 {
    Class in Teacher.Teaches
}
/* Teachers are assigned at most one class. */
pred inv8 {
    all t: Teacher | lone t.Teaches
}
/* No class has more than a teacher assigned. */
pred inv9 {
    all c: Class | lone (c.Teaches & Teacher)
}
/* For every class, every student has a group assigned. */
pred inv10 {
    all c: Class, s: Student | some c.Groups.s
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
    all c: Class | (some c.Groups) implies some t: Teacher | t in c.Teaches
}
/* Each teacher is responsible for some groups. */
pred inv12 {
    all t: Teacher | some (t.Teaches.Groups)
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
    all t: Teacher, s: Student | s in t.Tutors
    Tutors.Person in Teacher and Person.Tutors in Student
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14 {
    all c: Class, s: Student | all t: c.Teaches | s in t.Tutors
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
    all s: Student | some ^s.Tutors & Teacher
}

/* PERFECT ORACLE */
fact perfectOracle {
    inv1
    inv2
    inv3
    inv4
    inv5
    inv6
    inv7
    inv8
    inv9
    inv10
    inv11
    inv12
    inv13
    inv14
    inv15
}

/* REPAIR ASSERTION EXAMPLES */
assert inv1_OK {
    Person in Student
}
assert inv2_OK {
    no Teacher
}
assert inv3_OK {
    no Student & Teacher
}
assert inv4_OK {
    Person in Student + Teacher
}
assert inv5_OK {
    some Teacher.Teaches
}
assert inv6_OK {
    Teacher in Teaches
}
assert inv7_OK {
    Class in Teacher.Teaches
}
assert inv8_OK {
    all t: Teacher | lone t.Teaches
}
assert inv9_OK {
    all c: Class | lone (c.Teaches & Teacher)
}
assert inv10_OK {
    all c: Class, s: Student | some c.Groups.s
}
assert inv11_OK {
    all c: Class | (some c.Groups) implies some t: Teacher | t in c.Teaches
}
assert inv12_OK {
    all t: Teacher | some (t.Teaches.Groups)
}
assert inv13_OK {
    Tutors.Person in Teacher and Person.Tutors in Student  
}
assert inv14_OK {
    all c: Class, s: Student | all t: c.Teaches | s in t.Tutors
}
assert inv15_OK {
    all s: Student | some ^s.Tutors & Teacher
}

/* FIX ASSERTION EXAMPLES */
assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}
assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}
assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}
assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}
assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}
assert inv6_Repaired {
    inv6[] iff inv6_OK[]
}
assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}
assert inv8_Repaired {
    inv8[] iff inv8_OK[]
}
assert inv9_Repaired {
    inv9[] iff inv9_OK[]
}
assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}
assert inv11_Repaired {
    inv11[] iff inv11_OK[]
}
assert inv12_Repaired {
    inv12[] iff inv12_OK[]
}
assert inv13_Repaired {
    inv13[] iff inv13_OK[]
}
assert inv14_Repaired {
    inv14[] iff inv14_OK[]
}
assert inv15_Repaired {
    inv15[] iff inv15_OK[]
}

/* PERFECT ORACLE COMMANDS */
check perfectOracle

/* REPAIR ASSERTION COMMANDS */
check inv1_Repaired
check inv2_Repaired
check inv3_Repaired
check inv4_Repaired
check inv5_Repaired
check inv6_Repaired
check inv7_Repaired
check inv8_Repaired
check inv9_Repaired
check inv10_Repaired
check inv11_Repaired
check inv12_Repaired
check inv13_Repaired
check inv14_Repaired
check inv15_Repaired

/* REPAIR PREDICATE COMMANDS */
pred repair_pred_1 {
    inv1[] iff inv1_OK[]
}
run repair_pred_1

/* REPAIR ASSERTION COMMANDS */
assert repair_assert_1 {
    inv1[] iff inv1_OK[]
}
check repair_assert_1