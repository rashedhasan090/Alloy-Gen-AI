open util/ordering[Position]

sig Position {}

sig Product {}

sig Component extends Product {
    parts : set Product,
    cposition : one Position
}

sig Resource extends Product {}

sig Robot {
        rposition : one Position
}

// A component requires at least one part
pred inv1 {
    some c:Component | c.parts != none
}

// A component cannot be a part of itself
pred inv2 {
    all c:Component | c not in c.^parts
}

// The position where a component is assembled must have at least one robot
pred inv3 {
    all c:Component | some r:Robot | r.rposition = c.cposition
}

// The parts required by a component cannot be assembled in a later position
pred inv4 {
    all c:Component, p:Product |
        p in c.parts implies (c.cposition.*(next.rposition)).!(p.cposition)
}

/*======== IFF PERFECT ORACLE ===============*/

pred inv1_OK {
    all c:Component | some c.parts
}

assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

pred inv2_OK {
    all c:Component | c not in c.^parts
}

assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

pred inv3_OK {
    all c:Component |
        some r:Robot | r.rposition = c.cposition
}

assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

pred inv4_OK {
    all c:Component, p:Product |
        p in c.parts implies (c.cposition.*(next.rposition)).!(p.cposition)
}

assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}

-- PerfectOracleCommands
check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0
check inv4_Repaired expect 0

pred repair_pred_1 {
    inv1[] iff inv1_OK[]
}

run repair_pred_1

assert repair_assert_1 {
    inv1[] iff inv1_OK[]
}

check repair_assert_1