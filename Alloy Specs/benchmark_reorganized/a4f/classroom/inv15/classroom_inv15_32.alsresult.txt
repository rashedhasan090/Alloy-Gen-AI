/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
pred inv1 {
	Person in Student
}
/* There are no teachers. */
pred inv2 {
	no Teacher
}
/* No person is both a student and a teacher. */
pred inv3 {
	no Student & Teacher
}
/* No person is neither a student nor a teacher. */
pred inv4 {
	Person in (Student + Teacher)
}
/* There are some classes assigned to teachers. */
pred inv5 {
	some Teacher.Teaches
}
/* Every teacher has classes assigned. */
pred inv6 {
	Teacher.Teaches in Class
}
/* Every class has teachers assigned. */
pred inv7 {
	Class in Teacher.Teaches
}
/* Teachers are assigned at most one class. */
pred inv8 {
	all t:Teacher | lone t.Teaches
}
/* No class has more than a teacher assigned. */
pred inv9 {
	all c:Class | lone c.Teaches & Teacher
}
/* For every class, every student has a group assigned. */
pred inv10 {
	all c:Class, s:Student | some s.(c.Groups)
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
	all c : Class | (some c.Groups) implies some Teacher & Teaches.c
}
/* Each teacher is responsible for some groups. */
pred inv12 {
	all t : Teacher | some (t.Teaches).Groups
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
	Tutors.Person in Teacher and Person.Tutors in Student
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14 {
	all s : Person, c : Class, t : Person, g : Group | (c -> s -> g in Groups) and t -> c in Teaches implies t -> s in Tutors
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
	all s : Person | some (s.^Tutors & Teacher)
}

/*======== IFF PERFECT ORACLE ===============*/
/* Repaired predicate */
pred pred_fixed {
	inv1 and inv2 and inv3 and inv4 and inv5 and inv6 and inv7 
	and inv8 and inv9 and inv10 and inv11 and inv12 and inv13 
	and inv14 and inv15
}

/* Repaired assertions */
assert inv1_Repaired {
    pred_fixed[] implies inv1[]
}
assert inv2_Repaired {
    pred_fixed[] implies inv2[]
}
assert inv3_Repaired {
    pred_fixed[] implies inv3[]
}
assert inv4_Repaired {
    pred_fixed[] implies inv4[]
}
assert inv5_Repaired {
    pred_fixed[] implies inv5[]
}
assert inv6_Repaired {
    pred_fixed[] implies inv6[]
}
assert inv7_Repaired {
    pred_fixed[] implies inv7[]
}
assert inv8_Repaired {
    pred_fixed[] implies inv8[]
}
assert inv9_Repaired {
    pred_fixed[] implies inv9[]
}
assert inv10_Repaired {
    pred_fixed[] implies inv10[]
}
assert inv11_Repaired {
    pred_fixed[] implies inv11[]
}
assert inv12_Repaired {
    pred_fixed[] implies inv12[]
}
assert inv13_Repaired {
    pred_fixed[] implies inv13[]
}
assert inv14_Repaired {
    pred_fixed[] implies inv14[]
}
assert inv15_Repaired {
    pred_fixed[] implies inv15[]
}

-- PerfectOracleCommands
check inv1_Repaired expect 0
check inv2_Repaired expect 0
check inv3_Repaired expect 0 
check inv4_Repaired expect 0
check inv5_Repaired expect 0
check inv6_Repaired expect 0
check inv7_Repaired expect 0
check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv10_Repaired expect 0
check inv11_Repaired expect 0
check inv12_Repaired expect 0
check inv13_Repaired expect 0
check inv14_Repaired expect 0
check inv15_Repaired expect 0