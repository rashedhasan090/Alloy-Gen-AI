/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
pred inv1 {
	Person in Student
}
/* There are no teachers. */
pred inv2 {
	no Teacher
}
/* No person is both a student and a teacher. */
pred inv3 {
	no Student & Teacher   
}
/* No person is neither a student nor a teacher. */
pred inv4 {
	Person in (Student + Teacher)
}
/* There are some classes assigned to teachers. */
pred inv5 {
	some Teacher.Teaches
}
/* Every teacher has classes assigned. */
pred inv6 {
	Teacher.Teaches != none
}
/* Every class has teachers assigned. */
pred inv7 {
	Class.Teaches != none
}
/* Teachers are assigned at most one class. */
pred inv8 {
	all t:Teacher | lone t.Teaches
}
/* No class has more than a teacher assigned. */
pred inv9 {
	all c:Class | lone c.Teaches.Teacher
}
/* For every class, every student has a group assigned. */
pred inv10 {
	all c:Class, s:Student | some c.Groups[s]
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
	all c : Class | (some c.Groups) implies some Teacher & c.Teaches
}
/* Each teacher is responsible for some groups. */
pred inv12 {
	all t : Teacher | some (t.Teaches).Groups
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
	all t:Teacher | t.Tutors = none
	all s:Student | s.Tutors = none
	all p:Person - Teacher - Student | p.Tutors != none
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14 {
	all s : Person, c : Class | c.Teaches.Teacher.Tutors.s in c.Groups[s] 
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
	all s : Person | some Teacher & ^s.Tutors
} 

/* The repaired code includes IFF PERFECT ORACLE assertions */

/* The corrected inv1 predicate */
pred inv1_OK {
  Person in Student 
}
assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

/* The corrected inv2 predicate */
pred inv2_OK {
  no Teacher 
}
assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

/* The corrected inv3 predicate */
pred inv3_OK {
  no Student & Teacher   
}
assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

/* The corrected inv4 predicate */
pred inv4_OK {
 Person in (Student + Teacher) 
}
assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}

/* The corrected inv5 predicate */
pred inv5_OK {
  some Teacher.Teaches 
}
assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

/* The corrected inv6 predicate */
pred inv6_OK {
  Teacher.Teaches != none
}
assert inv6_Repaired {
    inv6[] iff inv6_OK[]
}

/* The corrected inv7 predicate */
pred inv7_OK {
  Class.Teaches != none
}
assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}

/* The corrected inv8 predicate */
pred inv8_OK {
  all t:Teacher | lone t.Teaches
}
assert inv8_Repaired {
    inv8[] iff inv8_OK[]
}

/* The corrected inv9 predicate */
pred inv9_OK {
  all c:Class | lone c.Teaches.Teacher
}
assert inv9_Repaired {
    inv9[] iff inv9_OK[]
}

/* The corrected inv10 predicate */
pred inv10_OK {
  all c:Class, s:Student | some c.Groups[s]
}
assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}

/* The corrected inv11 predicate */
pred inv11_OK {
  all c : Class | (some c.Groups) implies some Teacher & c.Teaches
}
assert inv11_Repaired {
    inv11[] iff inv11_OK[]
}

/* The corrected inv12 predicate */
pred inv12_OK {
 all t : Teacher | some (t.Teaches).Groups
}
assert inv12_Repaired {
    inv12[] iff inv12_OK[]
}

/* The corrected inv13 predicate */
pred inv13_OK {
  all t:Teacher | t.Tutors = none
  all s:Student | s.Tutors = none
  all p:Person - Teacher - Student | p.Tutors != none
}
assert inv13_Repaired {
    inv13[] iff inv13_OK[]
}

/* The corrected inv14 predicate */
pred inv14_OK {
    all s : Person, c : Class, g : Group | c.Teaches.Teacher.Tutors.s = g.Persons implies g = c.Groups[s]
}
assert inv14_Repaired {
    inv14[] iff inv14_OK[]
}

/* The corrected inv15 predicate */
pred inv15_OK {
  all s : Person | some Teacher & ^s.Tutors
}
assert inv15_Repaired {
    inv15[] iff inv15_OK[]
}

/* The repaired commands for inv3 */
pred repair_pred_1{
    inv3[] iff inv3_OK[] 
}
run repair_pred_1
assert repair_assert_1{
    inv3[] iff inv3_OK[] 
}
check repair_assert_1

/* The complete corrected code */
/* The registered persons. */
sig Person  {
    /* Each person tutors a set of persons. */
    Tutors : set Person,
    /* Each person teaches a set of classes. */
    Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
    /* Each class has a set of persons assigned to a group. */
    Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
pred inv1 {
    Person in Student
}
/* There are no teachers. */
pred inv2 {
    no Teacher 
}
/* No person is both a student and a teacher. */
pred inv3 {
  no Student & Teacher   
}
/* No person is neither a student nor a teacher. */
pred inv4 {
    Person in (Student + Teacher)
}
/* There are some classes assigned to teachers. */
pred inv5 {
    some Teacher.Teaches 
}
/* Every teacher has classes assigned. */
pred inv6 {
    Teacher.Teaches != none
}
/* Every class has teachers assigned. */
pred inv7 {
    Class.Teaches != none
}
/* Teachers are assigned at most one class. */
pred inv8 {
    all t:Teacher | lone t.Teaches
}
/* No class has more than a teacher assigned. */
pred inv9 {
    all c:Class | lone c.Teaches.Teacher
}
/* For every class, every student has a group assigned. */
pred inv10 {
    all c:Class, s:Student | some c.Groups[s]
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
  all c : Class | (some c.Groups) implies some Teacher & c.Teaches
}
/* Each teacher is responsible for some groups. */
pred inv12 {
 all t : Teacher | some (t.Teaches).Groups
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
    all t:Teacher | t.Tutors = none
    all s:Student | s.Tutors = none
    all p:Person - Teacher - Student | p.Tutors != none
}
/* Every student in a class is at least tutored by 
 * all the teachers assigned to that class. */
pred inv14 {
    all s : Person, c : Class, g : Group | c.Teaches.Teacher.Tutors.s = g.Persons implies g = c.Groups[s]
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
  all s : Person | some Teacher & ^s.Tutors
} 

/* Perfect Oracle commands */
pred is_perfect_oracle{
    inv1_Repaired and inv2_Repaired and inv3_Repaired and inv4_Repaired and inv5_Repaired and
    inv6_Repaired and inv7_Repaired and inv8_Repaired and inv9_Repaired and inv10_Repaired and
    inv11_Repaired and inv12_Repaired and inv13_Repaired and inv14_Repaired and inv15_Repaired   
}
run is_perfect_oracle

/* Fixed predicates assertions */
assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}

assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

assert inv6_Repaired {
    inv6[] iff inv6_OK[]
}

assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}

assert inv8_Repaired {
    inv8[] iff inv8_OK[]
}

assert inv9_Repaired {
    inv9[] iff inv9_OK[]
}

assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}

assert inv11_Repaired {
    inv11[] iff inv11_OK[]
}

assert inv12_Repaired {
    inv12[] iff inv12_OK[]
}

assert inv13_Repaired {
    inv13[] iff inv13_OK[]
}

assert inv14_Repaired {
    inv14[] iff inv14_OK[]
}

assert inv15_Repaired {
    inv15[] iff inv15_OK[]
}