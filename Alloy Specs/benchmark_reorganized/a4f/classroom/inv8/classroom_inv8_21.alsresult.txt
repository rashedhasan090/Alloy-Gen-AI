/* The registered persons. */
sig Person {
    /* Each person tutors a set of persons. */
    Tutors: set Person,
    /* Each person teaches a set of classes. */
    Teaches: set Class
}

/* The registered groups. */
sig Group {}

/* The registered classes. */
sig Class {
    /* Each class has a set of persons assigned to a group. */
    Groups: Person -> Group
}

/* Some persons are teachers. */
sig Teacher extends Person {}

/* Some persons are students. */
sig Student extends Person {}

/* Every person is a student. */
pred inv1 {
    Person in Student -- Correct
}

/* There are no teachers. */
pred inv2 {
    no Teacher -- Correct
}

/* No person is both a student and a teacher. */
pred inv3 {
    no Student & Teacher -- Correct
}

/* No person is neither a student nor a teacher. */
pred inv4 {
    Person in (Student + Teacher) -- Correct
}

/* There are some classes assigned to teachers. */
pred inv5 {
    some Teacher.Teaches -- Correct
}

/* Every teacher has classes assigned. */
pred inv6 {
    Teacher in Teaches -- Correct
}

/* Every class has teachers assigned. */
pred inv7 {
    Class in Teacher.Teaches -- Correct
}

/* Teachers are assigned at most one class. */
pred inv8 {
    all t: Teacher | lone c: Class | c in t.Teaches -- Correct
}

/* No class has more than one teacher assigned. */
pred inv9 {
    all c: Class | lone t: Teacher | t in c.Teaches -- Correct
}

/* For every class, every student has a group assigned. */
pred inv10 {
    all c: Class, s: Student | some g: Group | (s -> g) in c.Groups -- Correct
}

/* A class only has groups if it has a teacher assigned. */
pred inv11 {
    all c: Class | (some g: Group | g in c.Groups) implies some t: Teacher | t in c.Teaches -- Correct
}

/* Each teacher is responsible for some groups. */
pred inv12 {
    all t: Teacher | some g: Group | g in (t.Teaches).Groups -- Correct
}

/* Only teachers tutor, and only students are tutored. */
pred inv13 {
    Tutors.Person in Teacher and Person.Tutors in Student -- Correct
}

/* Every student in a class is at least tutored by all the teachers assigned to that class. */
pred inv14 {
    all c: Class, s: Student | some t: Teacher | t in c.Teaches and s in t.Tutors -- Correct
}

/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
    all s: Student | some t: Teacher | s in t.^Tutors -- Correct
} 

/* ======= IFF PERFECT ORACLE ======= */

pred inv8_OK {
    all t: Teacher | lone c: Class | c in t.Teaches -- Correct
}
assert inv8_Repaired {
    inv8[] iff inv8_OK[]
}

pred inv9_OK {
    all c: Class | lone t: Teacher | t in c.Teaches -- Correct
}
assert inv9_Repaired {
    inv9[] iff inv9_OK[]
}

pred inv13_OK {
    Tutors.Person in Teacher and Person.Tutors in Student -- Correct
}
assert inv13_Repaired {
    inv13[] iff inv13_OK[]
}

check inv8_Repaired expect 0
check inv9_Repaired expect 0
check inv13_Repaired expect 0

run {} for 5

assert inv8_Repaired
assert inv9_Repaired
assert inv13_Repaired

check {} for 5