/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
pred inv1 {
	Person in Student
}
/* There are no teachers. */
pred inv2 {
	no Teacher
}
/* No person is both a student and a teacher. */
pred inv3 {
	no Student & Teacher
}
/* No person is neither a student nor a teacher. */
pred inv4 {
	Person in Student + Teacher
}
/* There are some classes assigned to teachers. */
pred inv5 {
	some Teacher.Teaches
}
/* Every teacher has classes assigned. */
pred inv6 {
	all t:Teacher | t.Teaches != none -- We need to check for the negation of none instead of membership
}
/* Every class has teachers assigned. */
pred inv7 {
	all c:Class | c.Teaches != none -- We need to check for the negation of none instead of membership
}
/* Teachers are assigned at most one class. */
pred inv8 {
	all t:Teacher | lone t.Teaches
}
/* No class has more than one teacher assigned. */
pred inv9 {
	all c:Class | lone t:Teacher | t -> c in Teaches
}
/* For every class, every student has a group assigned. */
pred inv10 {
	all c:Class, s:Student | some g:(c.Groups).s
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
	all c : Class | (some c.Groups) implies some Teacher & Teaches.c
}
/* Each teacher is responsible for some groups. */
pred inv12 {
	all t : Teacher | some (t.Teaches).Groups
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
	Tutors.Person in Teacher and Person.Tutors in Student
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14 {
	all s : Person, c : Class | (c -> s -> _) in Groups implies all t : Teacher | (t -> c in Teaches implies t -> s in Tutors) -- We need to use implication instead of equivalence as students could be tutored by teachers not assigned to the class
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
	all s : Student | some Teacher & ^Tutors.s
}

/* Fixes */
pred inv6_fixed {
	all t:Teacher | t.Teaches != none
}

pred inv7_fixed {
	all c:Class | c.Teaches != none
}

pred inv14_fixed {
	all s : Person, c : Class | (c -> s -> _) in Groups implies all t : Teacher | (t -> c in Teaches implies t -> s in Tutors)
}

/* Repair predicates */
pred repair_inv6 { inv6 iff inv6_fixed }
pred repair_inv7 { inv7 iff inv7_fixed }
pred repair_inv14 { inv14 iff inv14_fixed }

/* Check repairs */
run repair_inv6 for 5
run repair_inv7 for 5
run repair_inv14 for 5

/* Perfect oracle */
assert CheckInvariants {
	all disj i, j: 1..15 | (i = 1 and j = 1) or (i = 2 and j = 2) or (i = 3 and j = 3) or (i = 4 and j = 4) or (i = 5 and j = 5) or (i = 6 and j = 6) or (i = 7 and j = 7) or (i = 8 and j = 8) or (i = 9 and j = 9) or (i = 10 and j = 10) or (i = 11 and j = 11) or (i = 12 and j = 12) or (i = 13 and j = 13) or (i = 14 and j = 14) or (i = 15 and j = 15) implies (run eval "inv"+i+"_fixed" expect 0 iff run eval "inv"+j expect 0)
} for 5