/*
A labeled transition system (LTS) is comprised by States, a sub-set
of which are Initial, connected by transitions, here represented by 
Events.
*/
sig Event {}
sig State {
    trans: Event -> State
}
sig Init in State {}

/*
The LTS does not contain deadlocks, ie, each state has at least a 
transition.
*/
pred inv1 {
    all s: State | some s.trans
}

/*
There is a single initial state.
*/
pred inv2 {
    one i: Init | i in State
}

/*
The LTS is deterministic, ie, each state has at most a transition for each event.
*/
pred inv3 {
    all s: State, e: Event | lone e.(s.trans)
}

/*
All states are reachable from an initial state.
*/
pred inv4 {
    let tr = {s1, s2: State | some e: Event | s1->e->s2 in trans} |
    State in Init.^tr
}

/*
All the states have the same events available.
*/
pred inv5 {
    all s, s': State | s'.trans.Event = s.trans.Event
}

/*
Each event is available in at least a state.
*/
pred inv6 {
    all e: Event | some s: State | e in s.trans.Event
}

/*
The LTS is reversible, ie, from a reachable state it is always possible 
to return to an initial state.
*/
pred inv7 {
  let tr = { s1, s2: State | some e: Event | s1->e->s2 in trans } |
  all s: Init.^tr | some i: Init | i in s.^tr 
}

/*
  Repairing inv3 by adjusting its definition to directly match the intuitive explanation.
*/
pred inv3_OK {
  all e: Event | 
    let ts = {t: e -> s} |
    lone ts and ts in s.trans implies e in ts.s
}

/*
Asserting that the repaired predicate is equivalent to the original.
*/
assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

/*
Checking that all other original invariants hold for the repaired LTS.
*/
assert PerfectOracle {
    inv1[] and 
    inv2[] and 
    inv4[] and 
    inv5[] and 
    inv6[] and 
    inv7[] and
    inv3_Repaired[]
}

check PerfectOracle
```