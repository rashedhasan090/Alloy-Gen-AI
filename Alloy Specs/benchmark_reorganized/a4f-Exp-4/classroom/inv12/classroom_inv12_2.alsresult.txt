Fixed code:

/* The registered persons. */
sig Person  {
	/* Each person tutors a set of persons. */
	Tutors : set Person,
	/* Each person teaches a set of classes. */
	Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
	/* Each class has a set of persons assigned to a group. */
	Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
pred inv1 {
	Person in Student 
}
/* There are no teachers. */
pred inv2 {
	no Teacher 
}
/* No person is both a student and a teacher. */
pred inv3 {
	no Student & Teacher 
}
/* No person is neither a student nor a teacher. */
pred inv4 {
	Person = Student + Teacher 
}
/* There are some classes assigned to teachers. */
pred inv5 {
	some t:Teacher | t.Teaches != none 
}
/* Every teacher has classes assigned. */
pred inv6 {
	all t:Teacher | t.Teaches !=none
}
/* Every class has teachers assigned. */
pred inv7 {
	all c:Class | Teaches.c != none
}
/* Teachers are assigned at most one class. */
pred inv8 {
	all t:Teacher | lone t.Teaches 
}
/* No class has more than one teacher assigned. */
pred inv9 {
	all c:Class | lone c->(Teacher.Teaches) 
}
/* For every class, every student has a group assigned. */
pred inv10 {
	all c:Class, s:Student | some g:Group | c->s->g in Groups
}
/* A class only has groups if it has a teacher assigned. */
pred inv11 {
	all c : Class | (some c.Groups) implies some t:Teacher | t.Teaches = c
}
/* Each teacher is responsible for some groups. */
pred inv12 {
	all t:Teacher | some cg:(Class->Person->Group) | cg in Groups and all c:Class | some p:Person | cg.(c,p) = g and p in t.Teaches
}
/* Only teachers tutor, and only students are tutored. */
pred inv13 {
	Tutor.Person = Teacher and Student.Tutors = Student
}
/* Every student in a class is at least tutored by all the teachers
 * assigned to that class. */
pred inv14 {
	all s : Student, c : Class | c->s->(Groups.Person) in Tutors and all t:Teacher | t.Teaches=c implies s in t.Tutors
}
/* The tutoring chain of every person eventually reaches a Teacher. */
pred inv15 {
	all s : Student | some t:Teacher | s in ^Tutors.t
}

/*========= PERFECT ORACLE COMMANDS ==========*/

pred inv1_OK {
  Person in Student 
}
assert inv1_Repaired {
    inv1[] iff inv1_OK[]
}

pred inv2_OK {
  no Teacher 
}
assert inv2_Repaired {
    inv2[] iff inv2_OK[]
}

pred inv3_OK {
  no Student & Teacher 
}
assert inv3_Repaired {
    inv3[] iff inv3_OK[]
}

pred inv4_OK {
 Person = Student + Teacher 
}
assert inv4_Repaired {
    inv4[] iff inv4_OK[]
}

pred inv5_OK {
  some t:Teacher | t.Teaches != none 
}
assert inv5_Repaired {
    inv5[] iff inv5_OK[]
}

pred inv6_OK {
  all t:Teacher | t.Teaches !=none
}
assert inv6_Repaired {
    inv6[] iff inv6_OK[]
}

pred inv7_OK {
  all c:Class | Teaches.c != none
}
assert inv7_Repaired {
    inv7[] iff inv7_OK[]
}

pred inv8_OK {
  all t:Teacher | lone t.Teaches 
}
assert inv8_Repaired {
    inv8[] iff inv8_OK[]
}

pred inv9_OK {
  all c:Class | lone c->(Teacher.Teaches) 
}
assert inv9_Repaired {
    inv9[] iff inv9_OK[]
}

pred inv10_OK {
  all c:Class, s:Student | some g:Group | c->s->g in Groups
}
assert inv10_Repaired {
    inv10[] iff inv10_OK[]
}

pred inv11_OK {
  all c : Class | (some c.Groups) implies some t:Teacher | t.Teaches = c
}
assert inv11_Repaired {
    inv11[] iff inv11_OK[]
}

pred inv12_OK {
	all t:Teacher | some cg:(Class->Person->Group) | cg in Groups and all c:Class | some p:Person | cg.(c,p) in g and p in t.Teaches
}
assert inv12_Repaired {
  inv12[] iff inv12_OK[]
}

pred inv13_OK {
  Tutor.Person = Teacher and Student.Tutors = Student
}
assert inv13_Repaired {
    inv13[] iff inv13_OK[]
}

pred inv14_OK {
  all s : Student, c : Class | c->s->(Groups.Person) in Tutors and all t:Teacher | t.Teaches=c implies s in t.Tutors
}
assert inv14_Repaired {
  inv14[] iff inv14_OK[]
}

pred inv15_OK {
  all s : Student | some t:Teacher | s in ^Tutors.t
}
assert inv15_Repaired {
  inv15[] iff inv15_OK[]
}

-- Repair all predicates
run inv1_Repaired, inv2_Repaired, inv3_Repaired, inv4_Repaired, inv5_Repaired,
    inv6_Repaired, inv7_Repaired, inv8_Repaired, inv9_Repaired, inv10_Repaired,
    inv11_Repaired, inv12_Repaired, inv13_Repaired, inv14_Repaired, inv15_Repaired
check inv1_Repaired, inv2_Repaired, inv3_Repaired, inv4_Repaired, inv5_Repaired,
    inv6_Repaired, inv7_Repaired, inv8_Repaired, inv9_Repaired, inv10_Repaired,
    inv11_Repaired, inv12_Repaired, inv13_Repaired, inv14_Repaired, inv15_Repaired