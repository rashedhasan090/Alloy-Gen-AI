Fixed Alloy specification:

/* The registered persons. */
sig Person  {
    /* Each person tutors a set of persons. */
    Tutors : set Person,
    /* Each person teaches a set of classes. */
    Teaches : set Class
}
/* The registered groups. */
sig Group {}
/* The registered classes. */
sig Class  {
    /* Each class has a set of persons assigned to a group. */
    Groups : Person -> Group
}
/* Some persons are teachers. */
sig Teacher extends Person  {}
/* Some persons are students. */
sig Student extends Person  {}
/* Every person is a student. */
assert inv1 {
    all p : Person | p in Student 
}
/* There are no teachers. */
assert inv2 {
    no t : Teacher 
}
/* No person is both a student and a teacher. */
assert inv3 {
    no s : Student & s in Teacher 
}
/* No person is neither a student nor a teacher. */
assert inv4 {
    all p : Person | p in (Student + Teacher) 
}
/* There are some classes assigned to teachers. */
assert inv5 {
    some t : Teacher | t.Teaches != None 
}
/* Every teacher has classes assigned. */
assert inv6 {
    all t : Teacher | t.Teaches != None implies t in Teaches.Class 
}
/* Every class has teachers assigned. */
assert inv7 {
    all c : Class | c.Groups != none implies c in Teacher.Teaches 
}
/* Teachers are assigned at most one class. */
assert inv8 {
    all t : Teacher | #t.Teaches <= 1
}
/* No class has more than a teacher assigned. */
assert inv9 {
    all c : Class | #c.Groups <= 1
}
/* For every class, every student has a group assigned. */
assert inv10 {
    all c : Class, s : Student | some g : c.Groups | s in g.Person
}
/* A class only has groups if it has a teacher assigned. */
assert inv11 {
    all c : Class | c.Groups != none implies some t : Teacher | (t in Teaches.c) and (c in t.Teaches) 
}
/* Each teacher is responsible for some groups. */
assert inv12 {
    all t : Teacher | some c : t.Teaches | some g : c.Groups | t in g.Person
}
/* Only teachers tutor, and only students are tutored. */
assert inv13 {
    all p : Person | p.Tutors != none implies p in Student and p in Teacher lone without p.Teaches
}
/* Every student in a class is at least tutored by all the teachers assigned to that class. */
assert inv14 {
    all s : Student, c : Class | c.Groups[s] != none implies all t : c.Teaches | s in t.Tutors
}
/* The tutoring chain of every person eventually reaches a Teacher. */
assert inv15 {
    all p : Person | some t : Teacher & ^p.Tutors.t
}